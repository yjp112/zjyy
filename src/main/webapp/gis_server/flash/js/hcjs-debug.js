/*!
 * jQuery JavaScript Library v1.8.3
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: Tue Nov 13 2012 08:20:33 GMT-0500 (Eastern Standard Time)
 */
(function( window, undefined ) {
var
	// A central reference to the root jQuery(document)
	rootjQuery,

	// The deferred used on DOM ready
	readyList,

	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,
	location = window.location,
	navigator = window.navigator,

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// Save a reference to some core methods
	core_push = Array.prototype.push,
	core_slice = Array.prototype.slice,
	core_indexOf = Array.prototype.indexOf,
	core_toString = Object.prototype.toString,
	core_hasOwn = Object.prototype.hasOwnProperty,
	core_trim = String.prototype.trim,

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context, rootjQuery );
	},

	// Used for matching numbers
	core_pnum = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source,

	// Used for detecting and trimming whitespace
	core_rnotwhite = /\S/,
	core_rspace = /\s+/,

	// Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	rquickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,

	// Match a standalone tag
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,

	// JSON RegExp
	rvalidchars = /^[\],:{}\s]*$/,
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
	rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
	rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d\d*\.|)\d+(?:[eE][\-+]?\d+|)/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return ( letter + "" ).toUpperCase();
	},

	// The ready event handler and self cleanup method
	DOMContentLoaded = function() {
		if ( document.addEventListener ) {
			document.removeEventListener( "DOMContentLoaded", DOMContentLoaded, false );
			jQuery.ready();
		} else if ( document.readyState === "complete" ) {
			// we're here because readyState === "complete" in oldIE
			// which is good enough for us to call the dom ready!
			document.detachEvent( "onreadystatechange", DOMContentLoaded );
			jQuery.ready();
		}
	},

	// [[Class]] -> type pairs
	class2type = {};

jQuery.fn = jQuery.prototype = {
	constructor: jQuery,
	init: function( selector, context, rootjQuery ) {
		var match, elem, ret, doc;

		// Handle $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle $(DOMElement)
		if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;
					doc = ( context && context.nodeType ? context.ownerDocument || context : document );

					// scripts is true for back-compat
					selector = jQuery.parseHTML( match[1], doc, true );
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						this.attr.call( selector, context, true );
					}

					return jQuery.merge( this, selector );

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return rootjQuery.ready( selector );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	},

	// Start with an empty selector
	selector: "",

	// The current version of jQuery being used
	jquery: "1.8.3",

	// The default length of a jQuery object is 0
	length: 0,

	// The number of elements contained in the matched element set
	size: function() {
		return this.length;
	},

	toArray: function() {
		return core_slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			( num < 0 ? this[ this.length + num ] : this[ num ] );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems, name, selector ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		ret.context = this.context;

		if ( name === "find" ) {
			ret.selector = this.selector + ( this.selector ? " " : "" ) + selector;
		} else if ( name ) {
			ret.selector = this.selector + "." + name + "(" + selector + ")";
		}

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	ready: function( fn ) {
		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	},

	eq: function( i ) {
		i = +i;
		return i === -1 ?
			this.slice( i ) :
			this.slice( i, i + 1 );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	slice: function() {
		return this.pushStack( core_slice.apply( this, arguments ),
			"slice", core_slice.call(arguments).join(",") );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: core_push,
	sort: [].sort,
	splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( length === i ) {
		target = this;
		--i;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	noConflict: function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	},

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( !document.body ) {
			return setTimeout( jQuery.ready, 1 );
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.trigger ) {
			jQuery( document ).trigger("ready").off("ready");
		}
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		return !isNaN( parseFloat(obj) ) && isFinite( obj );
	},

	type: function( obj ) {
		return obj == null ?
			String( obj ) :
			class2type[ core_toString.call(obj) ] || "object";
	},

	isPlainObject: function( obj ) {
		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!core_hasOwn.call(obj, "constructor") &&
				!core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.

		var key;
		for ( key in obj ) {}

		return key === undefined || core_hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	error: function( msg ) {
		throw new Error( msg );
	},

	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// scripts (optional): If true, will include scripts passed in the html string
	parseHTML: function( data, context, scripts ) {
		var parsed;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			scripts = context;
			context = 0;
		}
		context = context || document;

		// Single tag
		if ( (parsed = rsingleTag.exec( data )) ) {
			return [ context.createElement( parsed[1] ) ];
		}

		parsed = jQuery.buildFragment( [ data ], context, scripts ? null : [] );
		return jQuery.merge( [],
			(parsed.cacheable ? jQuery.clone( parsed.fragment ) : parsed.fragment).childNodes );
	},

	parseJSON: function( data ) {
		if ( !data || typeof data !== "string") {
			return null;
		}

		// Make sure leading/trailing whitespace is removed (IE can't handle it)
		data = jQuery.trim( data );

		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {
			return window.JSON.parse( data );
		}

		// Make sure the incoming data is actual JSON
		// Logic borrowed from http://json.org/json2.js
		if ( rvalidchars.test( data.replace( rvalidescape, "@" )
			.replace( rvalidtokens, "]" )
			.replace( rvalidbraces, "")) ) {

			return ( new Function( "return " + data ) )();

		}
		jQuery.error( "Invalid JSON: " + data );
	},

	// Cross-browser xml parsing
	parseXML: function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new DOMParser();
				xml = tmp.parseFromString( data , "text/xml" );
			} else { // IE
				xml = new ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	},

	noop: function() {},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && core_rnotwhite.test( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var name,
			i = 0,
			length = obj.length,
			isObj = length === undefined || jQuery.isFunction( obj );

		if ( args ) {
			if ( isObj ) {
				for ( name in obj ) {
					if ( callback.apply( obj[ name ], args ) === false ) {
						break;
					}
				}
			} else {
				for ( ; i < length; ) {
					if ( callback.apply( obj[ i++ ], args ) === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isObj ) {
				for ( name in obj ) {
					if ( callback.call( obj[ name ], name, obj[ name ] ) === false ) {
						break;
					}
				}
			} else {
				for ( ; i < length; ) {
					if ( callback.call( obj[ i ], i, obj[ i++ ] ) === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Use native String.trim function wherever possible
	trim: core_trim && !core_trim.call("\uFEFF\xA0") ?
		function( text ) {
			return text == null ?
				"" :
				core_trim.call( text );
		} :

		// Otherwise use our own trimming functionality
		function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var type,
			ret = results || [];

		if ( arr != null ) {
			// The window, strings (and functions) also have 'length'
			// Tweaked logic slightly to handle Blackberry 4.7 RegExp issues #6930
			type = jQuery.type( arr );

			if ( arr.length == null || type === "string" || type === "function" || type === "regexp" || jQuery.isWindow( arr ) ) {
				core_push.call( ret, arr );
			} else {
				jQuery.merge( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( core_indexOf ) {
				return core_indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var l = second.length,
			i = first.length,
			j = 0;

		if ( typeof l === "number" ) {
			for ( ; j < l; j++ ) {
				first[ i++ ] = second[ j ];
			}

		} else {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, inv ) {
		var retVal,
			ret = [],
			i = 0,
			length = elems.length;
		inv = !!inv;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			retVal = !!callback( elems[ i ], i );
			if ( inv !== retVal ) {
				ret.push( elems[ i ] );
			}
		}

		return ret;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value, key,
			ret = [],
			i = 0,
			length = elems.length,
			// jquery objects are treated as arrays
			isArray = elems instanceof jQuery || length !== undefined && typeof length === "number" && ( ( length > 0 && elems[ 0 ] && elems[ length -1 ] ) || length === 0 || jQuery.isArray( elems ) ) ;

		// Go through the array, translating each of the items to their
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}

		// Go through every key on the object,
		} else {
			for ( key in elems ) {
				value = callback( elems[ key ], key, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}
		}

		// Flatten any nested arrays
		return ret.concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = core_slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context, args.concat( core_slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	access: function( elems, fn, key, value, chainable, emptyGet, pass ) {
		var exec,
			bulk = key == null,
			i = 0,
			length = elems.length;

		// Sets many values
		if ( key && typeof key === "object" ) {
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], 1, emptyGet, value );
			}
			chainable = 1;

		// Sets one value
		} else if ( value !== undefined ) {
			// Optionally, function values get executed if exec is true
			exec = pass === undefined && jQuery.isFunction( value );

			if ( bulk ) {
				// Bulk operations only iterate when executing function values
				if ( exec ) {
					exec = fn;
					fn = function( elem, key, value ) {
						return exec.call( jQuery( elem ), value );
					};

				// Otherwise they run against the entire set
				} else {
					fn.call( elems, value );
					fn = null;
				}
			}

			if ( fn ) {
				for (; i < length; i++ ) {
					fn( elems[i], key, exec ? value.call( elems[i], i, fn( elems[i], key ) ) : value, pass );
				}
			}

			chainable = 1;
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[0], key ) : emptyGet;
	},

	now: function() {
		return ( new Date() ).getTime();
	}
});

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready, 1 );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", DOMContentLoaded, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", jQuery.ready, false );

		// If IE event model is used
		} else {
			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", DOMContentLoaded );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", jQuery.ready );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch(e) {}

			if ( top && top.doScroll ) {
				(function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {
							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll("left");
						} catch(e) {
							return setTimeout( doScrollCheck, 50 );
						}

						// and execute any waiting functions
						jQuery.ready();
					}
				})();
			}
		}
	}
	return readyList.promise( obj );
};

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

// All jQuery objects should point back to these
rootjQuery = jQuery(document);
// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.split( core_rspace ), function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// Flag to know if list is currently firing
		firing,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Control if a given callback is in the list
			has: function( fn ) {
				return jQuery.inArray( fn, list ) > -1;
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				args = args || [];
				args = [ context, args.slice ? args.slice() : args ];
				if ( list && ( !fired || stack ) ) {
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};
jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var action = tuple[ 0 ],
								fn = fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ]( jQuery.isFunction( fn ) ?
								function() {
									var returned = fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.done( newDefer.resolve )
											.fail( newDefer.reject )
											.progress( newDefer.notify );
									} else {
										newDefer[ action + "With" ]( this === deferred ? newDefer : this, [ returned ] );
									}
								} :
								newDefer[ action ]
							);
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ] = list.fire
			deferred[ tuple[0] ] = list.fire;
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = core_slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;
					if( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});
jQuery.support = (function() {

	var support,
		all,
		a,
		select,
		opt,
		input,
		fragment,
		eventName,
		i,
		isSupported,
		clickFn,
		div = document.createElement("div");

	// Setup
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// Support tests won't run in some limited or non-browser environments
	all = div.getElementsByTagName("*");
	a = div.getElementsByTagName("a")[ 0 ];
	if ( !all || !a || !all.length ) {
		return {};
	}

	// First batch of tests
	select = document.createElement("select");
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName("input")[ 0 ];

	a.style.cssText = "top:1px;float:left;opacity:.5";
	support = {
		// IE strips leading whitespace when .innerHTML is used
		leadingWhitespace: ( div.firstChild.nodeType === 3 ),

		// Make sure that tbody elements aren't automatically inserted
		// IE will insert them into empty tables
		tbody: !div.getElementsByTagName("tbody").length,

		// Make sure that link elements get serialized correctly by innerHTML
		// This requires a wrapper element in IE
		htmlSerialize: !!div.getElementsByTagName("link").length,

		// Get the style information from getAttribute
		// (IE uses .cssText instead)
		style: /top/.test( a.getAttribute("style") ),

		// Make sure that URLs aren't manipulated
		// (IE normalizes it by default)
		hrefNormalized: ( a.getAttribute("href") === "/a" ),

		// Make sure that element opacity exists
		// (IE uses filter instead)
		// Use a regex to work around a WebKit issue. See #5145
		opacity: /^0.5/.test( a.style.opacity ),

		// Verify style float existence
		// (IE uses styleFloat instead of cssFloat)
		cssFloat: !!a.style.cssFloat,

		// Make sure that if no value is specified for a checkbox
		// that it defaults to "on".
		// (WebKit defaults to "" instead)
		checkOn: ( input.value === "on" ),

		// Make sure that a selected-by-default option has a working selected property.
		// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
		optSelected: opt.selected,

		// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
		getSetAttribute: div.className !== "t",

		// Tests for enctype support on a form (#6743)
		enctype: !!document.createElement("form").enctype,

		// Makes sure cloning an html5 element does not cause problems
		// Where outerHTML is undefined, this still works
		html5Clone: document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>",

		// jQuery.support.boxModel DEPRECATED in 1.8 since we don't support Quirks Mode
		boxModel: ( document.compatMode === "CSS1Compat" ),

		// Will be defined later
		submitBubbles: true,
		changeBubbles: true,
		focusinBubbles: false,
		deleteExpando: true,
		noCloneEvent: true,
		inlineBlockNeedsLayout: false,
		shrinkWrapBlocks: false,
		reliableMarginRight: true,
		boxSizingReliable: true,
		pixelPosition: false
	};

	// Make sure checked status is properly cloned
	input.checked = true;
	support.noCloneChecked = input.cloneNode( true ).checked;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Test to see if it's possible to delete an expando from an element
	// Fails in Internet Explorer
	try {
		delete div.test;
	} catch( e ) {
		support.deleteExpando = false;
	}

	if ( !div.addEventListener && div.attachEvent && div.fireEvent ) {
		div.attachEvent( "onclick", clickFn = function() {
			// Cloning a node shouldn't copy over any
			// bound event handlers (IE does this)
			support.noCloneEvent = false;
		});
		div.cloneNode( true ).fireEvent("onclick");
		div.detachEvent( "onclick", clickFn );
	}

	// Check if a radio maintains its value
	// after being appended to the DOM
	input = document.createElement("input");
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";

	input.setAttribute( "checked", "checked" );

	// #11217 - WebKit loses check when the name is after the checked attribute
	input.setAttribute( "name", "t" );

	div.appendChild( input );
	fragment = document.createDocumentFragment();
	fragment.appendChild( div.lastChild );

	// WebKit doesn't clone checked state correctly in fragments
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	support.appendChecked = input.checked;

	fragment.removeChild( input );
	fragment.appendChild( div );

	// Technique from Juriy Zaytsev
	// http://perfectionkills.com/detecting-event-support-without-browser-sniffing/
	// We only care about the case where non-standard event systems
	// are used, namely in IE. Short-circuiting here helps us to
	// avoid an eval call (in setAttribute) which can cause CSP
	// to go haywire. See: https://developer.mozilla.org/en/Security/CSP
	if ( div.attachEvent ) {
		for ( i in {
			submit: true,
			change: true,
			focusin: true
		}) {
			eventName = "on" + i;
			isSupported = ( eventName in div );
			if ( !isSupported ) {
				div.setAttribute( eventName, "return;" );
				isSupported = ( typeof div[ eventName ] === "function" );
			}
			support[ i + "Bubbles" ] = isSupported;
		}
	}

	// Run tests that need a body at doc ready
	jQuery(function() {
		var container, div, tds, marginDiv,
			divReset = "padding:0;margin:0;border:0;display:block;overflow:hidden;",
			body = document.getElementsByTagName("body")[0];

		if ( !body ) {
			// Return for frameset docs that don't have a body
			return;
		}

		container = document.createElement("div");
		container.style.cssText = "visibility:hidden;border:0;width:0;height:0;position:static;top:0;margin-top:1px";
		body.insertBefore( container, body.firstChild );

		// Construct the test element
		div = document.createElement("div");
		container.appendChild( div );

		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		// (only IE 8 fails this test)
		div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
		tds = div.getElementsByTagName("td");
		tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";
		isSupported = ( tds[ 0 ].offsetHeight === 0 );

		tds[ 0 ].style.display = "";
		tds[ 1 ].style.display = "none";

		// Check if empty table cells still have offsetWidth/Height
		// (IE <= 8 fail this test)
		support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

		// Check box-sizing and margin behavior
		div.innerHTML = "";
		div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
		support.boxSizing = ( div.offsetWidth === 4 );
		support.doesNotIncludeMarginInBodyOffset = ( body.offsetTop !== 1 );

		// NOTE: To any future maintainer, we've window.getComputedStyle
		// because jsdom on node.js will break without it.
		if ( window.getComputedStyle ) {
			support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

			// Check if div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container. For more
			// info see bug #3333
			// Fails in WebKit before Feb 2011 nightlies
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			marginDiv = document.createElement("div");
			marginDiv.style.cssText = div.style.cssText = divReset;
			marginDiv.style.marginRight = marginDiv.style.width = "0";
			div.style.width = "1px";
			div.appendChild( marginDiv );
			support.reliableMarginRight =
				!parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );
		}

		if ( typeof div.style.zoom !== "undefined" ) {
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			// (IE < 8 does this)
			div.innerHTML = "";
			div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
			support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );

			// Check if elements with layout shrink-wrap their children
			// (IE 6 does this)
			div.style.display = "block";
			div.style.overflow = "visible";
			div.innerHTML = "<div></div>";
			div.firstChild.style.width = "5px";
			support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );

			container.style.zoom = 1;
		}

		// Null elements to avoid leaks in IE
		body.removeChild( container );
		container = div = tds = marginDiv = null;
	});

	// Null elements to avoid leaks in IE
	fragment.removeChild( div );
	all = a = select = opt = input = fragment = div = null;

	return support;
})();
var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
	rmultiDash = /([A-Z])/g;

jQuery.extend({
	cache: {},

	deletedIds: [],

	// Remove at next major release (1.9/2.0)
	uuid: 0,

	// Unique for each copy of jQuery on the page
	// Non-digits removed to match rinlinejQuery
	expando: "jQuery" + ( jQuery.fn.jquery + Math.random() ).replace( /\D/g, "" ),

	// The following elements throw uncatchable exceptions if you
	// attempt to add expando properties to them.
	noData: {
		"embed": true,
		// Ban all objects except for Flash (which handle expandos)
		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
		"applet": true
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data, pvt /* Internal Use Only */ ) {
		if ( !jQuery.acceptData( elem ) ) {
			return;
		}

		var thisCache, ret,
			internalKey = jQuery.expando,
			getByName = typeof name === "string",

			// We have to handle DOM nodes and JS objects differently because IE6-7
			// can't GC object references properly across the DOM-JS boundary
			isNode = elem.nodeType,

			// Only DOM nodes need the global jQuery cache; JS object data is
			// attached directly to the object so GC can occur automatically
			cache = isNode ? jQuery.cache : elem,

			// Only defining an ID for JS objects if its cache already exists allows
			// the code to shortcut on the same path as a DOM node with no cache
			id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

		// Avoid doing any more work than we need to when trying to get data on an
		// object that has no data at all
		if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && getByName && data === undefined ) {
			return;
		}

		if ( !id ) {
			// Only DOM nodes need a new unique ID for each element since their data
			// ends up in the global cache
			if ( isNode ) {
				elem[ internalKey ] = id = jQuery.deletedIds.pop() || jQuery.guid++;
			} else {
				id = internalKey;
			}
		}

		if ( !cache[ id ] ) {
			cache[ id ] = {};

			// Avoids exposing jQuery metadata on plain JS objects when the object
			// is serialized using JSON.stringify
			if ( !isNode ) {
				cache[ id ].toJSON = jQuery.noop;
			}
		}

		// An object can be passed to jQuery.data instead of a key/value pair; this gets
		// shallow copied over onto the existing cache
		if ( typeof name === "object" || typeof name === "function" ) {
			if ( pvt ) {
				cache[ id ] = jQuery.extend( cache[ id ], name );
			} else {
				cache[ id ].data = jQuery.extend( cache[ id ].data, name );
			}
		}

		thisCache = cache[ id ];

		// jQuery data() is stored in a separate object inside the object's internal data
		// cache in order to avoid key collisions between internal data and user-defined
		// data.
		if ( !pvt ) {
			if ( !thisCache.data ) {
				thisCache.data = {};
			}

			thisCache = thisCache.data;
		}

		if ( data !== undefined ) {
			thisCache[ jQuery.camelCase( name ) ] = data;
		}

		// Check for both converted-to-camel and non-converted data property names
		// If a data property was specified
		if ( getByName ) {

			// First Try to find as-is property data
			ret = thisCache[ name ];

			// Test for null|undefined property data
			if ( ret == null ) {

				// Try to find the camelCased property
				ret = thisCache[ jQuery.camelCase( name ) ];
			}
		} else {
			ret = thisCache;
		}

		return ret;
	},

	removeData: function( elem, name, pvt /* Internal Use Only */ ) {
		if ( !jQuery.acceptData( elem ) ) {
			return;
		}

		var thisCache, i, l,

			isNode = elem.nodeType,

			// See jQuery.data for more information
			cache = isNode ? jQuery.cache : elem,
			id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

		// If there is already no cache entry for this object, there is no
		// purpose in continuing
		if ( !cache[ id ] ) {
			return;
		}

		if ( name ) {

			thisCache = pvt ? cache[ id ] : cache[ id ].data;

			if ( thisCache ) {

				// Support array or space separated string names for data keys
				if ( !jQuery.isArray( name ) ) {

					// try the string as a key before any manipulation
					if ( name in thisCache ) {
						name = [ name ];
					} else {

						// split the camel cased version by spaces unless a key with the spaces exists
						name = jQuery.camelCase( name );
						if ( name in thisCache ) {
							name = [ name ];
						} else {
							name = name.split(" ");
						}
					}
				}

				for ( i = 0, l = name.length; i < l; i++ ) {
					delete thisCache[ name[i] ];
				}

				// If there is no data left in the cache, we want to continue
				// and let the cache object itself get destroyed
				if ( !( pvt ? isEmptyDataObject : jQuery.isEmptyObject )( thisCache ) ) {
					return;
				}
			}
		}

		// See jQuery.data for more information
		if ( !pvt ) {
			delete cache[ id ].data;

			// Don't destroy the parent cache unless the internal data object
			// had been the only thing left in it
			if ( !isEmptyDataObject( cache[ id ] ) ) {
				return;
			}
		}

		// Destroy the cache
		if ( isNode ) {
			jQuery.cleanData( [ elem ], true );

		// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
		} else if ( jQuery.support.deleteExpando || cache != cache.window ) {
			delete cache[ id ];

		// When all else fails, null
		} else {
			cache[ id ] = null;
		}
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return jQuery.data( elem, name, data, true );
	},

	// A method for determining if a DOM node can handle the data expando
	acceptData: function( elem ) {
		var noData = elem.nodeName && jQuery.noData[ elem.nodeName.toLowerCase() ];

		// nodes accept data unless otherwise specified; rejection can be conditional
		return !noData || noData !== true && elem.getAttribute("classid") === noData;
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var parts, part, attr, name, l,
			elem = this[0],
			i = 0,
			data = null;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					attr = elem.attributes;
					for ( l = attr.length; i < l; i++ ) {
						name = attr[i].name;

						if ( !name.indexOf( "data-" ) ) {
							name = jQuery.camelCase( name.substring(5) );

							dataAttr( elem, name, data[ name ] );
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		parts = key.split( ".", 2 );
		parts[1] = parts[1] ? "." + parts[1] : "";
		part = parts[1] + "!";

		return jQuery.access( this, function( value ) {

			if ( value === undefined ) {
				data = this.triggerHandler( "getData" + part, [ parts[0] ] );

				// Try to fetch any internally stored data first
				if ( data === undefined && elem ) {
					data = jQuery.data( elem, key );
					data = dataAttr( elem, key, data );
				}

				return data === undefined && parts[1] ?
					this.data( parts[0] ) :
					data;
			}

			parts[1] = value;
			this.each(function() {
				var self = jQuery( this );

				self.triggerHandler( "setData" + part, parts );
				jQuery.data( this, key, value );
				self.triggerHandler( "changeData" + part, parts );
			});
		}, null, value, arguments.length > 1, null, false );
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
				data === "false" ? false :
				data === "null" ? null :
				// Only convert to a number if it doesn't change the string
				+data + "" === data ? +data :
				rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}
jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray(data) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				jQuery.removeData( elem, type + "queue", true );
				jQuery.removeData( elem, key, true );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	delay: function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var nodeHook, boolHook, fixSpecified,
	rclass = /[\t\r\n]/g,
	rreturn = /\r/g,
	rtype = /^(?:button|input)$/i,
	rfocusable = /^(?:button|input|object|select|textarea)$/i,
	rclickable = /^a(?:rea|)$/i,
	rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
	getSetAttribute = jQuery.support.getSetAttribute;

jQuery.fn.extend({
	attr: function( name, value ) {
		return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	},

	prop: function( name, value ) {
		return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	},

	addClass: function( value ) {
		var classNames, i, l, elem,
			setClass, c, cl;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call(this, j, this.className) );
			});
		}

		if ( value && typeof value === "string" ) {
			classNames = value.split( core_rspace );

			for ( i = 0, l = this.length; i < l; i++ ) {
				elem = this[ i ];

				if ( elem.nodeType === 1 ) {
					if ( !elem.className && classNames.length === 1 ) {
						elem.className = value;

					} else {
						setClass = " " + elem.className + " ";

						for ( c = 0, cl = classNames.length; c < cl; c++ ) {
							if ( setClass.indexOf( " " + classNames[ c ] + " " ) < 0 ) {
								setClass += classNames[ c ] + " ";
							}
						}
						elem.className = jQuery.trim( setClass );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var removes, className, elem, c, cl, i, l;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call(this, j, this.className) );
			});
		}
		if ( (value && typeof value === "string") || value === undefined ) {
			removes = ( value || "" ).split( core_rspace );

			for ( i = 0, l = this.length; i < l; i++ ) {
				elem = this[ i ];
				if ( elem.nodeType === 1 && elem.className ) {

					className = (" " + elem.className + " ").replace( rclass, " " );

					// loop over each item in the removal list
					for ( c = 0, cl = removes.length; c < cl; c++ ) {
						// Remove until there is nothing to remove,
						while ( className.indexOf(" " + removes[ c ] + " ") >= 0 ) {
							className = className.replace( " " + removes[ c ] + " " , " " );
						}
					}
					elem.className = value ? jQuery.trim( className ) : "";
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isBool = typeof stateVal === "boolean";

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					state = stateVal,
					classNames = value.split( core_rspace );

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					state = isBool ? state : !self.hasClass( className );
					self[ state ? "addClass" : "removeClass" ]( className );
				}

			} else if ( type === "undefined" || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// toggle whole className
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	},

	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val,
				self = jQuery(this);

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, self.val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map(val, function ( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				// attributes.value is undefined in Blackberry 4.7 but
				// uses .value. See #6932
				var val = elem.attributes.value;
				return !val || val.specified ? elem.value : elem.text;
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var values = jQuery.makeArray( value );

				jQuery(elem).find("option").each(function() {
					this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;
				});

				if ( !values.length ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	},

	// Unused in 1.8, left in so attrFn-stabbers won't die; remove in 1.9
	attrFn: {},

	attr: function( elem, name, value, pass ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( pass && jQuery.isFunction( jQuery.fn[ name ] ) ) {
			return jQuery( elem )[ name ]( value );
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( notxml ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] || ( rboolean.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;

			} else if ( hooks && "set" in hooks && notxml && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && notxml && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			//bugfix 2014.5.13
			//ret = elem.getAttribute( name );
			ret = elem.getAttribute ? elem.getAttribute(name) : null;

			// Non-existent attributes return null, we normalize to undefined
			return ret === null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var propName, attrNames, name, isBool,
			i = 0;

		if ( value && elem.nodeType === 1 ) {

			attrNames = value.split( core_rspace );

			for ( ; i < attrNames.length; i++ ) {
				name = attrNames[ i ];

				if ( name ) {
					propName = jQuery.propFix[ name ] || name;
					isBool = rboolean.test( name );

					// See #9699 for explanation of this approach (setting first, then removal)
					// Do not do this for boolean attributes (see #10870)
					if ( !isBool ) {
						jQuery.attr( elem, name, "" );
					}
					elem.removeAttribute( getSetAttribute ? name : propName );

					// Set corresponding property to false for boolean attributes
					if ( isBool && propName in elem ) {
						elem[ propName ] = false;
					}
				}
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				// We can't allow the type property to be changed (since it causes problems in IE)
				if ( rtype.test( elem.nodeName ) && elem.parentNode ) {
					jQuery.error( "type property can't be changed" );
				} else if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to it's default in case type is set after value
					// This is for element creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		},
		// Use the value property for back compat
		// Use the nodeHook for button elements in IE6/7 (#1954)
		value: {
			get: function( elem, name ) {
				if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
					return nodeHook.get( elem, name );
				}
				return name in elem ?
					elem.value :
					null;
			},
			set: function( elem, value, name ) {
				if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
					return nodeHook.set( elem, value, name );
				}
				// Does not return so that setAttribute is also used
				elem.value = value;
			}
		}
	},

	propFix: {
		tabindex: "tabIndex",
		readonly: "readOnly",
		"for": "htmlFor",
		"class": "className",
		maxlength: "maxLength",
		cellspacing: "cellSpacing",
		cellpadding: "cellPadding",
		rowspan: "rowSpan",
		colspan: "colSpan",
		usemap: "useMap",
		frameborder: "frameBorder",
		contenteditable: "contentEditable"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				return ( elem[ name ] = value );
			}

		} else {
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
				return ret;

			} else {
				return elem[ name ];
			}
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				var attributeNode = elem.getAttributeNode("tabindex");

				return attributeNode && attributeNode.specified ?
					parseInt( attributeNode.value, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						undefined;
			}
		}
	}
});

// Hook for boolean attributes
boolHook = {
	get: function( elem, name ) {
		// Align boolean attributes with corresponding properties
		// Fall back to attribute presence where some booleans are not supported
		var attrNode,
			property = jQuery.prop( elem, name );
		return property === true || typeof property !== "boolean" && ( attrNode = elem.getAttributeNode(name) ) && attrNode.nodeValue !== false ?
			name.toLowerCase() :
			undefined;
	},
	set: function( elem, value, name ) {
		var propName;
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			// value is true since we know at this point it's type boolean and not false
			// Set boolean attributes to the same name and set the DOM property
			propName = jQuery.propFix[ name ] || name;
			if ( propName in elem ) {
				// Only set the IDL specifically if it already exists on the element
				elem[ propName ] = true;
			}

			elem.setAttribute( name, name.toLowerCase() );
		}
		return name;
	}
};

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	fixSpecified = {
		name: true,
		id: true,
		coords: true
	};

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret;
			ret = elem.getAttributeNode( name );
			return ret && ( fixSpecified[ name ] ? ret.value !== "" : ret.specified ) ?
				ret.value :
				undefined;
		},
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				ret = document.createAttribute( name );
				elem.setAttributeNode( ret );
			}
			return ( ret.value = value + "" );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		});
	});

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		get: nodeHook.get,
		set: function( elem, value, name ) {
			if ( value === "" ) {
				value = "false";
			}
			nodeHook.set( elem, value, name );
		}
	};
}


// Some attributes require a special call on IE
if ( !jQuery.support.hrefNormalized ) {
	jQuery.each([ "href", "src", "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			get: function( elem ) {
				var ret = elem.getAttribute( name, 2 );
				return ret === null ? undefined : ret;
			}
		});
	});
}

if ( !jQuery.support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Normalize to lowercase since IE uppercases css property names
			return elem.style.cssText.toLowerCase() || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !jQuery.support.optSelected ) {
	jQuery.propHooks.selected = jQuery.extend( jQuery.propHooks.selected, {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	});
}

// IE6/7 call enctype encoding
if ( !jQuery.support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}

// Radios and checkboxes getter/setter
if ( !jQuery.support.checkOn ) {
	jQuery.each([ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			get: function( elem ) {
				// Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
				return elem.getAttribute("value") === null ? "on" : elem.value;
			}
		};
	});
}
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = jQuery.extend( jQuery.valHooks[ this ], {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	});
});
var rformElems = /^(?:textarea|input|select)$/i,
	rtypenamespace = /^([^\.]*|)(?:\.(.+)|)$/,
	rhoverHack = /(?:^|\s)hover(\.\S+|)\b/,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	hoverHack = function( events ) {
		return jQuery.event.special.hover ? events : events.replace( rhoverHack, "mouseenter$1 mouseleave$1" );
	};

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	add: function( elem, types, handler, data, selector ) {

		var elemData, eventHandle, events,
			t, tns, type, namespaces, handleObj,
			handleObjIn, handlers, special;

		// Don't attach events to noData or text/comment nodes (allow plain objects tho)
		if ( elem.nodeType === 3 || elem.nodeType === 8 || !types || !handler || !(elemData = jQuery._data( elem )) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		events = elemData.events;
		if ( !events ) {
			elemData.events = events = {};
		}
		eventHandle = elemData.handle;
		if ( !eventHandle ) {
			elemData.handle = eventHandle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		// jQuery(...).bind("mouseover mouseout", fn);
		types = jQuery.trim( hoverHack(types) ).split( " " );
		for ( t = 0; t < types.length; t++ ) {

			tns = rtypenamespace.exec( types[t] ) || [];
			type = tns[1];
			namespaces = ( tns[2] || "" ).split( "." ).sort();

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: tns[1],
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			handlers = events[ type ];
			if ( !handlers ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	global: {},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var t, tns, type, origType, namespaces, origCount,
			j, events, special, eventType, handleObj,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = jQuery.trim( hoverHack( types || "" ) ).split(" ");
		for ( t = 0; t < types.length; t++ ) {
			tns = rtypenamespace.exec( types[t] ) || [];
			type = origType = tns[1];
			namespaces = tns[2];

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector? special.delegateType : special.bindType ) || type;
			eventType = events[ type ] || [];
			origCount = eventType.length;
			namespaces = namespaces ? new RegExp("(^|\\.)" + namespaces.split(".").sort().join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

			// Remove matching events
			for ( j = 0; j < eventType.length; j++ ) {
				handleObj = eventType[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					 ( !handler || handler.guid === handleObj.guid ) &&
					 ( !namespaces || namespaces.test( handleObj.namespace ) ) &&
					 ( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					eventType.splice( j--, 1 );

					if ( handleObj.selector ) {
						eventType.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( eventType.length === 0 && origCount !== eventType.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery.removeData( elem, "events", true );
		}
	},

	// Events that are safe to short-circuit if no handlers are attached.
	// Native DOM events should not be added, they may have inline handlers.
	customEvent: {
		"getData": true,
		"setData": true,
		"changeData": true
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		// Don't do events on text and comment nodes
		if ( elem && (elem.nodeType === 3 || elem.nodeType === 8) ) {
			return;
		}

		// Event object or event type
		var cache, exclusive, i, cur, old, ontype, special, handle, eventPath, bubbleType,
			type = event.type || event,
			namespaces = [];

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "!" ) >= 0 ) {
			// Exclusive events trigger only for the exact event (no namespaces)
			type = type.slice(0, -1);
			exclusive = true;
		}

		if ( type.indexOf( "." ) >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}

		if ( (!elem || jQuery.event.customEvent[ type ]) && !jQuery.event.global[ type ] ) {
			// No jQuery handlers for this event type, and it can't have inline handlers
			return;
		}

		// Caller can pass in an Event, Object, or just an event type string
		event = typeof event === "object" ?
			// jQuery.Event object
			event[ jQuery.expando ] ? event :
			// Object literal
			new jQuery.Event( type, event ) :
			// Just the event type (string)
			new jQuery.Event( type );

		event.type = type;
		event.isTrigger = true;
		event.exclusive = exclusive;
		event.namespace = namespaces.join( "." );
		event.namespace_re = event.namespace? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
		ontype = type.indexOf( ":" ) < 0 ? "on" + type : "";

		// Handle a global trigger
		if ( !elem ) {

			// TODO: Stop taunting the data cache; remove global events and always attach to document
			cache = jQuery.cache;
			for ( i in cache ) {
				if ( cache[ i ].events && cache[ i ].events[ type ] ) {
					jQuery.event.trigger( event, data, cache[ i ].handle.elem, true );
				}
			}
			return;
		}

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data != null ? jQuery.makeArray( data ) : [];
		data.unshift( event );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		eventPath = [[ elem, special.bindType || type ]];
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			cur = rfocusMorph.test( bubbleType + type ) ? elem : elem.parentNode;
			for ( old = elem; cur; cur = cur.parentNode ) {
				eventPath.push([ cur, bubbleType ]);
				old = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( old === (elem.ownerDocument || document) ) {
				eventPath.push([ old.defaultView || old.parentWindow || window, bubbleType ]);
			}
		}

		// Fire handlers on the event path
		for ( i = 0; i < eventPath.length && !event.isPropagationStopped(); i++ ) {

			cur = eventPath[i][0];
			event.type = eventPath[i][1];

			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}
			// Note that this is a bare JS function and not a jQuery handler
			handle = ontype && cur[ ontype ];
			if ( handle && jQuery.acceptData( cur ) && handle.apply && handle.apply( cur, data ) === false ) {
				event.preventDefault();
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( elem.ownerDocument, data ) === false) &&
				!(type === "click" && jQuery.nodeName( elem, "a" )) && jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				// IE<9 dies on focus/blur to hidden element (#1486)
				if ( ontype && elem[ type ] && ((type !== "focus" && type !== "blur") || event.target.offsetWidth !== 0) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					old = elem[ ontype ];

					if ( old ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( old ) {
						elem[ ontype ] = old;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event || window.event );

		var i, j, cur, ret, selMatch, matched, matches, handleObj, sel, related,
			handlers = ( (jQuery._data( this, "events" ) || {} )[ event.type ] || []),
			delegateCount = handlers.delegateCount,
			args = core_slice.call( arguments ),
			run_all = !event.exclusive && !event.namespace,
			special = jQuery.event.special[ event.type ] || {},
			handlerQueue = [];

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers that should run if there are delegated events
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && !(event.button && event.type === "click") ) {

			for ( cur = event.target; cur != this; cur = cur.parentNode || this ) {

				// Don't process clicks (ONLY) on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.disabled !== true || event.type !== "click" ) {
					selMatch = {};
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];
						sel = handleObj.selector;

						if ( selMatch[ sel ] === undefined ) {
							selMatch[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( selMatch[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, matches: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( handlers.length > delegateCount ) {
			handlerQueue.push({ elem: this, matches: handlers.slice( delegateCount ) });
		}

		// Run delegates first; they may want to stop propagation beneath us
		for ( i = 0; i < handlerQueue.length && !event.isPropagationStopped(); i++ ) {
			matched = handlerQueue[ i ];
			event.currentTarget = matched.elem;

			for ( j = 0; j < matched.matches.length && !event.isImmediatePropagationStopped(); j++ ) {
				handleObj = matched.matches[ j ];

				// Triggered event must either 1) be non-exclusive and have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( run_all || (!event.namespace && !handleObj.namespace) || event.namespace_re && event.namespace_re.test( handleObj.namespace ) ) {

					event.data = handleObj.data;
					event.handleObj = handleObj;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						event.result = ret;
						if ( ret === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	// *** attrChange attrName relatedNode srcElement  are not normalized, non-W3C, deprecated, will be removed in 1.8 ***
	props: "attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop,
			originalEvent = event,
			fixHook = jQuery.event.fixHooks[ event.type ] || {},
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = jQuery.Event( originalEvent );

		for ( i = copy.length; i; ) {
			prop = copy[ --i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Fix target property, if necessary (#1925, IE 6/7/8 & Safari2)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Target should not be a text node (#504, Safari)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328; IE6/7/8)
		event.metaKey = !!event.metaKey;

		return fixHook.filter? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},

		focus: {
			delegateType: "focusin"
		},
		blur: {
			delegateType: "focusout"
		},

		beforeunload: {
			setup: function( data, namespaces, eventHandle ) {
				// We only want to do this special case on windows
				if ( jQuery.isWindow( this ) ) {
					this.onbeforeunload = eventHandle;
				}
			},

			teardown: function( namespaces, eventHandle ) {
				if ( this.onbeforeunload === eventHandle ) {
					this.onbeforeunload = null;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{ type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

// Some plugins are using, but it's undocumented/deprecated and will be removed.
// The 1.7 special event interface should provide all the hooks needed now.
jQuery.event.handle = jQuery.event.dispatch;

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if ( typeof elem[ name ] === "undefined" ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ? returnTrue : returnFalse; 

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

function returnFalse() {
	return false;
}
function returnTrue() {
	return true;
}

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	preventDefault: function() {
		this.isDefaultPrevented = returnTrue;

		var e = this.originalEvent;
		if ( !e ) {
			return;
		}

		// if preventDefault exists run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// otherwise set the returnValue property of the original event to false (IE)
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		this.isPropagationStopped = returnTrue;

		var e = this.originalEvent;
		if ( !e ) {
			return;
		}
		// if stopPropagation exists run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}
		// otherwise set the cancelBubble property of the original event to true (IE)
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	},
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj,
				selector = handleObj.selector;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !jQuery.support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !jQuery._data( form, "_submit_attached" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					jQuery._data( form, "_submit_attached", true );
				}
			});
			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !jQuery.support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
						}
						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event, true );
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "_change_attached" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					jQuery._data( elem, "_change_attached", true );
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !jQuery.support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler while someone wants focusin/focusout
		var attaches = 0,
			handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				if ( attaches++ === 0 ) {
					document.addEventListener( orig, handler, true );
				}
			},
			teardown: function() {
				if ( --attaches === 0 ) {
					document.removeEventListener( orig, handler, true );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) { // && selector != null
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	live: function( types, data, fn ) {
		jQuery( this.context ).on( types, this.selector, data, fn );
		return this;
	},
	die: function( types, fn ) {
		jQuery( this.context ).off( types, this.selector || "**", fn );
		return this;
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		if ( this[0] ) {
			return jQuery.event.trigger( type, data, this[0], true );
		}
	},

	toggle: function( fn ) {
		// Save reference to arguments for access in closure
		var args = arguments,
			guid = fn.guid || jQuery.guid++,
			i = 0,
			toggler = function( event ) {
				// Figure out which function to execute
				var lastToggle = ( jQuery._data( this, "lastToggle" + fn.guid ) || 0 ) % i;
				jQuery._data( this, "lastToggle" + fn.guid, lastToggle + 1 );

				// Make sure that clicks stop
				event.preventDefault();

				// and execute the function
				return args[ lastToggle ].apply( this, arguments ) || false;
			};

		// link all the functions, so any of them can unbind this click handler
		toggler.guid = guid;
		while ( i < args.length ) {
			args[ i++ ].guid = guid;
		}

		return this.click( toggler );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
});

jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		if ( fn == null ) {
			fn = data;
			data = null;
		}

		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};

	if ( rkeyEvent.test( name ) ) {
		jQuery.event.fixHooks[ name ] = jQuery.event.keyHooks;
	}

	if ( rmouseEvent.test( name ) ) {
		jQuery.event.fixHooks[ name ] = jQuery.event.mouseHooks;
	}
});
/*!
 * Sizzle CSS Selector Engine
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license
 * http://sizzlejs.com/
 */
(function( window, undefined ) {

var cachedruns,
	assertGetIdNotName,
	Expr,
	getText,
	isXML,
	contains,
	compile,
	sortOrder,
	hasDuplicate,
	outermostContext,

	baseHasDuplicate = true,
	strundefined = "undefined",

	expando = ( "sizcache" + Math.random() ).replace( ".", "" ),

	Token = String,
	document = window.document,
	docElem = document.documentElement,
	dirruns = 0,
	done = 0,
	pop = [].pop,
	push = [].push,
	slice = [].slice,
	// Use a stripped-down indexOf if a native one is unavailable
	indexOf = [].indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	// Augment a function for special use by Sizzle
	markFunction = function( fn, value ) {
		fn[ expando ] = value == null || value;
		return fn;
	},

	createCache = function() {
		var cache = {},
			keys = [];

		return markFunction(function( key, value ) {
			// Only keep the most recent entries
			if ( keys.push( key ) > Expr.cacheLength ) {
				delete cache[ keys.shift() ];
			}

			// Retrieve with (key + " ") to avoid collision with native Object.prototype properties (see Issue #157)
			return (cache[ key + " " ] = value);
		}, cache );
	},

	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),

	// Regex

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier (http://www.w3.org/TR/css3-selectors/#attribute-selectors)
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
	operators = "([*^$|!~]?=)",
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
		"*(?:" + operators + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

	// Prefer arguments not in parens/brackets,
	//   then attribute selectors and non-pseudos (denoted by :),
	//   then anything else
	// These preferences are here to reduce the number of selectors
	//   needing tokenize in the PSEUDO preFilter
	pseudos = ":(" + characterEncoding + ")(?:\\((?:(['\"])((?:\\\\.|[^\\\\])*?)\\2|([^()[\\]]*|(?:(?:" + attributes + ")|[^:]|\\\\.)*|.*))\\)|)",

	// For matchExpr.POS and matchExpr.needsContext
	pos = ":(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
		"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([\\x20\\t\\r\\n\\f>+~])" + whitespace + "*" ),
	rpseudo = new RegExp( pseudos ),

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w\-]+)|(\w+)|\.([\w\-]+))$/,

	rnot = /^:not/,
	rsibling = /[\x20\t\r\n\f]*[+~]/,
	rendsWithNot = /:not\($/,

	rheader = /h\d/i,
	rinputs = /input|select|textarea|button/i,

	rbackslash = /\\(?!\\)/g,

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"NAME": new RegExp( "^\\[name=['\"]?(" + characterEncoding + ")['\"]?\\]" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"POS": new RegExp( pos, "i" ),
		"CHILD": new RegExp( "^:(only|nth|first|last)-child(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		// For use in libraries implementing .is()
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|" + pos, "i" )
	},

	// Support

	// Used for testing something on an element
	assert = function( fn ) {
		var div = document.createElement("div");

		try {
			return fn( div );
		} catch (e) {
			return false;
		} finally {
			// release memory in IE
			div = null;
		}
	},

	// Check if getElementsByTagName("*") returns only elements
	assertTagNameNoComments = assert(function( div ) {
		div.appendChild( document.createComment("") );
		return !div.getElementsByTagName("*").length;
	}),

	// Check if getAttribute returns normalized href attributes
	assertHrefNotNormalized = assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild && typeof div.firstChild.getAttribute !== strundefined &&
			div.firstChild.getAttribute("href") === "#";
	}),

	// Check if attributes should be retrieved by attribute nodes
	assertAttributes = assert(function( div ) {
		div.innerHTML = "<select></select>";
		var type = typeof div.lastChild.getAttribute("multiple");
		// IE8 returns a string for some attributes even when not present
		return type !== "boolean" && type !== "string";
	}),

	// Check if getElementsByClassName can be trusted
	assertUsableClassName = assert(function( div ) {
		// Opera can't find a second classname (in 9.6)
		div.innerHTML = "<div class='hidden e'></div><div class='hidden'></div>";
		if ( !div.getElementsByClassName || !div.getElementsByClassName("e").length ) {
			return false;
		}

		// Safari 3.2 caches class attributes and doesn't catch changes
		div.lastChild.className = "e";
		return div.getElementsByClassName("e").length === 2;
	}),

	// Check if getElementById returns elements by name
	// Check if getElementsByName privileges form controls or returns elements by ID
	assertUsableName = assert(function( div ) {
		// Inject content
		div.id = expando + 0;
		div.innerHTML = "<a name='" + expando + "'></a><div name='" + expando + "'></div>";
		docElem.insertBefore( div, docElem.firstChild );

		// Test
		var pass = document.getElementsByName &&
			// buggy browsers will return fewer than the correct 2
			document.getElementsByName( expando ).length === 2 +
			// buggy browsers will return more than the correct 0
			document.getElementsByName( expando + 0 ).length;
		assertGetIdNotName = !document.getElementById( expando );

		// Cleanup
		docElem.removeChild( div );

		return pass;
	});

// If slice is not available, provide a backup
try {
	slice.call( docElem.childNodes, 0 )[0].nodeType;
} catch ( e ) {
	slice = function( i ) {
		var elem,
			results = [];
		for ( ; (elem = this[i]); i++ ) {
			results.push( elem );
		}
		return results;
	};
}

function Sizzle( selector, context, results, seed ) {
	results = results || [];
	context = context || document;
	var match, elem, xml, m,
		nodeType = context.nodeType;

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( nodeType !== 1 && nodeType !== 9 ) {
		return [];
	}

	xml = isXML( context );

	if ( !xml && !seed ) {
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, slice.call(context.getElementsByTagName( selector ), 0) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && assertUsableClassName && context.getElementsByClassName ) {
				push.apply( results, slice.call(context.getElementsByClassName( m ), 0) );
				return results;
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed, xml );
}

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	return Sizzle( expr, null, null, [ elem ] ).length > 0;
};

// Returns a function to use in pseudos for input types
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

// Returns a function to use in pseudos for buttons
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

// Returns a function to use in pseudos for positionals
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( nodeType ) {
		if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (see #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes
	} else {

		// If no nodeType, this is expected to be an array
		for ( ; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	}
	return ret;
};

isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

// Element contains another
contains = Sizzle.contains = docElem.contains ?
	function( a, b ) {
		var adown = a.nodeType === 9 ? a.documentElement : a,
			bup = b && b.parentNode;
		return a === bup || !!( bup && bup.nodeType === 1 && adown.contains && adown.contains(bup) );
	} :
	docElem.compareDocumentPosition ?
	function( a, b ) {
		return b && !!( a.compareDocumentPosition( b ) & 16 );
	} :
	function( a, b ) {
		while ( (b = b.parentNode) ) {
			if ( b === a ) {
				return true;
			}
		}
		return false;
	};

Sizzle.attr = function( elem, name ) {
	var val,
		xml = isXML( elem );

	if ( !xml ) {
		name = name.toLowerCase();
	}
	if ( (val = Expr.attrHandle[ name ]) ) {
		return val( elem );
	}
	if ( xml || assertAttributes ) {
		return elem.getAttribute( name );
	}
	val = elem.getAttributeNode( name );
	return val ?
		typeof elem[ name ] === "boolean" ?
			elem[ name ] ? name : null :
			val.specified ? val.value : null :
		null;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	// IE6/7 return a modified href
	attrHandle: assertHrefNotNormalized ?
		{} :
		{
			"href": function( elem ) {
				return elem.getAttribute( "href", 2 );
			},
			"type": function( elem ) {
				return elem.getAttribute("type");
			}
		},

	find: {
		"ID": assertGetIdNotName ?
			function( id, context, xml ) {
				if ( typeof context.getElementById !== strundefined && !xml ) {
					var m = context.getElementById( id );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					return m && m.parentNode ? [m] : [];
				}
			} :
			function( id, context, xml ) {
				if ( typeof context.getElementById !== strundefined && !xml ) {
					var m = context.getElementById( id );

					return m ?
						m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode("id").value === id ?
							[m] :
							undefined :
						[];
				}
			},

		"TAG": assertTagNameNoComments ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== strundefined ) {
					return context.getElementsByTagName( tag );
				}
			} :
			function( tag, context ) {
				var results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					var elem,
						tmp = [],
						i = 0;

					for ( ; (elem = results[i]); i++ ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			},

		"NAME": assertUsableName && function( tag, context ) {
			if ( typeof context.getElementsByName !== strundefined ) {
				return context.getElementsByName( name );
			}
		},

		"CLASS": assertUsableClassName && function( className, context, xml ) {
			if ( typeof context.getElementsByClassName !== strundefined && !xml ) {
				return context.getElementsByClassName( className );
			}
		}
	},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( rbackslash, "" );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[4] || match[5] || "" ).replace( rbackslash, "" );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				3 xn-component of xn+y argument ([+-]?\d*n|)
				4 sign of xn-component
				5 x of xn-component
				6 sign of y-component
				7 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1] === "nth" ) {
				// nth-child requires argument
				if ( !match[2] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[3] = +( match[3] ? match[4] + (match[5] || 1) : 2 * ( match[2] === "even" || match[2] === "odd" ) );
				match[4] = +( ( match[6] + match[7] ) || match[2] === "odd" );

			// other types prohibit arguments
			} else if ( match[2] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var unquoted, excess;
			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			if ( match[3] ) {
				match[2] = match[3];
			} else if ( (unquoted = match[4]) ) {
				// Only check arguments that contain a pseudo
				if ( rpseudo.test(unquoted) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

					// excess is a negative index
					unquoted = unquoted.slice( 0, excess );
					match[0] = match[0].slice( 0, excess );
				}
				match[2] = unquoted;
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {
		"ID": assertGetIdNotName ?
			function( id ) {
				id = id.replace( rbackslash, "" );
				return function( elem ) {
					return elem.getAttribute("id") === id;
				};
			} :
			function( id ) {
				id = id.replace( rbackslash, "" );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
					return node && node.value === id;
				};
			},

		"TAG": function( nodeName ) {
			if ( nodeName === "*" ) {
				return function() { return true; };
			}
			nodeName = nodeName.replace( rbackslash, "" ).toLowerCase();

			return function( elem ) {
				return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
			};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ expando ][ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( elem.className || (typeof elem.getAttribute !== strundefined && elem.getAttribute("class")) || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem, context ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.substr( result.length - check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.substr( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, argument, first, last ) {

			if ( type === "nth" ) {
				return function( elem ) {
					var node, diff,
						parent = elem.parentNode;

					if ( first === 1 && last === 0 ) {
						return true;
					}

					if ( parent ) {
						diff = 0;
						for ( node = parent.firstChild; node; node = node.nextSibling ) {
							if ( node.nodeType === 1 ) {
								diff++;
								if ( elem === node ) {
									break;
								}
							}
						}
					}

					// Incorporate the offset (or cast to NaN), then check against cycle size
					diff -= last;
					return diff === first || ( diff % first === 0 && diff / first >= 0 );
				};
			}

			return function( elem ) {
				var node = elem;

				switch ( type ) {
					case "only":
					case "first":
						while ( (node = node.previousSibling) ) {
							if ( node.nodeType === 1 ) {
								return false;
							}
						}

						if ( type === "first" ) {
							return true;
						}

						node = elem;

						/* falls through */
					case "last":
						while ( (node = node.nextSibling) ) {
							if ( node.nodeType === 1 ) {
								return false;
							}
						}

						return true;
				}
			};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
			//   not comment, processing instructions, or others
			// Thanks to Diego Perini for the nodeName shortcut
			//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
			var nodeType;
			elem = elem.firstChild;
			while ( elem ) {
				if ( elem.nodeName > "@" || (nodeType = elem.nodeType) === 3 || nodeType === 4 ) {
					return false;
				}
				elem = elem.nextSibling;
			}
			return true;
		},

		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"text": function( elem ) {
			var type, attr;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" &&
				(type = elem.type) === "text" &&
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === type );
		},

		// Input types
		"radio": createInputPseudo("radio"),
		"checkbox": createInputPseudo("checkbox"),
		"file": createInputPseudo("file"),
		"password": createInputPseudo("password"),
		"image": createInputPseudo("image"),

		"submit": createButtonPseudo("submit"),
		"reset": createButtonPseudo("reset"),

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"focus": function( elem ) {
			var doc = elem.ownerDocument;
			return elem === doc.activeElement && (!doc.hasFocus || doc.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		"active": function( elem ) {
			return elem === elem.ownerDocument.activeElement;
		},

		// Positional types
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			for ( var i = 0; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			for ( var i = 1; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			for ( var i = argument < 0 ? argument + length : argument; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			for ( var i = argument < 0 ? argument + length : argument; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

function siblingCheck( a, b, ret ) {
	if ( a === b ) {
		return ret;
	}

	var cur = a.nextSibling;

	while ( cur ) {
		if ( cur === b ) {
			return -1;
		}

		cur = cur.nextSibling;
	}

	return 1;
}

sortOrder = docElem.compareDocumentPosition ?
	function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		return ( !a.compareDocumentPosition || !b.compareDocumentPosition ?
			a.compareDocumentPosition :
			a.compareDocumentPosition(b) & 4
		) ? -1 : 1;
	} :
	function( a, b ) {
		// The nodes are identical, we can exit early
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// Fallback to using sourceIndex (in IE) if it's available on both nodes
		} else if ( a.sourceIndex && b.sourceIndex ) {
			return a.sourceIndex - b.sourceIndex;
		}

		var al, bl,
			ap = [],
			bp = [],
			aup = a.parentNode,
			bup = b.parentNode,
			cur = aup;

		// If the nodes are siblings (or identical) we can do a quick check
		if ( aup === bup ) {
			return siblingCheck( a, b );

		// If no parents were found then the nodes are disconnected
		} else if ( !aup ) {
			return -1;

		} else if ( !bup ) {
			return 1;
		}

		// Otherwise they're somewhere else in the tree so we need
		// to build up a full list of the parentNodes for comparison
		while ( cur ) {
			ap.unshift( cur );
			cur = cur.parentNode;
		}

		cur = bup;

		while ( cur ) {
			bp.unshift( cur );
			cur = cur.parentNode;
		}

		al = ap.length;
		bl = bp.length;

		// Start walking down the tree looking for a discrepancy
		for ( var i = 0; i < al && i < bl; i++ ) {
			if ( ap[i] !== bp[i] ) {
				return siblingCheck( ap[i], bp[i] );
			}
		}

		// We ended someplace up the tree so do a sibling check
		return i === al ?
			siblingCheck( a, bp[i], -1 ) :
			siblingCheck( ap[i], b, 1 );
	};

// Always assume the presence of duplicates if sort doesn't
// pass them to our comparison function (as in Google Chrome).
[0, 0].sort( sortOrder );
baseHasDuplicate = !hasDuplicate;

// Document sorting and removing duplicates
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		i = 1,
		j = 0;

	hasDuplicate = baseHasDuplicate;
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		for ( ; (elem = results[i]); i++ ) {
			if ( elem === results[ i - 1 ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	return results;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ expando ][ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( tokens = [] );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			tokens.push( matched = new Token( match.shift() ) );
			soFar = soFar.slice( matched.length );

			// Cast descendant combinators to space
			matched.type = match[0].replace( rtrim, " " );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {

				tokens.push( matched = new Token( match.shift() ) );
				soFar = soFar.slice( matched.length );
				matched.type = type;
				matched.matches = match;
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && combinator.dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( checkNonElements || elem.nodeType === 1  ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( !xml ) {
				var cache,
					dirkey = dirruns + " " + doneName + " ",
					cachedkey = dirkey + cachedruns;
				while ( (elem = elem[ dir ]) ) {
					if ( checkNonElements || elem.nodeType === 1 ) {
						if ( (cache = elem[ expando ]) === cachedkey ) {
							return elem.sizset;
						} else if ( typeof cache === "string" && cache.indexOf(dirkey) === 0 ) {
							if ( elem.sizset ) {
								return elem;
							}
						} else {
							elem[ expando ] = cachedkey;
							if ( matcher( elem, context, xml ) ) {
								elem.sizset = true;
								return elem;
							}
							elem.sizset = false;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( checkNonElements || elem.nodeType === 1 ) {
						if ( matcher( elem, context, xml ) ) {
							return elem;
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && tokens.slice( 0, i - 1 ).join("").replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && tokens.join("")
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, expandContext ) {
			var elem, j, matcher,
				setMatched = [],
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				outermost = expandContext != null,
				contextBackup = outermostContext,
				// We must always have either seed elements or context
				elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),
				// Nested matchers should use non-integer dirruns
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.E);

			if ( outermost ) {
				outermostContext = context !== document && context;
				cachedruns = superMatcher.el;
			}

			// Add elements passing elementMatchers directly to results
			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					for ( j = 0; (matcher = elementMatchers[j]); j++ ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
						cachedruns = ++superMatcher.el;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				for ( j = 0; (matcher = setMatchers[j]); j++ ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	superMatcher.el = 0;
	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ expando ][ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !group ) {
			group = tokenize( selector );
		}
		i = group.length;
		while ( i-- ) {
			cached = matcherFromTokens( group[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	}
	return cached;
};

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function select( selector, context, results, seed, xml ) {
	var i, tokens, token, type, find,
		match = tokenize( selector ),
		j = match.length;

	if ( !seed ) {
		// Try to minimize operations if there is only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					context.nodeType === 9 && !xml &&
					Expr.relative[ tokens[1].type ] ) {

				context = Expr.find["ID"]( token.matches[0].replace( rbackslash, "" ), context, xml )[0];
				if ( !context ) {
					return results;
				}

				selector = selector.slice( tokens.shift().length );
			}

			// Fetch a seed set for right-to-left matching
			for ( i = matchExpr["POS"].test( selector ) ? -1 : tokens.length - 1; i >= 0; i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( rbackslash, "" ),
						rsibling.test( tokens[0].type ) && context.parentNode || context,
						xml
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && tokens.join("");
						if ( !selector ) {
							push.apply( results, slice.call( seed, 0 ) );
							return results;
						}

						break;
					}
				}
			}
		}
	}

	// Compile and execute a filtering function
	// Provide `match` to avoid retokenization if we modified the selector above
	compile( selector, match )(
		seed,
		context,
		xml,
		results,
		rsibling.test( selector )
	);
	return results;
}

if ( document.querySelectorAll ) {
	(function() {
		var disconnectedMatch,
			oldSelect = select,
			rescape = /'|\\/g,
			rattributeQuotes = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,

			// qSa(:focus) reports false when true (Chrome 21), no need to also add to buggyMatches since matches checks buggyQSA
			// A support test would require too much code (would include document ready)
			rbuggyQSA = [ ":focus" ],

			// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
			// A support test would require too much code (would include document ready)
			// just skip matchesSelector for :active
			rbuggyMatches = [ ":active" ],
			matches = docElem.matchesSelector ||
				docElem.mozMatchesSelector ||
				docElem.webkitMatchesSelector ||
				docElem.oMatchesSelector ||
				docElem.msMatchesSelector;

		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explictly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select><option selected=''></option></select>";

			// IE8 - Some boolean attributes are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:checked|disabled|ismap|multiple|readonly|selected|value)" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here (do not put tests after this one)
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {

			// Opera 10-12/IE9 - ^= $= *= and empty values
			// Should not select anything
			div.innerHTML = "<p test=''></p>";
			if ( div.querySelectorAll("[test^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:\"\"|'')" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here (do not put tests after this one)
			div.innerHTML = "<input type='hidden'/>";
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push(":enabled", ":disabled");
			}
		});

		// rbuggyQSA always contains :focus, so no need for a length check
		rbuggyQSA = /* rbuggyQSA.length && */ new RegExp( rbuggyQSA.join("|") );

		select = function( selector, context, results, seed, xml ) {
			// Only use querySelectorAll when not filtering,
			// when this is not xml,
			// and when no QSA bugs apply
			if ( !seed && !xml && !rbuggyQSA.test( selector ) ) {
				var groups, i,
					old = true,
					nid = expando,
					newContext = context,
					newSelector = context.nodeType === 9 && selector;

				// qSA works strangely on Element-rooted queries
				// We can work around this by specifying an extra ID on the root
				// and working up from there (Thanks to Andrew Dupont for the technique)
				// IE 8 doesn't work on object elements
				if ( context.nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
					groups = tokenize( selector );

					if ( (old = context.getAttribute("id")) ) {
						nid = old.replace( rescape, "\\$&" );
					} else {
						context.setAttribute( "id", nid );
					}
					nid = "[id='" + nid + "'] ";

					i = groups.length;
					while ( i-- ) {
						groups[i] = nid + groups[i].join("");
					}
					newContext = rsibling.test( selector ) && context.parentNode || context;
					newSelector = groups.join(",");
				}

				if ( newSelector ) {
					try {
						push.apply( results, slice.call( newContext.querySelectorAll(
							newSelector
						), 0 ) );
						return results;
					} catch(qsaError) {
					} finally {
						if ( !old ) {
							context.removeAttribute("id");
						}
					}
				}
			}

			return oldSelect( selector, context, results, seed, xml );
		};

		if ( matches ) {
			assert(function( div ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				disconnectedMatch = matches.call( div, "div" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				try {
					matches.call( div, "[test!='']:sizzle" );
					rbuggyMatches.push( "!=", pseudos );
				} catch ( e ) {}
			});

			// rbuggyMatches always contains :active and :focus, so no need for a length check
			rbuggyMatches = /* rbuggyMatches.length && */ new RegExp( rbuggyMatches.join("|") );

			Sizzle.matchesSelector = function( elem, expr ) {
				// Make sure that attribute selectors are quoted
				expr = expr.replace( rattributeQuotes, "='$1']" );

				// rbuggyMatches always contains :active, so no need for an existence check
				if ( !isXML( elem ) && !rbuggyMatches.test( expr ) && !rbuggyQSA.test( expr ) ) {
					try {
						var ret = matches.call( elem, expr );

						// IE 9's matchesSelector returns false on disconnected nodes
						if ( ret || disconnectedMatch ||
								// As well, disconnected nodes are said to be in a document
								// fragment in IE 9
								elem.document && elem.document.nodeType !== 11 ) {
							return ret;
						}
					} catch(e) {}
				}

				return Sizzle( expr, null, null, [ elem ] ).length > 0;
			};
		}
	})();
}

// Deprecated
Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Back-compat
function setFilters() {}
Expr.filters = setFilters.prototype = Expr.pseudos;
Expr.setFilters = new setFilters();

// Override sizzle attribute retrieval
Sizzle.attr = jQuery.attr;
jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})( window );
var runtil = /Until$/,
	rparentsprev = /^(?:parents|prev(?:Until|All))/,
	isSimple = /^.[^:#\[\.,]*$/,
	rneedsContext = jQuery.expr.match.needsContext,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend({
	find: function( selector ) {
		var i, l, length, n, r, ret,
			self = this;

		if ( typeof selector !== "string" ) {
			return jQuery( selector ).filter(function() {
				for ( i = 0, l = self.length; i < l; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			});
		}

		ret = this.pushStack( "", "find", selector );

		for ( i = 0, l = this.length; i < l; i++ ) {
			length = ret.length;
			jQuery.find( selector, this[i], ret );

			if ( i > 0 ) {
				// Make sure that the results are unique
				for ( n = length; n < ret.length; n++ ) {
					for ( r = 0; r < length; r++ ) {
						if ( ret[r] === ret[n] ) {
							ret.splice(n--, 1);
							break;
						}
					}
				}
			}
		}

		return ret;
	},

	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter(function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	not: function( selector ) {
		return this.pushStack( winnow(this, selector, false), "not", selector);
	},

	filter: function( selector ) {
		return this.pushStack( winnow(this, selector, true), "filter", selector );
	},

	is: function( selector ) {
		return !!selector && (
			typeof selector === "string" ?
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				rneedsContext.test( selector ) ?
					jQuery( selector, this.context ).index( this[0] ) >= 0 :
					jQuery.filter( selector, this ).length > 0 :
				this.filter( selector ).length > 0 );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			ret = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			cur = this[i];

			while ( cur && cur.ownerDocument && cur !== context && cur.nodeType !== 11 ) {
				if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {
					ret.push( cur );
					break;
				}
				cur = cur.parentNode;
			}
		}

		ret = ret.length > 1 ? jQuery.unique( ret ) : ret;

		return this.pushStack( ret, "closest", selectors );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		var set = typeof selector === "string" ?
				jQuery( selector, context ) :
				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
			all = jQuery.merge( this.get(), set );

		return this.pushStack( isDisconnected( set[0] ) || isDisconnected( all[0] ) ?
			all :
			jQuery.unique( all ) );
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

jQuery.fn.andSelf = jQuery.fn.addBack;

// A painfully simple check to see if an element is disconnected
// from a document (should be improved, where feasible).
function isDisconnected( node ) {
	return !node || !node.parentNode || node.parentNode.nodeType === 11;
}

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( !runtil.test( name ) ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		ret = this.length > 1 && !guaranteedUnique[ name ] ? jQuery.unique( ret ) : ret;

		if ( this.length > 1 && rparentsprev.test( name ) ) {
			ret = ret.reverse();
		}

		return this.pushStack( ret, name, core_slice.call( arguments ).join(",") );
	};
});

jQuery.extend({
	filter: function( expr, elems, not ) {
		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 ?
			jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
			jQuery.find.matches(expr, elems);
	},

	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, keep ) {

	// Can't pass null or undefined to indexOf in Firefox 4
	// Set to 0 to skip string check
	qualifier = qualifier || 0;

	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep(elements, function( elem, i ) {
			var retVal = !!qualifier.call( elem, i, elem );
			return retVal === keep;
		});

	} else if ( qualifier.nodeType ) {
		return jQuery.grep(elements, function( elem, i ) {
			return ( elem === qualifier ) === keep;
		});

	} else if ( typeof qualifier === "string" ) {
		var filtered = jQuery.grep(elements, function( elem ) {
			return elem.nodeType === 1;
		});

		if ( isSimple.test( qualifier ) ) {
			return jQuery.filter(qualifier, filtered, !keep);
		} else {
			qualifier = jQuery.filter( qualifier, filtered );
		}
	}

	return jQuery.grep(elements, function( elem, i ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) === keep;
	});
}
function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
	safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	rnocache = /<(?:script|object|embed|option|style)/i,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rcheckableType = /^(?:checkbox|radio)$/,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /\/(java|ecma)script/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|\-\-)|[\]\-]{2}>\s*$/g,
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		area: [ 1, "<map>", "</map>" ],
		_default: [ 0, "", "" ]
	},
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
// unless wrapped in a div with non-breaking characters in front of it.
if ( !jQuery.support.htmlSerialize ) {
	wrapMap._default = [ 1, "X<div>", "</div>" ];
}

jQuery.fn.extend({
	text: function( value ) {
		return jQuery.access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	},

	append: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 ) {
				this.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 ) {
				this.insertBefore( elem, this.firstChild );
			}
		});
	},

	before: function() {
		if ( !isDisconnected( this[0] ) ) {
			return this.domManip(arguments, false, function( elem ) {
				this.parentNode.insertBefore( elem, this );
			});
		}

		if ( arguments.length ) {
			var set = jQuery.clean( arguments );
			return this.pushStack( jQuery.merge( set, this ), "before", this.selector );
		}
	},

	after: function() {
		if ( !isDisconnected( this[0] ) ) {
			return this.domManip(arguments, false, function( elem ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			});
		}

		if ( arguments.length ) {
			var set = jQuery.clean( arguments );
			return this.pushStack( jQuery.merge( this, set ), "after", this.selector );
		}
	},

	// keepData is for internal use only--do not document
	remove: function( selector, keepData ) {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( !selector || jQuery.filter( selector, [ elem ] ).length ) {
				if ( !keepData && elem.nodeType === 1 ) {
					jQuery.cleanData( elem.getElementsByTagName("*") );
					jQuery.cleanData( [ elem ] );
				}

				if ( elem.parentNode ) {
					elem.parentNode.removeChild( elem );
				}
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( elem.getElementsByTagName("*") );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function () {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return jQuery.access( this, function( value ) {
			var elem = this[0] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( jQuery.support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( elem.getElementsByTagName( "*" ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function( value ) {
		if ( !isDisconnected( this[0] ) ) {
			// Make sure that the elements are removed from the DOM before they are inserted
			// this can help fix replacing a parent with child elements
			if ( jQuery.isFunction( value ) ) {
				return this.each(function(i) {
					var self = jQuery(this), old = self.html();
					self.replaceWith( value.call( this, i, old ) );
				});
			}

			if ( typeof value !== "string" ) {
				value = jQuery( value ).detach();
			}

			return this.each(function() {
				var next = this.nextSibling,
					parent = this.parentNode;

				jQuery( this ).remove();

				if ( next ) {
					jQuery(next).before( value );
				} else {
					jQuery(parent).append( value );
				}
			});
		}

		return this.length ?
			this.pushStack( jQuery(jQuery.isFunction(value) ? value() : value), "replaceWith", value ) :
			this;
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, table, callback ) {

		// Flatten any nested arrays
		args = [].concat.apply( [], args );

		var results, first, fragment, iNoClone,
			i = 0,
			value = args[0],
			scripts = [],
			l = this.length;

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( !jQuery.support.checkClone && l > 1 && typeof value === "string" && rchecked.test( value ) ) {
			return this.each(function() {
				jQuery(this).domManip( args, table, callback );
			});
		}

		if ( jQuery.isFunction(value) ) {
			return this.each(function(i) {
				var self = jQuery(this);
				args[0] = value.call( this, i, table ? self.html() : undefined );
				self.domManip( args, table, callback );
			});
		}

		if ( this[0] ) {
			results = jQuery.buildFragment( args, this, scripts );
			fragment = results.fragment;
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				table = table && jQuery.nodeName( first, "tr" );

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				// Fragments from the fragment cache must always be cloned and never used in place.
				for ( iNoClone = results.cacheable || l - 1; i < l; i++ ) {
					callback.call(
						table && jQuery.nodeName( this[i], "table" ) ?
							findOrAppend( this[i], "tbody" ) :
							this[i],
						i === iNoClone ?
							fragment :
							jQuery.clone( fragment, true, true )
					);
				}
			}

			// Fix #11809: Avoid leaking memory
			fragment = first = null;

			if ( scripts.length ) {
				jQuery.each( scripts, function( i, elem ) {
					if ( elem.src ) {
						if ( jQuery.ajax ) {
							jQuery.ajax({
								url: elem.src,
								type: "GET",
								dataType: "script",
								async: false,
								global: false,
								"throws": true
							});
						} else {
							jQuery.error("no ajax");
						}
					} else {
						jQuery.globalEval( ( elem.text || elem.textContent || elem.innerHTML || "" ).replace( rcleanScript, "" ) );
					}

					if ( elem.parentNode ) {
						elem.parentNode.removeChild( elem );
					}
				});
			}
		}

		return this;
	}
});

function findOrAppend( elem, tag ) {
	return elem.getElementsByTagName( tag )[0] || elem.appendChild( elem.ownerDocument.createElement( tag ) );
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function cloneFixAttributes( src, dest ) {
	var nodeName;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	// clearAttributes removes the attributes, which we don't want,
	// but also removes the attachEvent events, which we *do* want
	if ( dest.clearAttributes ) {
		dest.clearAttributes();
	}

	// mergeAttributes, in contrast, only merges back on the
	// original attributes, not the events
	if ( dest.mergeAttributes ) {
		dest.mergeAttributes( src );
	}

	nodeName = dest.nodeName.toLowerCase();

	if ( nodeName === "object" ) {
		// IE6-10 improperly clones children of object elements using classid.
		// IE10 throws NoModificationAllowedError if parent is null, #12132.
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( jQuery.support.html5Clone && (src.innerHTML && !jQuery.trim(dest.innerHTML)) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;

	// IE blanks contents when cloning scripts
	} else if ( nodeName === "script" && dest.text !== src.text ) {
		dest.text = src.text;
	}

	// Event data gets referenced instead of copied if the expando
	// gets copied too
	dest.removeAttribute( jQuery.expando );
}

jQuery.buildFragment = function( args, context, scripts ) {
	var fragment, cacheable, cachehit,
		first = args[ 0 ];

	// Set context from what may come in as undefined or a jQuery collection or a node
	// Updated to fix #12266 where accessing context[0] could throw an exception in IE9/10 &
	// also doubles as fix for #8950 where plain objects caused createDocumentFragment exception
	context = context || document;
	context = !context.nodeType && context[0] || context;
	context = context.ownerDocument || context;

	// Only cache "small" (1/2 KB) HTML strings that are associated with the main document
	// Cloning options loses the selected state, so don't cache them
	// IE 6 doesn't like it when you put <object> or <embed> elements in a fragment
	// Also, WebKit does not clone 'checked' attributes on cloneNode, so don't cache
	// Lastly, IE6,7,8 will not correctly reuse cached fragments that were created from unknown elems #10501
	if ( args.length === 1 && typeof first === "string" && first.length < 512 && context === document &&
		first.charAt(0) === "<" && !rnocache.test( first ) &&
		(jQuery.support.checkClone || !rchecked.test( first )) &&
		(jQuery.support.html5Clone || !rnoshimcache.test( first )) ) {

		// Mark cacheable and look for a hit
		cacheable = true;
		fragment = jQuery.fragments[ first ];
		cachehit = fragment !== undefined;
	}

	if ( !fragment ) {
		fragment = context.createDocumentFragment();
		jQuery.clean( args, context, fragment, scripts );

		// Update the cache, but only store false
		// unless this is a second parsing of the same content
		if ( cacheable ) {
			jQuery.fragments[ first ] = cachehit && fragment;
		}
	}

	return { fragment: fragment, cacheable: cacheable };
};

jQuery.fragments = {};

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			l = insert.length,
			parent = this.length === 1 && this[0].parentNode;

		if ( (parent == null || parent && parent.nodeType === 11 && parent.childNodes.length === 1) && l === 1 ) {
			insert[ original ]( this[0] );
			return this;
		} else {
			for ( ; i < l; i++ ) {
				elems = ( i > 0 ? this.clone(true) : this ).get();
				jQuery( insert[i] )[ original ]( elems );
				ret = ret.concat( elems );
			}

			return this.pushStack( ret, name, insert.selector );
		}
	};
});

function getAll( elem ) {
	if ( typeof elem.getElementsByTagName !== "undefined" ) {
		return elem.getElementsByTagName( "*" );

	} else if ( typeof elem.querySelectorAll !== "undefined" ) {
		return elem.querySelectorAll( "*" );

	} else {
		return [];
	}
}

// Used in clean, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var srcElements,
			destElements,
			i,
			clone;

		if ( jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {
			// IE copies events bound via attachEvent when using cloneNode.
			// Calling detachEvent on the clone will also remove the events
			// from the original. In order to get around this, we use some
			// proprietary methods to clear the events. Thanks to MooTools
			// guys for this hotness.

			cloneFixAttributes( elem, clone );

			// Using Sizzle here is crazy slow, so we use getElementsByTagName instead
			srcElements = getAll( elem );
			destElements = getAll( clone );

			// Weird iteration because IE will replace the length property
			// with an element if you are cloning the body and one of the
			// elements on the page has a name or id of "length"
			for ( i = 0; srcElements[i]; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					cloneFixAttributes( srcElements[i], destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			cloneCopyEvent( elem, clone );

			if ( deepDataAndEvents ) {
				srcElements = getAll( elem );
				destElements = getAll( clone );

				for ( i = 0; srcElements[i]; ++i ) {
					cloneCopyEvent( srcElements[i], destElements[i] );
				}
			}
		}

		srcElements = destElements = null;

		// Return the cloned set
		return clone;
	},

	clean: function( elems, context, fragment, scripts ) {
		var i, j, elem, tag, wrap, depth, div, hasBody, tbody, len, handleScript, jsTags,
			safe = context === document && safeFragment,
			ret = [];

		// Ensure that context is a document
		if ( !context || typeof context.createDocumentFragment === "undefined" ) {
			context = document;
		}

		// Use the already-created safe fragment if context permits
		for ( i = 0; (elem = elems[i]) != null; i++ ) {
			if ( typeof elem === "number" ) {
				elem += "";
			}

			if ( !elem ) {
				continue;
			}

			// Convert html string into DOM nodes
			if ( typeof elem === "string" ) {
				if ( !rhtml.test( elem ) ) {
					elem = context.createTextNode( elem );
				} else {
					// Ensure a safe container in which to render the html
					safe = safe || createSafeFragment( context );
					div = context.createElement("div");
					safe.appendChild( div );

					// Fix "XHTML"-style tags in all browsers
					elem = elem.replace(rxhtmlTag, "<$1></$2>");

					// Go to html and back, then peel off extra wrappers
					tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					depth = wrap[0];
					div.innerHTML = wrap[1] + elem + wrap[2];

					// Move to the right depth
					while ( depth-- ) {
						div = div.lastChild;
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !jQuery.support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						hasBody = rtbody.test(elem);
							tbody = tag === "table" && !hasBody ?
								div.firstChild && div.firstChild.childNodes :

								// String was a bare <thead> or <tfoot>
								wrap[1] === "<table>" && !hasBody ?
									div.childNodes :
									[];

						for ( j = tbody.length - 1; j >= 0 ; --j ) {
							if ( jQuery.nodeName( tbody[ j ], "tbody" ) && !tbody[ j ].childNodes.length ) {
								tbody[ j ].parentNode.removeChild( tbody[ j ] );
							}
						}
					}

					// IE completely kills leading whitespace when innerHTML is used
					if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						div.insertBefore( context.createTextNode( rleadingWhitespace.exec(elem)[0] ), div.firstChild );
					}

					elem = div.childNodes;

					// Take out of fragment container (we need a fresh div each time)
					div.parentNode.removeChild( div );
				}
			}

			if ( elem.nodeType ) {
				ret.push( elem );
			} else {
				jQuery.merge( ret, elem );
			}
		}

		// Fix #11356: Clear elements from safeFragment
		if ( div ) {
			elem = div = safe = null;
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !jQuery.support.appendChecked ) {
			for ( i = 0; (elem = ret[i]) != null; i++ ) {
				if ( jQuery.nodeName( elem, "input" ) ) {
					fixDefaultChecked( elem );
				} else if ( typeof elem.getElementsByTagName !== "undefined" ) {
					jQuery.grep( elem.getElementsByTagName("input"), fixDefaultChecked );
				}
			}
		}

		// Append elements to a provided document fragment
		if ( fragment ) {
			// Special handling of each script element
			handleScript = function( elem ) {
				// Check if we consider it executable
				if ( !elem.type || rscriptType.test( elem.type ) ) {
					// Detach the script and store it in the scripts array (if provided) or the fragment
					// Return truthy to indicate that it has been handled
					return scripts ?
						scripts.push( elem.parentNode ? elem.parentNode.removeChild( elem ) : elem ) :
						fragment.appendChild( elem );
				}
			};

			for ( i = 0; (elem = ret[i]) != null; i++ ) {
				// Check if we're done after handling an executable script
				if ( !( jQuery.nodeName( elem, "script" ) && handleScript( elem ) ) ) {
					// Append to fragment and handle embedded scripts
					fragment.appendChild( elem );
					if ( typeof elem.getElementsByTagName !== "undefined" ) {
						// handleScript alters the DOM, so use jQuery.merge to ensure snapshot iteration
						jsTags = jQuery.grep( jQuery.merge( [], elem.getElementsByTagName("script") ), handleScript );

						// Splice the scripts into ret after their former ancestor and advance our index beyond them
						ret.splice.apply( ret, [i + 1, 0].concat( jsTags ) );
						i += jsTags.length;
					}
				}
			}
		}

		return ret;
	},

	cleanData: function( elems, /* internal */ acceptData ) {
		var data, id, elem, type,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = jQuery.support.deleteExpando,
			special = jQuery.event.special;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( acceptData || jQuery.acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// IE does not allow us to delete expando properties from nodes,
						// nor does it have a removeAttribute function on Document nodes;
						// we must handle all of these cases
						if ( deleteExpando ) {
							delete elem[ internalKey ];

						} else if ( elem.removeAttribute ) {
							elem.removeAttribute( internalKey );

						} else {
							elem[ internalKey ] = null;
						}

						jQuery.deletedIds.push( id );
					}
				}
			}
		}
	}
});
// Limit scope pollution from any deprecated API
(function() {

var matched, browser;

// Use of jQuery.browser is frowned upon.
// More details: http://api.jquery.com/jQuery.browser
// jQuery.uaMatch maintained for back-compat
jQuery.uaMatch = function( ua ) {
	ua = ua.toLowerCase();

	var match = /(chrome)[ \/]([\w.]+)/.exec( ua ) ||
		/(webkit)[ \/]([\w.]+)/.exec( ua ) ||
		/(opera)(?:.*version|)[ \/]([\w.]+)/.exec( ua ) ||
		/(msie) ([\w.]+)/.exec( ua ) ||
		ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec( ua ) ||
		[];

	return {
		browser: match[ 1 ] || "",
		version: match[ 2 ] || "0"
	};
};

matched = jQuery.uaMatch( navigator.userAgent );
browser = {};

if ( matched.browser ) {
	browser[ matched.browser ] = true;
	browser.version = matched.version;
}

// Chrome is Webkit, but Webkit is also Safari.
if ( browser.chrome ) {
	browser.webkit = true;
} else if ( browser.webkit ) {
	browser.safari = true;
}

jQuery.browser = browser;

jQuery.sub = function() {
	function jQuerySub( selector, context ) {
		return new jQuerySub.fn.init( selector, context );
	}
	jQuery.extend( true, jQuerySub, this );
	jQuerySub.superclass = this;
	jQuerySub.fn = jQuerySub.prototype = this();
	jQuerySub.fn.constructor = jQuerySub;
	jQuerySub.sub = this.sub;
	jQuerySub.fn.init = function init( selector, context ) {
		if ( context && context instanceof jQuery && !(context instanceof jQuerySub) ) {
			context = jQuerySub( context );
		}

		return jQuery.fn.init.call( this, selector, context, rootjQuerySub );
	};
	jQuerySub.fn.init.prototype = jQuerySub.fn;
	var rootjQuerySub = jQuerySub(document);
	return jQuerySub;
};

})();
var curCSS, iframe, iframeDoc,
	ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity=([^)]*)/,
	rposition = /^(top|right|bottom|left)$/,
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rmargin = /^margin/,
	rnumsplit = new RegExp( "^(" + core_pnum + ")(.*)$", "i" ),
	rnumnonpx = new RegExp( "^(" + core_pnum + ")(?!px)[a-z%]+$", "i" ),
	rrelNum = new RegExp( "^([-+])=(" + core_pnum + ")", "i" ),
	elemdisplay = { BODY: "block" },

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: 0,
		fontWeight: 400
	},

	cssExpand = [ "Top", "Right", "Bottom", "Left" ],
	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],

	eventsToggle = jQuery.fn.toggle;

// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function isHidden( elem, el ) {
	elem = el || elem;
	return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
}

function showHide( elements, show ) {
	var elem, display,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		values[ index ] = jQuery._data( elem, "olddisplay" );
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && elem.style.display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = jQuery._data( elem, "olddisplay", css_defaultDisplay(elem.nodeName) );
			}
		} else {
			display = curCSS( elem, "display" );

			if ( !values[ index ] && display !== "none" ) {
				jQuery._data( elem, "olddisplay", display );
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.fn.extend({
	css: function( name, value ) {
		return jQuery.access( this, function( elem, name, value ) {
			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state, fn2 ) {
		var bool = typeof state === "boolean";

		if ( jQuery.isFunction( state ) && jQuery.isFunction( fn2 ) ) {
			return eventsToggle.apply( this, arguments );
		}

		return this.each(function() {
			if ( bool ? state : isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;

				}
			}
		}
	},

	// Exclude the following css properties to add px
	cssNumber: {
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that NaN and null values aren't set. See: #7116
			if ( value == null || type === "number" && isNaN( value ) ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
				// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
				// Fixes bug #5509
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, numeric, extra ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( numeric || extra !== undefined ) {
			num = parseFloat( val );
			return numeric || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	},

	// A method for quickly swapping in/out CSS properties to get correct calculations
	swap: function( elem, options, callback ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.call( elem );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	}
});

// NOTE: To any future maintainer, we've window.getComputedStyle
// because jsdom on node.js will break without it.
if ( window.getComputedStyle ) {
	curCSS = function( elem, name ) {
		var ret, width, minWidth, maxWidth,
			computed = window.getComputedStyle( elem, null ),
			style = elem.style;

		if ( computed ) {

			// getPropertyValue is only needed for .css('filter') in IE9, see #12537
			ret = computed.getPropertyValue( name ) || computed[ name ];

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret;
	};
} else if ( document.documentElement.currentStyle ) {
	curCSS = function( elem, name ) {
		var left, rsLeft,
			ret = elem.currentStyle && elem.currentStyle[ name ],
			style = elem.style;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are proportional to the parent element instead
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rsLeft = elem.runtimeStyle && elem.runtimeStyle.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				elem.runtimeStyle.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				elem.runtimeStyle.left = rsLeft;
			}
		}

		return ret === "" ? "auto" : ret;
	};
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
			Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
			value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			// we use jQuery.css instead of curCSS here
			// because of the reliableMarginRight CSS hook!
			val += jQuery.css( elem, extra + cssExpand[ i ], true );
		}

		// From this point on we use curCSS for maximum performance (relevant in animations)
		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= parseFloat( curCSS( elem, "padding" + cssExpand[ i ] ) ) || 0;
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= parseFloat( curCSS( elem, "border" + cssExpand[ i ] + "Width" ) ) || 0;
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += parseFloat( curCSS( elem, "padding" + cssExpand[ i ] ) ) || 0;

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += parseFloat( curCSS( elem, "border" + cssExpand[ i ] + "Width" ) ) || 0;
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		valueIsBorderBox = true,
		isBorderBox = jQuery.support.boxSizing && jQuery.css( elem, "boxSizing" ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox
		)
	) + "px";
}


// Try to determine the default display value of an element
function css_defaultDisplay( nodeName ) {
	if ( elemdisplay[ nodeName ] ) {
		return elemdisplay[ nodeName ];
	}

	var elem = jQuery( "<" + nodeName + ">" ).appendTo( document.body ),
		display = elem.css("display");
	elem.remove();

	// If the simple way fails,
	// get element's real default display by attaching it to a temp iframe
	if ( display === "none" || display === "" ) {
		// Use the already-created iframe if possible
		iframe = document.body.appendChild(
			iframe || jQuery.extend( document.createElement("iframe"), {
				frameBorder: 0,
				width: 0,
				height: 0
			})
		);

		// Create a cacheable copy of the iframe document on first call.
		// IE and Opera will allow us to reuse the iframeDoc without re-writing the fake HTML
		// document to it; WebKit & Firefox won't allow reusing the iframe document.
		if ( !iframeDoc || !iframe.createElement ) {
			iframeDoc = ( iframe.contentWindow || iframe.contentDocument ).document;
			iframeDoc.write("<!doctype html><html><body>");
			iframeDoc.close();
		}

		elem = iframeDoc.body.appendChild( iframeDoc.createElement(nodeName) );

		display = curCSS( elem, "display" );
		document.body.removeChild( iframe );
	}

	// Store the correct default display
	elemdisplay[ nodeName ] = display;

	return display;
}

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				if ( elem.offsetWidth === 0 && rdisplayswap.test( curCSS( elem, "display" ) ) ) {
					return jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					});
				} else {
					return getWidthOrHeight( elem, name, extra );
				}
			}
		},

		set: function( elem, value, extra ) {
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.support.boxSizing && jQuery.css( elem, "boxSizing" ) === "border-box"
				) : 0
			);
		}
	};
});

if ( !jQuery.support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			if ( value >= 1 && jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
				style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there there is no filter style applied in a css rule, we are done
				if ( currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

// These hooks cannot be added until DOM ready because the support test
// for it is not run until after DOM ready
jQuery(function() {
	if ( !jQuery.support.reliableMarginRight ) {
		jQuery.cssHooks.marginRight = {
			get: function( elem, computed ) {
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// Work around by temporarily setting element display to inline-block
				return jQuery.swap( elem, { "display": "inline-block" }, function() {
					if ( computed ) {
						return curCSS( elem, "marginRight" );
					}
				});
			}
		};
	}

	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	if ( !jQuery.support.pixelPosition && jQuery.fn.position ) {
		jQuery.each( [ "top", "left" ], function( i, prop ) {
			jQuery.cssHooks[ prop ] = {
				get: function( elem, computed ) {
					if ( computed ) {
						var ret = curCSS( elem, prop );
						// if curCSS returns percentage, fallback to offset
						return rnumnonpx.test( ret ) ? jQuery( elem ).position()[ prop ] + "px" : ret;
					}
				}
			};
		});
	}

});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.hidden = function( elem ) {
		return ( elem.offsetWidth === 0 && elem.offsetHeight === 0 ) || (!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || curCSS( elem, "display" )) === "none");
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
}

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i,

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ],
				expanded = {};

			for ( i = 0; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});
var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rinput = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,
	rselectTextarea = /^(?:select|textarea)/i;

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function(){
			return this.elements ? jQuery.makeArray( this.elements ) : this;
		})
		.filter(function(){
			return this.name && !this.disabled &&
				( this.checked || rselectTextarea.test( this.nodeName ) ||
					rinput.test( this.type ) );
		})
		.map(function( i, elem ){
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val, i ){
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});

//Serialize an array of form elements or a set of
//key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// If array item is non-scalar (array or object), encode its
				// numeric index to resolve deserialization ambiguity issues.
				// Note that rack (as of 1.0.0) can't currently deserialize
				// nested arrays properly, and attempting to do so may cause
				// a server error. Possible fixes are to modify rack's
				// deserialization algorithm or to provide an option or flag
				// to force array serialization to be shallow.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}
var
	// Document location
	ajaxLocParts,
	ajaxLocation,

	rhash = /#.*$/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rquery = /\?/,
	rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
	rts = /([?&])_=[^&]*/,
	rurl = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = ["*/"] + ["*"];

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType, list, placeBefore,
			dataTypes = dataTypeExpression.toLowerCase().split( core_rspace ),
			i = 0,
			length = dataTypes.length;

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			for ( ; i < length; i++ ) {
				dataType = dataTypes[ i ];
				// We control if we're asked to add before
				// any existing element
				placeBefore = /^\+/.test( dataType );
				if ( placeBefore ) {
					dataType = dataType.substr( 1 ) || "*";
				}
				list = structure[ dataType ] = structure[ dataType ] || [];
				// then we add to the structure accordingly
				list[ placeBefore ? "unshift" : "push" ]( func );
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR,
		dataType /* internal */, inspected /* internal */ ) {

	dataType = dataType || options.dataTypes[ 0 ];
	inspected = inspected || {};

	inspected[ dataType ] = true;

	var selection,
		list = structure[ dataType ],
		i = 0,
		length = list ? list.length : 0,
		executeOnly = ( structure === prefilters );

	for ( ; i < length && ( executeOnly || !selection ); i++ ) {
		selection = list[ i ]( options, originalOptions, jqXHR );
		// If we got redirected to another dataType
		// we try there if executing only and not done already
		if ( typeof selection === "string" ) {
			if ( !executeOnly || inspected[ selection ] ) {
				selection = undefined;
			} else {
				options.dataTypes.unshift( selection );
				selection = inspectPrefiltersOrTransports(
						structure, options, originalOptions, jqXHR, selection, inspected );
			}
		}
	}
	// If we're only executing or nothing was selected
	// we try the catchall dataType if not done already
	if ( ( executeOnly || !selection ) && !inspected[ "*" ] ) {
		selection = inspectPrefiltersOrTransports(
				structure, options, originalOptions, jqXHR, "*", inspected );
	}
	// unnecessary when only executing (prefilters)
	// but it'll be ignored by the caller in that case
	return selection;
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};
	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}
}

jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	// Don't do a request if no elements are being requested
	if ( !this.length ) {
		return this;
	}

	var selector, type, response,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = url.slice( off, url.length );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// Request the remote document
	jQuery.ajax({
		url: url,

		// if "type" variable is undefined, then "GET" method will be used
		type: type,
		dataType: "html",
		data: params,
		complete: function( jqXHR, status ) {
			if ( callback ) {
				self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
			}
		}
	}).done(function( responseText ) {

		// Save response for use in complete callback
		response = arguments;

		// See if a selector was specified
		self.html( selector ?

			// Create a dummy div to hold the results
			jQuery("<div>")

				// inject the contents of the document in, removing the scripts
				// to avoid any 'Permission Denied' errors in IE
				.append( responseText.replace( rscript, "" ) )

				// Locate the specified elements
				.find( selector ) :

			// If not, just inject the full result
			responseText );

	});

	return this;
};

// Attach a bunch of functions for handling common AJAX events
jQuery.each( "ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split( " " ), function( i, o ){
	jQuery.fn[ o ] = function( f ){
		return this.on( o, f );
	};
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			type: method,
			url: url,
			data: data,
			success: callback,
			dataType: type
		});
	};
});

jQuery.extend({

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		if ( settings ) {
			// Building a settings object
			ajaxExtend( target, jQuery.ajaxSettings );
		} else {
			// Extending ajaxSettings
			settings = target;
			target = jQuery.ajaxSettings;
		}
		ajaxExtend( target, settings );
		return target;
	},

	ajaxSettings: {
		url: ajaxLocation,
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		type: "GET",
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		processData: true,
		async: true,
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			xml: "application/xml, text/xml",
			html: "text/html",
			text: "text/plain",
			json: "application/json, text/javascript",
			"*": allTypes
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText"
		},

		// List of data converters
		// 1) key format is "source_type destination_type" (a single space in-between)
		// 2) the catchall symbol "*" can be used for source_type
		converters: {

			// Convert anything to text
			"* text": window.String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			context: true,
			url: true
		}
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // ifModified key
			ifModifiedKey,
			// Response headers
			responseHeadersString,
			responseHeaders,
			// transport
			transport,
			// timeout handle
			timeoutTimer,
			// Cross-domain detection vars
			parts,
			// To know if global events are to be dispatched
			fireGlobals,
			// Loop variable
			i,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events
			// It's the callbackContext if one was provided in the options
			// and if it's a DOM node or a jQuery collection
			globalEventContext = callbackContext !== s &&
				( callbackContext.nodeType || callbackContext instanceof jQuery ) ?
						jQuery( callbackContext ) : jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {

				readyState: 0,

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( !state ) {
						var lname = name.toLowerCase();
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match === undefined ? null : match;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					statusText = statusText || strAbort;
					if ( transport ) {
						transport.abort( statusText );
					}
					done( 0, statusText );
					return this;
				}
			};

		// Callback for when everything is done
		// It is defined here because jslint complains if it is declared
		// at the end of the function (which would be more logical and readable)
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// If successful, handle type chaining
			if ( status >= 200 && status < 300 || status === 304 ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {

					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ ifModifiedKey ] = modified;
					}
					modified = jqXHR.getResponseHeader("Etag");
					if ( modified ) {
						jQuery.etag[ ifModifiedKey ] = modified;
					}
				}

				// If not modified
				if ( status === 304 ) {

					statusText = "notmodified";
					isSuccess = true;

				// If we have data
				} else {

					isSuccess = ajaxConvert( s, response );
					statusText = isSuccess.state;
					success = isSuccess.data;
					error = isSuccess.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( !statusText || status ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajax" + ( isSuccess ? "Success" : "Error" ),
						[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		// Attach deferreds
		deferred.promise( jqXHR );
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;
		jqXHR.complete = completeDeferred.add;

		// Status-dependent callbacks
		jqXHR.statusCode = function( map ) {
			if ( map ) {
				var tmp;
				if ( state < 2 ) {
					for ( tmp in map ) {
						statusCode[ tmp ] = [ statusCode[tmp], map[tmp] ];
					}
				} else {
					tmp = map[ jqXHR.status ];
					jqXHR.always( tmp );
				}
			}
			return this;
		};

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// We also use the url parameter if available
		s.url = ( ( url || s.url ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().split( core_rspace );

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? 80 : 443 ) ) !=
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? 80 : 443 ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.data;
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Get ifModifiedKey before adding the anti-cache parameter
			ifModifiedKey = s.url;

			// Add anti-cache in url if needed
			if ( s.cache === false ) {

				var ts = jQuery.now(),
					// try replacing _= if it is there
					ret = s.url.replace( rts, "$1_=" + ts );

				// if nothing was replaced, add timestamp to the end
				s.url = ret + ( ( ret === s.url ) ? ( rquery.test( s.url ) ? "&" : "?" ) + "_=" + ts : "" );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			ifModifiedKey = ifModifiedKey || s.url;
			if ( jQuery.lastModified[ ifModifiedKey ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ ifModifiedKey ] );
			}
			if ( jQuery.etag[ ifModifiedKey ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ ifModifiedKey ] );
			}
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
				// Abort if not done already and return
				return jqXHR.abort();

		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;
			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout( function(){
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch (e) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		return jqXHR;
	},

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {}

});

/* Handles responses to an ajax request:
 * - sets all responseXXX fields accordingly
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes,
		responseFields = s.responseFields;

	// Fill responseXXX fields
	for ( type in responseFields ) {
		if ( type in responses ) {
			jqXHR[ responseFields[type] ] = responses[ type ];
		}
	}

	// Remove auto dataType and get content-type in the process
	while( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "content-type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

// Chain conversions given the request and the original response
function ajaxConvert( s, response ) {

	var conv, conv2, current, tmp,
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice(),
		prev = dataTypes[ 0 ],
		converters = {},
		i = 0;

	// Apply the dataFilter if provided
	if ( s.dataFilter ) {
		response = s.dataFilter( response, s.dataType );
	}

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	// Convert to each sequential dataType, tolerating list modification
	for ( ; (current = dataTypes[++i]); ) {

		// There's only work to do if current dataType is non-auto
		if ( current !== "*" ) {

			// Convert response if prev dataType is non-auto and differs from current
			if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split(" ");
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.splice( i--, 0, current );
								}

								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s["throws"] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}

			// Update prev for next iteration
			prev = current;
		}
	}

	return { state: "success", data: response };
}
var oldCallbacks = [],
	rquestion = /\?/,
	rjsonp = /(=)\?(?=&|$)|\?\?/,
	nonce = jQuery.now();

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		data = s.data,
		url = s.url,
		hasCallback = s.jsonp !== false,
		replaceInUrl = hasCallback && rjsonp.test( url ),
		replaceInData = hasCallback && !replaceInUrl && typeof data === "string" &&
			!( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") &&
			rjsonp.test( data );

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( s.dataTypes[ 0 ] === "jsonp" || replaceInUrl || replaceInData ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;
		overwritten = window[ callbackName ];

		// Insert callback into url or form data
		if ( replaceInUrl ) {
			s.url = url.replace( rjsonp, "$1" + callbackName );
		} else if ( replaceInData ) {
			s.data = data.replace( rjsonp, "$1" + callbackName );
		} else if ( hasCallback ) {
			s.url += ( rquestion.test( url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});
// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /javascript|ecmascript/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || document.getElementsByTagName( "head" )[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement( "script" );

				script.async = "async";

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( head && script.parentNode ) {
							head.removeChild( script );
						}

						// Dereference the script
						script = undefined;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};
				// Use insertBefore instead of appendChild  to circumvent an IE6 bug.
				// This arises when a base node is used (#2709 and #4378).
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( 0, 1 );
				}
			}
		};
	}
});
var xhrCallbacks,
	// #5280: Internet Explorer will keep connections alive if we don't abort on unload
	xhrOnUnloadAbort = window.ActiveXObject ? function() {
		// Abort all pending requests
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]( 0, 1 );
		}
	} : false,
	xhrId = 0;

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );
	} catch( e ) {}
}

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject ?
	/* Microsoft failed to properly
	 * implement the XMLHttpRequest in IE7 (can't request local files),
	 * so we use the ActiveXObject when it is available
	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
	 * we need a fallback.
	 */
	function() {
		return !this.isLocal && createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

// Determine support properties
(function( xhr ) {
	jQuery.extend( jQuery.support, {
		ajax: !!xhr,
		cors: !!xhr && ( "withCredentials" in xhr )
	});
})( jQuery.ajaxSettings.xhr() );

// Create transport if the browser can provide an xhr
if ( jQuery.support.ajax ) {

	jQuery.ajaxTransport(function( s ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !s.crossDomain || jQuery.support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {

					// Get a new xhr
					var handle, i,
						xhr = s.xhr();

					// Open the socket
					// Passing null username, generates a login popup on Opera (#2865)
					if ( s.username ) {
						xhr.open( s.type, s.url, s.async, s.username, s.password );
					} else {
						xhr.open( s.type, s.url, s.async );
					}

					// Apply custom fields if provided
					if ( s.xhrFields ) {
						for ( i in s.xhrFields ) {
							xhr[ i ] = s.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( s.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( s.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !s.crossDomain && !headers["X-Requested-With"] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Need an extra try/catch for cross domain requests in Firefox 3
					try {
						for ( i in headers ) {
							xhr.setRequestHeader( i, headers[ i ] );
						}
					} catch( _ ) {}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( s.hasContent && s.data ) || null );

					// Listener
					callback = function( _, isAbort ) {

						var status,
							statusText,
							responseHeaders,
							responses,
							xml;

						// Firefox throws exceptions when accessing properties
						// of an xhr when a network error occurred
						// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
						try {

							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

								// Only called once
								callback = undefined;

								// Do not keep as active anymore
								if ( handle ) {
									xhr.onreadystatechange = jQuery.noop;
									if ( xhrOnUnloadAbort ) {
										delete xhrCallbacks[ handle ];
									}
								}

								// If it's an abort
								if ( isAbort ) {
									// Abort it manually if needed
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									status = xhr.status;
									responseHeaders = xhr.getAllResponseHeaders();
									responses = {};
									xml = xhr.responseXML;

									// Construct response list
									if ( xml && xml.documentElement /* #4958 */ ) {
										responses.xml = xml;
									}

									// When requesting binary data, IE6-9 will throw an exception
									// on any attempt to access responseText (#11426)
									try {
										responses.text = xhr.responseText;
									} catch( e ) {
									}

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch( e ) {
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && s.isLocal && !s.crossDomain ) {
										status = responses.text ? 200 : 404;
									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}
						} catch( firefoxAccessException ) {
							if ( !isAbort ) {
								complete( -1, firefoxAccessException );
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, responseHeaders );
						}
					};

					if ( !s.async ) {
						// if we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {
						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						setTimeout( callback, 0 );
					} else {
						handle = ++xhrId;
						if ( xhrOnUnloadAbort ) {
							// Create the active xhrs callbacks list if needed
							// and attach the unload handler
							if ( !xhrCallbacks ) {
								xhrCallbacks = {};
								jQuery( window ).unload( xhrOnUnloadAbort );
							}
							// Add to list of active xhrs callbacks
							xhrCallbacks[ handle ] = callback;
						}
						xhr.onreadystatechange = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback(0,1);
					}
				}
			};
		}
	});
}
var fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([-+])=|)(" + core_pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [function( prop, value ) {
			var end, unit,
				tween = this.createTween( prop, value ),
				parts = rfxnum.exec( value ),
				target = tween.cur(),
				start = +target || 0,
				scale = 1,
				maxIterations = 20;

			if ( parts ) {
				end = +parts[2];
				unit = parts[3] || ( jQuery.cssNumber[ prop ] ? "" : "px" );

				// We need to compute starting value
				if ( unit !== "px" && start ) {
					// Iteratively approximate from a nonzero starting point
					// Prefer the current property, because this process will be trivial if it uses the same units
					// Fallback to end or a simple constant
					start = jQuery.css( tween.elem, prop, true ) || end || 1;

					do {
						// If previous iteration zeroed out, double until we get *something*
						// Use a string for doubling factor so we don't accidentally see scale as unchanged below
						scale = scale || ".5";

						// Adjust and apply
						start = start / scale;
						jQuery.style( tween.elem, prop, start + unit );

					// Update scale, tolerating zero or NaN from tween.cur()
					// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
					} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
				}

				tween.unit = unit;
				tween.start = start;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[1] ? start + ( parts[1] + 1 ) * end : end;
			}
			return tween;
		}]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	}, 0 );
	return ( fxNow = jQuery.now() );
}

function createTweens( animation, props ) {
	jQuery.each( props, function( prop, value ) {
		var collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( collection[ index ].call( animation, prop, value ) ) {

				// we're done with this property
				return;
			}
		}
	});
}

function Animation( elem, properties, options ) {
	var result,
		index = 0,
		tweenerIndex = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end, easing ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;

				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	createTweens( animation, props );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			anim: animation,
			queue: animation.opts.queue,
			elem: elem
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

function defaultPrefilter( elem, props, opts ) {
	var index, prop, value, length, dataShow, toggle, tween, hooks, oldfire,
		anim = this,
		style = elem.style,
		orig = {},
		handled = [],
		hidden = elem.nodeType && isHidden( elem );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		if ( jQuery.css( elem, "display" ) === "inline" &&
				jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";

			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !jQuery.support.shrinkWrapBlocks ) {
			anim.done(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}
	}


	// show/hide pass
	for ( index in props ) {
		value = props[ index ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ index ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {
				continue;
			}
			handled.push( index );
		}
	}

	length = handled.length;
	if ( length ) {
		dataShow = jQuery._data( elem, "fxshow" ) || jQuery._data( elem, "fxshow", {} );
		if ( "hidden" in dataShow ) {
			hidden = dataShow.hidden;
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;
			jQuery.removeData( elem, "fxshow", true );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( index = 0 ; index < length ; index++ ) {
			prop = handled[ index ];
			tween = anim.createTween( prop, hidden ? dataShow[ prop ] : 0 );
			orig[ prop ] = dataShow[ prop ] || jQuery.style( elem, prop );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}
	}
}

function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing any value as a 4th parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, false, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Remove in 2.0 - this supports IE8's panic based approach
// to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ||
			// special check for .toggle( handler, handler, ... )
			( !i && jQuery.isFunction( speed ) && jQuery.isFunction( easing ) ) ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations resolve immediately
				if ( empty ) {
					anim.stop( true );
				}
			};

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	}
});

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth? 1 : 0;
	for( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p*Math.PI ) / 2;
	}
};

jQuery.timers = [];
jQuery.fx = Tween.prototype.init;
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	if ( timer() && jQuery.timers.push( timer ) && !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.interval = 13;

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};

// Back Compat <1.8 extension point
jQuery.fx.step = {};

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
}
var rroot = /^(?:body|html)$/i;

jQuery.fn.offset = function( options ) {
	if ( arguments.length ) {
		return options === undefined ?
			this :
			this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
	}

	var docElem, body, win, clientTop, clientLeft, scrollTop, scrollLeft,
		box = { top: 0, left: 0 },
		elem = this[ 0 ],
		doc = elem && elem.ownerDocument;

	if ( !doc ) {
		return;
	}

	if ( (body = doc.body) === elem ) {
		return jQuery.offset.bodyOffset( elem );
	}

	docElem = doc.documentElement;

	// Make sure it's not a disconnected DOM node
	if ( !jQuery.contains( docElem, elem ) ) {
		return box;
	}

	// If we don't have gBCR, just use 0,0 rather than error
	// BlackBerry 5, iOS 3 (original iPhone)
	if ( typeof elem.getBoundingClientRect !== "undefined" ) {
		box = elem.getBoundingClientRect();
	}
	win = getWindow( doc );
	clientTop  = docElem.clientTop  || body.clientTop  || 0;
	clientLeft = docElem.clientLeft || body.clientLeft || 0;
	scrollTop  = win.pageYOffset || docElem.scrollTop;
	scrollLeft = win.pageXOffset || docElem.scrollLeft;
	return {
		top: box.top  + scrollTop  - clientTop,
		left: box.left + scrollLeft - clientLeft
	};
};

jQuery.offset = {

	bodyOffset: function( body ) {
		var top = body.offsetTop,
			left = body.offsetLeft;

		if ( jQuery.support.doesNotIncludeMarginInBodyOffset ) {
			top  += parseFloat( jQuery.css(body, "marginTop") ) || 0;
			left += parseFloat( jQuery.css(body, "marginLeft") ) || 0;
		}

		return { top: top, left: left };
	},

	setOffset: function( elem, options, i ) {
		var position = jQuery.css( elem, "position" );

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		var curElem = jQuery( elem ),
			curOffset = curElem.offset(),
			curCSSTop = jQuery.css( elem, "top" ),
			curCSSLeft = jQuery.css( elem, "left" ),
			calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
			props = {}, curPosition = {}, curTop, curLeft;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};


jQuery.fn.extend({

	position: function() {
		if ( !this[0] ) {
			return;
		}

		var elem = this[0],

		// Get *real* offsetParent
		offsetParent = this.offsetParent(),

		// Get correct offsets
		offset       = this.offset(),
		parentOffset = rroot.test(offsetParent[0].nodeName) ? { top: 0, left: 0 } : offsetParent.offset();

		// Subtract element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		offset.top  -= parseFloat( jQuery.css(elem, "marginTop") ) || 0;
		offset.left -= parseFloat( jQuery.css(elem, "marginLeft") ) || 0;

		// Add offsetParent borders
		parentOffset.top  += parseFloat( jQuery.css(offsetParent[0], "borderTopWidth") ) || 0;
		parentOffset.left += parseFloat( jQuery.css(offsetParent[0], "borderLeftWidth") ) || 0;

		// Subtract the two offsets
		return {
			top:  offset.top  - parentOffset.top,
			left: offset.left - parentOffset.left
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || document.body;
			while ( offsetParent && (!rroot.test(offsetParent.nodeName) && jQuery.css(offsetParent, "position") === "static") ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || document.body;
		});
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return jQuery.access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					 top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return jQuery.access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, value, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});
// Expose jQuery to the global object
window.jQuery = window.$ = jQuery;

// Expose jQuery as an AMD module, but only for AMD loaders that
// understand the issues with loading multiple versions of jQuery
// in a page that all might call define(). The loader will indicate
// they have special allowances for multiple jQuery versions by
// specifying define.amd.jQuery = true. Register as a named module,
// since jQuery can be concatenated with other files that may use define,
// but not use a proper concatenation script that understands anonymous
// AMD modules. A named AMD is safest and most robust way to register.
// Lowercase jquery is used because AMD module names are derived from
// file names, and jQuery is normally delivered in a lowercase file name.
// Do this after creating the global so that if an AMD module wants to call
// noConflict to hide this version of jQuery, it will work.
if ( typeof define === "function" && define.amd && define.amd.jQuery ) {
	define( "jquery", [], function () { return jQuery; } );
}

})( window );
;(function($) {
    var defaults = {
        vertical: false,
        width: 140,
        groupWidth: 160,
        zIndex: 9999,
        hideArrow: false,
        menuItemSelector: 'li',
        menuGroupSelector: 'ul',
        rootClass: 'ui-menu',
        menuItemClass: 'ui-menu-item',
        menuGroupClass: 'ui-menu-group',
        verticalClass: 'ui-menu-vertical',
        horizontalClass: 'ui-menu-horizontal',
        hasVerticalClass: 'ui-menu-has-vertical',
        hasHorizontalClass: 'ui-menu-has-horizontal',
        hoverClass: 'ui-menu-hover',
        showDuration: 0,
        hideDuration: 0,
        hideDelayDuration: 0
    };

    function menu() {
        var option = (typeof(arguments[0]) != 'string') ? $.extend(defaults, arguments[0]) : $.extend(defaults, {});

        // Horizontal:
        // ul.ui-menu-group,ui-menu-horizontal
        //   > li.ui-menu-item,ui-menu-has-vertical
        //     > ul.ui-menu-group,ui-menu-vertical
        //       > li.ui-menu-item,ui-menu-has-horizontal
        //        > ....
        //
        // Vertical
        // ul.ui-menu-group,ui-menu-vertical
        //   > li.ui-menu-item,ui-menu-has-horizontal
        //     > ul.ui-menu-group,ui-menu-horizontal
        //       > li.ui-menu-item,ui-menu-has-vertical
        //        > ....
        var topMenuGroupClass = (option.vertical) ? option.verticalClass : option.horizontalClass,
            $menu = $(this).addClass(option.rootClass + ' ' + option.menuGroupClass + ' ' + topMenuGroupClass),
            $menuItems = $menu.find(option.menuItemSelector).addClass(option.menuItemClass),
            $menuGroups = $menu.find(option.menuGroupSelector).addClass(option.menuGroupClass);

        $('ul.ui-menu > li').addClass('ui-menu-li');
        $('ul.ui-menu > li:first').addClass('current');
        $('ul.ui-menu > li > a').addClass('ui-menu-link');

        $menuItems.hover(
            function(e) {
                //if (!$(this).hasClass('ui-menu-li')) {
                $(this).addClass(option.hoverClass);
                //}
            },
            function(e) {
                //if (!$(this).hasClass('ui-menu-li')) {
                $(this).removeClass(option.hoverClass);
                //}
            }
        );

        $menuItems.each(function() {
            if ($(this).find('a').text() == 'line') {
                $(this).addClass('line');
            }
        });
        $menuGroups.parent().each(function(index) {
            var $parentMenuItem = $(this); // menu item that has menu group
            var displayDirection = ($parentMenuItem.parent().hasClass(option.horizontalClass)) ? 'bottom' : 'right';
            $parentMenuItem.addClass((displayDirection == 'bottom') ? option.hasVerticalClass : option.hasHorizontalClass);
            if (!option.hideArrow) {
                $parentMenuItem.append((displayDirection == 'bottom') ? '<i class="iconfont icon-caret-down"></i>' : '<i class="iconfont icon-caret-right"></i>');
            }
            var $menuGroup = $parentMenuItem.find(option.menuGroupSelector + ':first').addClass(option.verticalClass);
            $parentMenuItem.hover(
                function(e) {
                    var offset = {
                        left: '',
                        top: ''
                    };
                    if (displayDirection == 'bottom') {
                        offset.left = 0;
                    } else {
                        offset.left = $(this).width() + 'px';
                        offset.top = '0px';
                    }
                    //$menuGroup.css(offset).fadeIn(option.showDuration);
                    $menuGroup.css(offset).show();
                },
                function(e) {
                    /*if (option.hideDelayDuration > 0) {
                        $menuGroup.delay(option.hideDelayDuration).fadeOut(option.hideDuration);
                    } else {*/
                    //$menuGroup.fadeOut(option.hideDuration);
                    $menuGroup.hide();
                    //}
                }
            );
        });
        /*$(document).click(function() {
            $menu.find('li').removeClass('ui-menu-hover');
            $menu.find(option.menuGroupSelector).hide();
        });*/
        /*$menu.find('li.ui-menu-li').mouseover(function() {
            var $li = $(this);
            var $siblingsLi = $li.siblings(),
                $menuGroup = $li.find(option.menuGroupSelector + ':first');
            var $siblingsMenuGroup = $siblingsLi.find(option.menuGroupSelector + ':first');
            $siblingsLi.removeClass('ui-menu-hover');
            $li.addClass('ui-menu-hover');
            //$siblingsMenuGroup.fadeOut(option.showDuration);
            $siblingsMenuGroup.hide();
            //$menuGroup.fadeIn(option.showDuration);
            $menuGroup.show();
        })*/
        $menu.find('li').click(function() {
            var that = $(this);
            if (!(that.children('ul').length > 0)) {
                //$menuGroups.fadeOut(option.hideDuration);
                $menuGroups.hide();
            }
            if(that.hasClass('ui-menu-li')){
                that.addClass('current');
                that.siblings().removeClass('current');
            } else {
                that.parentsUntil('ui-menu-li').addClass('current');
                that.parentsUntil('ui-menu-li').siblings().removeClass('current');
            }
            return false;
        });

        if (option.vertical) {
            $menu.width(option.width);
            $menu.find('li').width(option.width);
            $menu.find('a').width($(this).width() - 14);
        } else {
            $.each($menuItems.find('li'), function() {
                //$(this).width(option.width);
                $(this).width(option.groupWidth);
                if (!($(this).hasClass('ui-menu-li')) && $.browser.msie) {
                    $(this).children('a').width($(this).width() - 14);
                }
            });
        }
        $menu.css('zIndex', option.zIndex);
        $menu.show();
        return this;
    }
    $.fn.extend({
        menu: menu
    });
    //module.exports = menu;
})($ || jQuery);;(function($) {
   $.btn = {
    running: function(el, message) {
        var $el = $(el),
        msg = message || '请稍候...';
        $el.data('text', $el.html());
        $el.prop('disabled', true)
        .addClass('disabled')
        .html('<i class="iconfont icon-spinner icon-spin"></i> ' + msg);
    },
    enabled: function(el) {
        var $el = $(el);
        $el.prop('disabled', false)
        .removeClass('disabled')
        .html($el.data('text'));
    }
   }
})($ || jQuery);;(function($) {

    $.easytabs = $.tabs = function(container, options) {

        // Attach to plugin anything that should be available via
        // the $container.data('easytabs') object
        var plugin = this,
            $container = $(container),

            defaults = {
                animate: false,
                panelActiveClass: "current",
                tabActiveClass: "current",
                height: "auto",
                defaultTab: "li:first-child",
                tabs: "> ul > li",
                cycle: false,
                transitionIn: 'fadeIn',
                transitionOut: 'fadeOut',
                transitionInEasing: 'swing',
                transitionOutEasing: 'swing',
                transitionCollapse: 'slideUp',
                transitionUncollapse: 'slideDown',
                transitionCollapseEasing: 'swing',
                transitionUncollapseEasing: 'swing',
                containerClass: "",
                tabsClass: "",
                tabClass: "",
                panelClass: "",
                cache: true,
                event: 'click',
                panelContext: $container
            },

            // Internal instance variables
            // (not available via easytabs object)
            $defaultTab,
            $defaultTabLink,
            transitions,
            animationSpeeds = {
                fast: 200,
                normal: 400,
                slow: 600
            },

            // Shorthand variable so that we don't need to call
            // plugin.settings throughout the plugin code
            settings;

        // =============================================================
        // Functions available via easytabs object
        // =============================================================
        plugin.tabsResize = function(p) {
            plugin.panels.parent().height(p.height - plugin.tabs.parent().outerHeight(true));
        };
        plugin.init = function() {

            plugin.settings = settings = $.extend({}, defaults, options);
            settings.bind_str = settings.event + ".easytabs";

            // Convert 'normal', 'fast', and 'slow' animation speed settings to their respective speed in milliseconds
            if (typeof(settings.animationSpeed) === 'string') {
                settings.animationSpeed = animationSpeeds[settings.animationSpeed];
            }

            $('a.anchor').remove().prependTo('body');
            // Store easytabs object on container so we can easily set
            // properties throughout
            $container.data('easytabs', {});

            plugin.setTransitions();

            plugin.getTabs();

            addClasses();

            setDefaultTab();

            bindToTabClicks();

            initCycle();

            // Append data-easytabs HTML attribute to make easy to query for
            // easytabs instances via CSS pseudo-selector
            $container.attr('data-easytabs', true);
            plugin.panels.parent().height(settings.height - plugin.tabs.parent().outerHeight(true));
        };

        // Set transitions for switching between tabs based on options.
        // Could be used to update transitions if settings are changes.
        plugin.setTransitions = function() {
            transitions = (settings.animate) ? {
                show: settings.transitionIn,
                hide: settings.transitionOut,
                speed: settings.animationSpeed,
                collapse: settings.transitionCollapse,
                uncollapse: settings.transitionUncollapse,
                halfSpeed: settings.animationSpeed / 2
            } : {
                show: "show",
                hide: "hide",
                speed: 0,
                collapse: "hide",
                uncollapse: "show",
                halfSpeed: 0
            };
        };

        // Find and instantiate tabs and panels.
        // Could be used to reset tab and panel collection if markup is
        // modified.
        plugin.getTabs = function() {
            var $matchingPanel;

            // Find the initial set of elements matching the setting.tabs
            // CSS selector within the container
            plugin.tabs = $container.find(settings.tabs),

            // Instantiate panels as empty jquery object
            plugin.panels = $(),
            plugin.tabs.each(function(index) {
                var $tab = $(this),
                    $a = $tab.children('a'),

                    // targetId is the ID of the panel, which is either the
                    // `href` attribute for non-ajax tabs, or in the
                    // `data-target` attribute for ajax tabs since the `href` is
                    // the ajax URL
                    targetId = $tab.children('a').data('target');

                $tab.data('easytabs', {});

                // If the tab has a `data-target` attribute, and is thus an ajax tab
                if (targetId !== undefined && targetId !== null) {
                    $tab.data('easytabs').ajax = $a.attr('href');
                    targetId = targetId.match(/#([^\?]+)/)[1];
                } else
                if ($a.attr('trigger')) {
                    targetId = $a.attr('trigger');
                } else {
                    targetId = $a.attr('href');
                    targetId = targetId.match(/#([^\?]+)/)[1];
                }


                $matchingPanel = settings.panelContext.find("#" + targetId);

                // If tab has a matching panel, add it to panels

                if ($matchingPanel.length) {

                    var iscached = $tab.children('a').data('cached');
                    if (iscached == false) {
                        $matchingPanel.addClass('no-cached');
                        $matchingPanel.data('cached', iscached);
                    }

                    // Store panel height before hiding
                    $matchingPanel.data('easytabs', {
                        position: $matchingPanel.css('position'),
                        visibility: $matchingPanel.css('visibility')
                    });

                    // Don't hide panel if it's active (allows `getTabs` to be called manually to re-instantiate tab collection)
                    $matchingPanel.not(settings.panelActiveClass).hide();

                    plugin.panels = plugin.panels.add($matchingPanel);

                    $tab.data('easytabs').panel = $matchingPanel;

                    // Otherwise, remove tab from tabs collection
                } else {
                    plugin.tabs = plugin.tabs.not($tab);
                    if ('console' in window) {
                        console.warn('Warning: tab without matching panel for selector \'#' + targetId + '\' removed from set');
                    }
                }
            });
        };

        // Select tab and fire callback
        plugin.selectTab = function($clicked, callback) {
            var //url = window.location,
            //hash = url.hash.match(/^[^\?]*/)[0],
            $targetPanel = $clicked.parent().data('easytabs').panel,
                ajaxUrl = $clicked.parent().data('easytabs').ajax;
            if (!$clicked.hasClass(settings.tabActiveClass) || !$targetPanel.hasClass(settings.panelActiveClass)) {
                activateTab($clicked, $targetPanel, ajaxUrl, callback);

                // Cache is disabled => reload (e.g reload an ajax tab).
            } else if (!settings.cache) {
                activateTab($clicked, $targetPanel, ajaxUrl, callback);
            }

        };

        // Find tab with target panel matching value
        plugin.matchTab = function(hash) {
            return plugin.tabs.find("[href='" + hash + "'],[data-target='" + hash + "']").first();
        };

        // Find panel with `id` matching value
        plugin.matchInPanel = function(hash) {
            return (hash && plugin.validId(hash) ? plugin.panels.filter(':has(' + hash + ')').first() : []);
        };

        // Make sure hash is a valid id value (admittedly strict in that HTML5 allows almost anything without a space)
        // but jQuery has issues with such id values anyway, so we can afford to be strict here.
        plugin.validId = function(id) {
            return id.substr(1).match(/^[A-Za-z]+[A-Za-z0-9\-_:\.].$/);
        };


        // Cycle through tabs
        plugin.cycleTabs = function(tabNumber) {
            if (settings.cycle) {
                tabNumber = tabNumber % plugin.tabs.length;
                $tab = $(plugin.tabs[tabNumber]).children("a").first();
                skipUpdateToHash = true;
                plugin.selectTab($tab, function() {
                    setTimeout(function() {
                        plugin.cycleTabs(tabNumber + 1);
                    }, settings.cycle * 1000);
                });
            }
        };


        // Convenient public methods
        plugin.publicMethods = {
            select: function(tabSelector) {
                var $tab;

                // Find tab container that matches selector (like 'li#tab-one' which contains tab link)
                if (($tab = plugin.tabs.filter(tabSelector)).length === 0) {

                    // Find direct tab link that matches href (like 'a[href="#panel-1"]')
                    if (($tab = plugin.tabs.find("a[href='" + tabSelector + "']")).length === 0) {

                        // Find direct tab link that matches selector (like 'a#tab-1')
                        if (($tab = plugin.tabs.find("a" + tabSelector)).length === 0) {

                            // Find direct tab link that matches data-target (lik 'a[data-target="#panel-1"]')
                            if (($tab = plugin.tabs.find("[data-target='" + tabSelector + "']")).length === 0) {

                                // Find direct tab link that ends in the matching href (like 'a[href$="#panel-1"]', which would also match http://example.com/currentpage/#panel-1)
                                if (($tab = plugin.tabs.find("a[href$='" + tabSelector + "']")).length === 0) {

                                    $.error('Tab \'' + tabSelector + '\' does not exist in tab set');
                                }
                            }
                        }
                    }
                } else {
                    // Select the child tab link, since the first option finds the tab container (like <li>)
                    $tab = $tab.children("a").first();
                }
                plugin.selectTab($tab);
            }
        };

        // =============================================================
        // Private functions
        // =============================================================

        // Triggers an event on an element and returns the event result
        var fire = function(obj, name, data) {
            var event = $.Event(name);
            obj.trigger(event, data);
            return event.result !== false;
        }

        // Add CSS classes to markup (if specified), called by init
        var addClasses = function() {
            $container.addClass(settings.containerClass);
            plugin.tabs.parent().addClass(settings.tabsClass);
            plugin.tabs.addClass(settings.tabClass);
            plugin.panels.addClass(settings.panelClass);
        };

        // Set the default tab, whether from hash (bookmarked) or option,
        // called by init
        var setDefaultTab = function() {
            var hash = window.location.hash.match(/^[^\?]*/)[0],
                $selectedTab = plugin.matchTab(hash).parent(),
                $panel;
            // If hash directly matches one of the tabs, active on page-load
            if ($selectedTab.length === 1) {
                $defaultTab = $selectedTab;
                settings.cycle = false;

            } else {
                $panel = plugin.matchInPanel(hash);
                // If one of the panels contains the element matching the hash,
                // make it active on page-load
                if ($panel.length) {
                    hash = '#' + $panel.attr('id');
                    $defaultTab = plugin.matchTab(hash).parent();

                    // Otherwise, make the default tab the one that's active on page-load
                } else {
                    $defaultTab = plugin.tabs.parent().find(settings.defaultTab);
                    if ($defaultTab.length === 0) {
                        $.error("The specified default tab ('" + settings.defaultTab + "') could not be found in the tab set ('" + settings.tabs + "') out of " + plugin.tabs.length + " tabs.");
                    }
                }
            }

            $defaultTabLink = $defaultTab.children("a").first();

            activateDefaultTab($selectedTab);
        };

        // Activate defaultTab (or collapse by default), called by setDefaultTab
        var activateDefaultTab = function($selectedTab) {
            var defaultPanel,
                defaultAjaxUrl;


            defaultPanel = $($defaultTab.data('easytabs').panel);
            defaultAjaxUrl = $defaultTab.data('easytabs').ajax;

            if (defaultAjaxUrl && (!settings.cache || !$defaultTab.data('easytabs').cached)) {
                $container.trigger('easytabs:ajax:beforeSend', [$defaultTabLink, defaultPanel]);
                defaultPanel.load(defaultAjaxUrl, function(response, status, xhr) {
                    settings.complete && settings.complete();
                    $defaultTab.data('easytabs').cached = true;
                    $container.trigger('easytabs:ajax:complete', [$defaultTabLink, defaultPanel, response, status, xhr]);
                });
            }

            $defaultTab.data('easytabs').panel
                .show()
                .addClass(settings.panelActiveClass);

            $defaultTab
                .addClass(settings.tabActiveClass)
                .children()
                .addClass(settings.tabActiveClass);

            // Fire event when the plugin is initialised
            $container.trigger("easytabs:initialised", [$defaultTabLink, defaultPanel]);
        };

        // Bind tab-select funtionality to namespaced click event, called by
        // init
        var bindToTabClicks = function() {
            plugin.tabs.children("a").bind(settings.bind_str, function(e) {

                // Stop cycling when a tab is clicked
                settings.cycle = false;

                // Select the panel for the clicked tab
                plugin.selectTab($(this));

                // Don't follow the link to the anchor
                e.preventDefault ? e.preventDefault() : e.returnValue = false;
            });
        };

        // Activate a given tab/panel, called from plugin.selectTab:
        //
        //   * fire `easytabs:before` hook
        //   * get ajax if new tab is an uncached ajax tab
        //   * animate out previously-active panel
        //   * fire `easytabs:midTransition` hook
        //   * update URL hash
        //   * animate in newly-active panel
        //   * update CSS classes for inactive and active tabs/panels
        //
        // TODO: This could probably be broken out into many more modular
        // functions
        var activateTab = function($clicked, $targetPanel, ajaxUrl, callback) {
            plugin.panels.stop(true, true);

            if (fire($container, "easytabs:before", [$clicked, $targetPanel, settings])) {
                var $visiblePanel = plugin.panels.filter(":visible"),
                    $panelContainer = $targetPanel.parent(),
                    targetHeight,
                    visibleHeight,
                    showPanel,
                    hash = window.location.hash.match(/^[^\?]*/)[0];

                $targetPanel.siblings().filter('.no-cached').empty();
                // TODO: Move this function elsewhere
                showPanel = function() {
                    // At this point, the previous panel is hidden, and the new one will be selected
                    $container.trigger("easytabs:midTransition", [$clicked, $targetPanel, settings]);

                    // Gracefully animate between panels of differing heights, start height change animation *after* panel change if panel needs to contract,
                    // so that there is no chance of making the visible panel overflowing the height of the target panel
                    if (settings.transitionIn == 'fadeIn') {
                        $panelContainer.animate(transitions.halfSpeed);
                    }

                    $targetPanel[transitions.show](transitions.speed, settings.transitionInEasing, function() {
                        $container.trigger("easytabs:after", [$clicked, $targetPanel, settings]);
                        // callback only gets called if selectTab actually does something, since it's inside the if block
                        if (typeof callback == 'function') {
                            callback();
                        }
                    });
                };
                var iframe = $targetPanel.find('iframe')[0],
                    $iframe, $targetPanelParent, ifrH, ifrW,
                    initCss = 'border:none;background:transparent;width:100%;height:100%;';
                //if (ajaxUrl && (!settings.cache || !$clicked.parent().data('easytabs').cached)) {
                if (ajaxUrl) {
                    $container.trigger('easytabs:ajax:beforeSend', [$clicked, $targetPanel]);
                    if ($clicked.data('iframe')) {
                        if (!iframe) {
                            iframe = document.createElement('iframe')
                            iframe.setAttribute('frameborder', 0, 0);
                            iframe.style.cssText = initCss;
                            $targetPanel[0].appendChild(iframe);
                            $iframe = $(iframe);
                            $targetPanelParent = $targetPanel.parent();
                            ifrH = $targetPanelParent.innerHeight() - 20;
                            ifrW = $targetPanelParent.innerWidth() - 20;
                            $iframe.attr('src', ajaxUrl);
                            $iframe.height(ifrH);
                            $iframe.width(ifrW);
                        }
                    } else {
                        $.ajaxSetup({
                            cache: false
                        });
                        $targetPanel.load(ajaxUrl, function(response, status, xhr) {
                            if ($(this).data('cached') == false) {
                                $clicked.parent().data('easytabs').cached = false;
                            } else {
                                $clicked.parent().data('easytabs').cached = true;
                            }
                            $container.trigger('easytabs:ajax:complete', [$clicked, $targetPanel, response, status, xhr]);
                        });
                    }
                }

                // Gracefully animate between panels of differing heights, start height change animation *before* panel change if panel needs to expand,
                // so that there is no chance of making the target panel overflowing the height of the visible panel
                if (settings.transitionOut == 'fadeOut') {
                    $panelContainer.animate(transitions.halfSpeed);
                }

                // Change the active tab *first* to provide immediate feedback when the user clicks
                plugin.tabs.filter("." + settings.tabActiveClass).removeClass(settings.tabActiveClass).children().removeClass(settings.tabActiveClass);
                $clicked.parent().addClass(settings.tabActiveClass).children().addClass(settings.tabActiveClass);

                plugin.panels.filter("." + settings.panelActiveClass).removeClass(settings.panelActiveClass);
                $targetPanel.addClass(settings.panelActiveClass);

                if ($visiblePanel.length) {
                    $visiblePanel[transitions.hide](transitions.speed, settings.transitionOutEasing, showPanel);
                } else {
                    $targetPanel[transitions.uncollapse](transitions.speed, settings.transitionUncollapseEasing, showPanel);
                }
            }
        };

        // Begin cycling if set in options, called by init
        var initCycle = function() {
            var tabNumber;
            if (settings.cycle) {
                tabNumber = plugin.tabs.index($defaultTab);
                setTimeout(function() {
                    plugin.cycleTabs(tabNumber + 1);
                }, settings.cycle);
            }
        };

        plugin.init();

    };

    $.fn.easytabs = $.fn.tabs = function(options) {
        var args = arguments;

        return this.each(function() {
            var $this = $(this),
                plugin = $this.data('easytabs');

            // Initialization was called with $(el).easytabs( { options } );
            if (undefined === plugin) {
                plugin = new $.easytabs(this, options);
                $this.data('easytabs', plugin);
            }

            // User called public method
            if (plugin.publicMethods[options]) {
                return plugin.publicMethods[options](Array.prototype.slice.call(args, 1));
            }
        });
    };
    $.fn.tabsResize = function(p) {
        return this.each(function() {
            var $this = $(this),
                plugin = $this.data('easytabs');
            if (undefined === plugin) {
                plugin = new $.easytabs(this, options);
                $this.data('easytabs', plugin);
            }
            if (p.height) plugin.tabsResize(p);
        });

    };

})($ || jQuery);;/*! nice Validator 0.6.4
 * (c) 2012-2013 Jony Zhang <zj86@live.cn>, MIT Licensed
 * http://niceue.com/validator/
 */
/*jshint evil:true, expr:true */
(function($, undefined) {
    "use strict";

    var NS = 'validator',
        CLS_MSG_OK = 'n-ok',
        CLS_MSG_ERROR = 'n-error',
        CLS_MSG_TIP = 'n-tip',
        CLS_MSG_LOADING = 'n-loading',
        CLS_INPUT_VALID = 'n-valid',
        CLS_INPUT_INVALID = 'n-invalid',
        CLS_MSG_BOX = 'msg-box',
        ARIA_INVALID = 'aria-invalid',
        DATA_RULE = 'data-rule',
        DATA_TARGET = 'data-target',
        DATA_TIP = 'data-tip',
        DATA_INPUT_STATUS = 'data-inputstatus',
        NOVALIDATE = 'novalidate',
        INPUT_SELECTOR = ':verifiable',

        rRule = /(\w+)(?:\[(.*)\]$|\((.*)\)$)?/,
        rDisplay = /(?:([^:;\(\[]*):)?(.*)/,
        rDoubleBytes = /[^\x00-\xff]/g,
        rPos = /^.*(top|right|bottom|left).*$/,
        rAjaxType = /(?:(post|get):)?(.+)/i,
        rUnsafe = /<|>/g,

        noop = $.noop,
        proxy = $.proxy,
        isFunction = $.isFunction,
        isArray = $.isArray,
        isString = function(s) {
            return typeof s === 'string';
        },
        isObject = function(o) {
            return o && Object.prototype.toString.call(o) === '[object Object]';
        },
        isIE6 = !window.XMLHttpRequest,
        attr = function(el, key, value) {
            if (value !== undefined) {
                if (value === null) el.removeAttribute(key);
                else el.setAttribute(key, '' + value);
            } else {
                return el.getAttribute(key);
            }
        },
        debug = window.console || {
            log: noop,
            info: noop
        },

        defaults = {
            debug: 0,
            timely: 1,
            theme: 'default',
            stopOnError: false,
            ignore: '',
            //beforeSubmit: null,
            //dataFilter: null,
            //valid: null,
            //invalid: null,

            msgWrapper: 'span',
            msgMaker: function(opt) {
                var html,
                    cls = {
                        error: CLS_MSG_ERROR,
                        ok: CLS_MSG_OK,
                        tip: CLS_MSG_TIP,
                        loading: CLS_MSG_LOADING
                    }[opt.type];

                html = '<span class="msg-wrap ui-tiptext-container ui-tiptext-container-error ' + cls + '" role="alert">';
                html += (opt.arrow || '') + (opt.icon || '') + '<span class="n-msg ui-tiptext ui-tiptext-error"><i class="iconfont icon-remove-sign"></i>' + opt.msg + '</span>';
                html += '</span>';
                return html;
            },
            //msgIcon: '<span class="ui-tiptext-arrow ui-tiptext-arrowup"><em>◆</em><span>◆</span></span>',
            msgArrow: '',
            msgClass: '',
            //msgStyle: null,
            //msgShow: null,
            //msgHide: null,
            //showOk: true,
            defaultMsg: '{0} ',
            loadingMsg: '验证中...'
        },
        themes = {
            'default': {
                formClass: 'n-default',
                msgClass: 'n-bottom',
                showOk: ''
            }
        };

    /** jQuery Plugin
     * @param {Object} options
        debug         {Boolean}     false     Whether to enable debug mode
        timely        {Boolean}     true      Whether to enable timely verification
        theme         {String}     'default'  Using which theme
        stopOnError   {Boolean}     false     Whether to stop validate when found an error input
        ignore        {jqSelector}    ''      Ignored fields (Using jQuery selector)
        
        beforeSubmit  {Function}              Do something before submitting the form
        dataFilter    {Function}              Conversion ajax results
        valid         {Function}              Triggered when the form is valid
        invalid       {Function}              Triggered when the form is invalid

        msgShow       {Function}    null      When show a message, will trigger this callback
        msgHide       {Function}    null      When hide a message, will trigger this callback
        msgWrapper    {String}     'span'     Message wrapper tag name
        msgMaker      {Function}              Message HTML maker
        msgIcon       {String}                Icon template
        msgArrow      {String}                Small arrow template
        msgStyle      {String}                Custom message style
        msgClass      {String}                Additional added to the message class names
        formClass     {String}                Additional added to the form class names

        defaultMsg    {String}                Default error message
        loadingMsg    {String}                Tips for asynchronous loading
        messages      {Object}      null      Custom messages for the current instance
        
        rules         {Object}      null      Custom rules for the current instance

        fields        {Object}                Field set to be verified
        {String} key    name|#id
        {String|Object} value                 Rule string, or an object is passed more arguments

        fields[key][rule]       {String}      Rule string
        fields[key][tip]        {String}      Custom friendly message when focus the input
        fields[key][ok]         {String}      Custom success message
        fields[key][msg]        {Object}      Custom error message
        fields[key][msgStyle]   {String}      Custom message style
        fields[key][msgClass]   {String}      Additional added to the message class names
        fields[key][msgWrapper] {String}      Message wrapper tag name
        fields[key][msgMaker]   {Function}    Custom message HTML maker
        fields[key][dataFilter] {Function}    Conversion ajax results
        fields[key][valid]      {Function}    Triggered when this field is valid
        fields[key][invalid]    {Function}    Triggered when this field is invalid
        fields[key][must]       {Boolean}     If set true, we always check the field even has remote checking
        fields[key][timely]     {Boolean}     Whether to enable timely verification
        fields[key][target]     {jqSelector}  Verify the current field, but the message can be displayed on target element
     */
    $.fn[NS] = function(options) {
        var that = this,
            args = arguments;

        if (that.is(':input')) return that;
        !that.is('form') && (that = this.find('form'));
        !that.length && (that = this);
        that.each(function() {
            if (isString(options)) {
                if (options.charAt(0) === '_') return;
                var cache = $(this).data(NS);
                if (cache) {
                    cache[options].apply(cache, Array.prototype.slice.call(args, 1));
                }
            } else {
                new Validator(this, options);
            }
        });

        return this;
    };

    // Validate a field, or an area
    $.fn.isValid = function(callback, checkOnly) {
        var me = getInstance(this[0]),
            $inputs,
            ret;

        if (!me) return true;
        // By default only verify without prompt message
        if (checkOnly === undefined) checkOnly = true;
        me.checkOnly = checkOnly;
        $inputs = this.is(':input') ? this : this.find(INPUT_SELECTOR);
        ret = me._multiValidate($inputs, function(isValid) {
            isFunction(callback) && callback.call(null, isValid);
            me.checkOnly = false;
        });

        // If you pass a callback, we maintain the jQuery object chain
        return isFunction(callback) ? this : ret;
    };

    // A faster selector than ":input:not(:submit,:button,:reset,:disabled,[novalidate])"
    $.expr[":"].verifiable = function(elem) {
        var name = elem.nodeName.toLowerCase();

        return (name === 'input' && elem.type !== 'submit' && elem.type !== 'button' && elem.type !== 'reset' ||
            name === 'select' || name === 'textarea') && elem.disabled === false && attr(elem, NOVALIDATE) === null;
    };

    // Constructor for validator
    function Validator(element, options) {
        var me = this,
            themeOpt, dataOpt;

        if (!me instanceof Validator) return new Validator(element, options);

        if (isFunction(options)) {
            options = {
                valid: options
            };
        }
        options = options || {};
        dataOpt = attr(element, 'data-' + NS + '-option');
        dataOpt = dataOpt && dataOpt.charAt(0) === '{' ? (new Function("return " + dataOpt))() : {};
        themeOpt = themes[options.theme || dataOpt.theme || defaults.theme];

        me.options = $.extend({}, defaults, themeOpt, dataOpt, options);
        me.$el = $(element);
        me.rules = new Rules(me.options.rules, true);
        me.messages = new Messages(me.options.messages, true);
        me.elements = {};
        me.fields = {};
        me.deferred = {};
        me.errors = {};
        me._init();
    }

    Validator.prototype = {
        _init: function() {
            var me = this,
                opt = me.options,
                fields = me.fields,
                iconhtml = '',
                form = me.$el[0];

            // Processing field information
            if (isObject(opt.fields)) {
                $.each(opt.fields, function(k, v) {
                    if (v) fields[k] = isString(v) ? {
                        rule: v
                    } : v;
                });
            }
            // Initialization group verification
            if (isArray(opt.groups)) {
                $.map(opt.groups, function(obj) {
                    if (!isString(obj.fields) || !isFunction(obj.callback)) return null;
                    var $elememts = me.$el.find(keys2selector(obj.fields)),
                        fn = function() {
                            return obj.callback.call(me, $elememts);
                        };
                    $.extend(fn, obj);
                    $.map(obj.fields.split(' '), function(k) {
                        fields[k] = fields[k] || {};
                        fields[k].group = fn;
                    });
                });
            }
            // Parsing DOM rules
            me.$el.find(INPUT_SELECTOR).each(function() {
                me._parse(this);
            });
            if (opt.msgClass == 'n-bottom') {
                iconhtml = '<span class="ui-tiptext-arrow ui-tiptext-arrowup"><em>◆</em><span>◆</span></span>';
            } else if (opt.msgClass == 'n-right') {
                iconhtml = '<span class="ui-tiptext-arrow ui-tiptext-arrowleft"><em>◆</em><span>◆</span></span>';
            }
            // Message parameters
            me.msgOpt = {
                type: 'error',
                pos: getPos(opt.msgClass),
                wrapper: opt.msgWrapper,
                cls: opt.msgClass,
                style: opt.msgStyle,
                //icon: opt.msgIcon,
                icon: iconhtml,
                arrow: opt.msgArrow,
                show: opt.msgShow,
                hide: opt.msgHide
            };

            // Guess whether ajax submit
            if (opt.valid || attr(form, 'action') === null) {
                me.isAjaxSubmit = true;
            } else {
                // if there is "valid.form" event
                var events = $[$._data ? '_data' : 'data'](form, "events");
                if (events && events.valid &&
                    $.map(events.valid, function(e) {
                        return e.namespace.indexOf('form') !== -1 ? 1 : null;
                    }).length
                ) {
                    me.isAjaxSubmit = true;
                } else {
                    me.isAjaxSubmit = false;
                }
            }

            // Processing events and cache
            if (!me.$el.data(NS)) {
                me.$el.on('submit.' + NS + ' validate.' + NS, proxy(me, '_submit'))
                    .on('reset.' + NS, proxy(me, '_reset'))
                    .on('showtip.' + NS, proxy(me, '_showTip'))
                    .on('validated.field.' + NS, INPUT_SELECTOR, proxy(me, '_validatedField'))
                    .on('validated.rule.' + NS, INPUT_SELECTOR, proxy(me, '_validatedRule'))
                    .on('focusin.' + NS + ' click.' + NS + ' showtip.' + NS, INPUT_SELECTOR, proxy(me, '_focus'))
                    .on('focusout.' + NS + ' validate.' + NS, INPUT_SELECTOR, proxy(me, '_blur'))
                    .on('mouseover.' + NS, INPUT_SELECTOR, proxy(me, '_mouseover'))
                    .on('mouseout.' + NS, INPUT_SELECTOR, proxy(me, '_mouseout'))
                    .on('click.' + NS, 'input:radio,input:checkbox', proxy(me, '_click'));


                if (opt.timely >= 2) {
                    me.$el.on('keyup.' + NS + ' paste.' + NS, INPUT_SELECTOR, proxy(me, '_blur'))
                        .on('change.' + NS, 'select', proxy(me, '_click'));
                }
                me.$el.data(NS, me).addClass('n-' + NS + ' ' + opt.formClass);

                // cache the novalidate attribute value
                me.NOVALIDATE = attr(form, NOVALIDATE);
                // Initialization is complete, stop off default HTML5 form validation, and as a basis has been initialized
                // jQuery's "attr('novalidate')" in IE7 will complain: "SCRIPT3: Member not found."
                attr(form, NOVALIDATE, NOVALIDATE);
            }
        },

        // Verify a zone
        _multiValidate: function($inputs, doneCallbacks) {
            var me = this,
                opt = me.options;

            me.isValid = true;
            me.deferred = {};

            if (opt.ignore) $inputs = $inputs.not(opt.ignore);

            $inputs.each(function(i, el) {
                var field = me.getField(el);
                if (!field) return;

                me._validate(el, field);
                if (!me.isValid && opt.stopOnError) {
                    // stop the verification
                    return false;
                }
            });

            // Need to wait for the completion of all field validation (especially asynchronous verification)
            $.when.apply(
                null,
                $.map(me.deferred, function(v) {
                    return v;
                })
            ).done(function() {
                doneCallbacks.call(me, me.isValid);
            });

            // If the form does not contain asynchronous validation, the return value is correct.
            // Otherwise, you should detect whether a form valid through "doneCallbacks".
            return !$.isEmptyObject(me.deferred) ? undefined : me.isValid;
        },

        // Verify the whole form
        _submit: function(e, mark) {
            var me = this,
                opt = me.options,
                form = e.target,
                isFormValid;

            if (attr(form, 'novalidateonce')) {
                attr(form, 'novalidateonce', null);
                return;
            }
            // We found the "only" mark, and make the native event continues.
            // Receive the "validate" event only from the form.
            if (mark === 'only' || e.type === 'validate' && me.$el[0] !== form) {
                return;
            }

            // Prevent duplicate submission
            if (me.submiting) {
                isFunction(me.submiting) && me.submiting.call(me);
                e.preventDefault();
                return;
            }

            // trigger the beforeSubmit callback.
            if (isFunction(opt.beforeSubmit) && opt.beforeSubmit.call(me, form) === false) {
                me.isAjaxSubmit && e.preventDefault();
                return;
            }

            me._reset();
            me.submiting = true;
            if (opt.debug) {
                debug.log("\n" + e.type + " form");
            }

            isFormValid = me._multiValidate(
                me.$el.find(INPUT_SELECTOR),
                function(isValid) {
                    var FOCUS_EVENT = 'focus.field',
                        ret = (isValid || opt.debug === 2) ? 'valid' : 'invalid',
                        errors;

                    if (!isValid) {
                        // navigate to the error element
                        var $input = me.$el.find(':input.' + CLS_INPUT_INVALID + ':first');
                        $input.trigger(FOCUS_EVENT);
                        // IE6 has to trigger once again to get the focus
                        isIE6 && $input.trigger(FOCUS_EVENT);
                        errors = $.map(me.errors, function(err) {
                            return err;
                        });
                    }

                    // releasing submit
                    me.submiting = false;

                    // trigger callback and event
                    isFunction(opt[ret]) && opt[ret].call(me, form, errors);
                    me.$el.trigger(ret + '.form', [form, errors]);

                    if (isValid && !me.isAjaxSubmit) {
                        // trigger the native submit event
                        $(form).trigger('submit', ['only']);
                    }
                }
            );

            // isFormValid == false || isFormValid === undefined || isAjaxSubmit
            if (!isFormValid || me.isAjaxSubmit) e.preventDefault();
        },

        _reset: function(e) {
            var me = this;

            me.errors = {};
            if (e) {
                me.$el.find(":verifiable").each(function(i, el) {
                    me.hideMsg(el);
                    attr(el, DATA_INPUT_STATUS, null);
                    attr(el, ARIA_INVALID, null);
                    $(el).removeClass(CLS_INPUT_VALID + " " + CLS_INPUT_INVALID);
                });
            }
        },

        _focus: function(e) {
            var el = e.target,
                nextEl = $(el).next(),
                msg;
            $(el).removeClass('ui-input-error');
            nextEl.hasClass('msg-box') && nextEl.hide();
            if (e.type !== 'showtip') {
                if (e.isTrigger || this.submiting) return;
                if (el.value !== '' && (attr(el, ARIA_INVALID) === 'false' || attr(el, DATA_INPUT_STATUS) === 'tip')) return;
            }
            msg = attr(el, DATA_TIP);
            if (!msg) return;
            this.showMsg(el, {
                msg: msg,
                type: 'tip'
            });
        },

        _mouseover: function(e) {
            var $el = $(e.target),
                me = this,
                msgclass,
                nextmsg = $el.next(),
                errormsg,
                elpos = $el.position(),
                elposLeft,
                elposTop;
            if (nextmsg.length > 0 && nextmsg.hasClass('msg-box')) {
                elposLeft = elpos.left;
                msgclass = me.options.msgClass;
                errormsg = nextmsg.find('.n-msg').text();
                if ($.browser.msie && $.browser.version < 8) {
                    elposTop = elpos.top;
                } else {
                    elposTop = elpos.top + $el.outerHeight();
                }
                if (msgclass == 'n-bottom') {
                    nextmsg.css({
                        'left': elposLeft,
                        'top': elposTop
                    })
                } else if (msgclass == 'n-right') {
                    nextmsg.css({
                        'left': elposLeft + $el.outerWidth() + 2,
                        'top': elposTop
                    })
                    nextmsg.children().height($el.height());
                }
                if (errormsg.length > 0) {
                    nextmsg.show();
                }
            }

        },

        _mouseout: function(e) {
            var el = e.target,
                nextEl = $(el).next();
            nextEl.hasClass('msg-box') && nextEl.hide();
        },

        // Handle focusout/validate/keyup/click/paste events
        _blur: function(e, isClick) {
            var me = this,
                opt = me.options,
                field,
                must,
                el = e.target,
                etype = e.type,
                timer = 150;
            if (!isClick && etype !== 'paste') {
                // must be verified, if it is a manual trigger
                if (etype === 'validate') {
                    must = true;
                    timer = 0;
                }
                // or doesn't require real-time verification, exit
                else if (attr(el, 'notimely')) return;
                // or it isn't a "keyup" event, exit
                else if (opt.timely >= 2 && etype !== 'keyup') return;

                // if the current field is ignored, exit
                if (opt.ignore && $(el).is(opt.ignore)) return;

                if (etype === 'keyup') {
                    var key = e.keyCode,
                        specialKey = {
                            8: 1, // Backspace
                            9: 1, // Tab
                            16: 1, // Shift
                            32: 1, // Space
                            46: 1 // Delete
                        };

                    // only gets focus, no verification
                    if (key === 9 && !el.value) return;

                    // do not validate, if triggered by these keys
                    if (key < 48 && !specialKey[key]) return;

                    // keyboard events, reducing the frequency of verification
                    timer = opt.timely >= 100 ? opt.timely : 500;
                }
            }

            field = me.getField(el);
            if (!field) return;

            if (timer) {
                if (field.timeout) clearTimeout(field.timeout);
                field.timeout = setTimeout(function() {
                    me._validate(el, field, must);
                }, timer);
            } else {
                // use synchronous verification for "validate" event
                me._validate(el, field, must);
            }
        },

        _click: function(e) {
            this._blur(e, true);
        },

        _showTip: function(e) {
            var me = this;

            if (me.$el[0] !== e.target) return;
            me.$el.find(":verifiable[" + DATA_TIP + "]").each(function() {
                me.showMsg(this, {
                    msg: attr(this, DATA_TIP),
                    type: 'tip'
                });
            });
        },

        // Parsing a field
        _parse: function(el) {
            var me = this,
                field,
                key = el.name,
                dataRule = attr(el, DATA_RULE);

            dataRule && attr(el, DATA_RULE, null);

            // if the field has passed the key as id mode, or it doesn't has a name
            if (el.id && ('#' + el.id in me.fields) || !el.name) {
                key = '#' + el.id;
            }
            // doesn't verify a field that has neither id nor name
            if (!key) return;

            field = me.fields[key] || {};
            field.old = {};
            field.rule = field.rule || dataRule || '';
            if (!field.rule) return;

            field.key = key;
            field.required = field.rule.indexOf('required') !== -1;
            field.must = field.must || !! field.rule.match(/match|checked/);
            if (field.required) attr(el, 'aria-required', true);
            if ('timely' in field && !field.timely || !me.options.timely) {
                attr(el, 'notimely', true);
            }
            if (isString(field.target)) attr(el, DATA_TARGET, field.target);
            if (isString(field.tip)) attr(el, DATA_TIP, field.tip);

            me.fields[key] = me._parseRule(field);
        },

        // Parsing field rules
        _parseRule: function(field) {
            var arr = rDisplay.exec(field.rule),
                rules;

            if (!arr) return;

            field.display = arr[1];
            field.rules = [];
            rules = (arr[2] || '').split(';');

            $.map(rules, function(rule) {
                var parts = rRule.exec(rule);

                if (!parts) return null;
                if (parts[3]) parts[2] = parts[3];

                field.rules.push({
                    method: parts[1],
                    params: parts[2] ? $.trim(parts[2]).split(', ') : undefined
                });
            });

            field.vid = 0;
            field.rid = field.rules[0].method;

            return field;
        },

        // Validated a field
        _validatedField: function(e, field, ret) {
            var me = this,
                opt = me.options,
                el = e.target,
                isValid = ret.isValid = field.isValid = !! ret.isValid,
                callback = isValid ? 'valid' : 'invalid';

            ret.key = field.key;
            ret.rule = field.rid;
            if (isValid) {
                ret.type = 'ok';
            } else {
                if (me.submiting) {
                    me.errors[field.key] = ret.msg;
                }
                // so, form is invalid
                me.isValid = false;
            }
            field.old.value = el.value;
            field.old.id = el.id;
            me.elements[field.key] = el;

            if (me.checkOnly) return;

            // trigger callback and event
            isFunction(field[callback]) && field[callback].call(me, el, ret);
            $(el).attr(ARIA_INVALID, !isValid)
                .addClass(isValid ? CLS_INPUT_VALID : CLS_INPUT_INVALID)
                .removeClass(isValid ? CLS_INPUT_INVALID : CLS_INPUT_VALID)
                .trigger(callback + '.field', [ret, me]);

            // show or hide the message
            if (field.msgMaker || opt.msgMaker) {
                if ((!ret.showOk && ret.msg) || (ret.showOk && opt.showOk !== false)) {
                    me.showMsg(el, ret, field);
                } else {
                    me.hideMsg(el, ret, field);
                }
            }
        },

        // Validated a rule
        _validatedRule: function(e, field, ret, msgOpt) {
            var me = this,
                opt = me.options,
                el = e.target,
                msg = '',
                method,
                isValid = false,
                showOk = false;

            msgOpt = msgOpt || {};
            field = field || me.getField(el);
            method = field.rid;

            // use null to break validation from a field
            if (ret === null) {
                $(el).trigger('validated.field', [field, {
                    isValid: true
                }]);
            } else if (ret === true || ret === undefined) {
                isValid = true;
            }
            // ret may be: false, strings, objects
            else {
                /* rule message priority:
                    1. custom message;
                    2. rule returned message;
                    3. built-in rules message;
                    4. the default message
                */
                // get message from element or field
                msg = getDataMsg(el, field, method);
                if (!msg) {
                    // get message from result
                    if (isString(ret)) {
                        msg = ret;
                        ret = {
                            error: msg
                        };
                    } else if (isObject(ret)) {
                        if (ret.error) {
                            msg = ret.error;
                        } else {
                            isValid = true;
                            if (ret.ok && isString(ret.ok)) showOk = true;
                            msg = ret.ok;
                        }
                    }
                }
                msgOpt.msg = (isValid ? msg : (msg || me.messages[method] || defaults.defaultMsg)).replace('{0}', field.display || '');
            }

            // output the debug message
            if (opt.debug) {
                debug.log('   ' + field.vid + ': ' + method + ' => ' + (msgOpt.msg || true));
            }

            // message analysis, and throw rule level event
            if (isValid) {
                msgOpt.isValid = true;
                if (!showOk) {
                    var okmsg = field.ok || attr(el, 'data-ok');
                    if (okmsg) {
                        showOk = true;
                        msgOpt.msg = okmsg;
                    } else if (isString(opt.showOk)) {
                        showOk = true;
                        msgOpt.msg = opt.showOk;
                    }
                }
                msgOpt.showOk = showOk;
                $(el).trigger('valid.rule', [method, msgOpt.msg]);
            } else {
                $(el).trigger('invalid.rule', [method, msgOpt.msg]);
            }

            // the current rule has passed, continue to validate
            if (isValid && field.vid < field.rules.length - 1) {
                field.vid++;
                me._checkRule(el, field);
            }
            // field was invalid, or all fields was valid
            else {
                field.vid = 0;
                $(el).trigger('validated.field', [field, msgOpt]);
            }
        },

        // Verify a rule form a field
        _checkRule: function(el, field) {
            var me = this,
                ret,
                old,
                key = field.key,
                rule = field.rules[field.vid],
                method = rule.method,
                params = rule.params;

            // request has been sent, wait it
            if (me.submiting && me.deferred[key]) return;
            old = field.old;
            field.rid = method;

            if (!field.must && old.ret !== undefined &&
                old.rule === rule && old.id === el.id &&
                el.value && old.value === el.value
            ) {
                ret = old.ret;
            } else {
                // get validation result of the current rule
                ret = (getDataRule(el, method) || me.rules[method] || function() {
                    return true;
                }).call(me, el, params, field);
            }
            // asynchronous validation
            if (isObject(ret) && isFunction(ret.then)) {
                var dataFilter = function(data) {
                    if (isString(data) || (isObject(data) && ('error' in data || 'ok' in data))) return data;
                };

                me.deferred[key] = ret;

                // show loading message
                !me.checkOnly && me.showMsg(el, {
                    type: 'loading',
                    msg: me.options.loadingMsg
                }, field);

                // waiting to parse the response data
                ret.then(
                    function(d, textStatus, jqXHR) {
                        var msg = jqXHR.responseText,
                            data,
                            filter = field.dataFilter || me.options.dataFilter;

                        // detect if it is json format
                        if (this.dataType === 'json') {
                            msg = d;
                        } else if (msg.charAt(0) === '{') {
                            msg = $.parseJSON(msg) || {};
                        }

                        // filter data
                        if (isFunction(filter)) {
                            msg = filter(msg);
                        } else if (msg === '') {
                            msg = true;
                        } else {
                            data = dataFilter(msg);
                            if (data === undefined) data = dataFilter(msg.data);
                            msg = data || true;
                        }
                        old.rule = rule;
                        old.ret = msg;
                        $(el).trigger('validated.rule', [field, msg]);
                    },
                    function(jqXHR, textStatus) {
                        $(el).trigger('validated.rule', [field, textStatus]);
                    }
                );
                // whether the field valid is unknown
                field.isValid = undefined;
            }
            // other result
            else {
                $(el).trigger('validated.rule', [field, ret]);
            }
        },

        // Processing the validation
        _validate: function(el, field) {
            // doesn't validate the element that has "disabled" or "novalidate" attribute
            if (el.disabled || attr(el, NOVALIDATE) !== null) return;
            if (!field.rules) this._parse(el);

            var me = this,
                opt = me.options,
                $el = $(el),
                inputstatus,
                msgOpt = {},
                groupFn = field.group,
                ret,
                isValid = field.isValid = true;

            if (opt.debug) debug.info(field.key);

            // group validation
            if (groupFn) {
                ret = groupFn.call(me);
                if (ret === true || ret === undefined) {
                    ret = undefined;
                } else {
                    if (isString(ret)) ret = {
                        error: ret
                    };
                    field.vid = 0;
                    field.rid = 'group';
                    isValid = false;
                    me.hideMsg(el, {}, field);
                    $.extend(msgOpt, groupFn);
                }
            }
            // if the field is not required and it has a blank value
            if (isValid && !field.required && !field.must && !el.value) {
                if (attr(el, DATA_INPUT_STATUS) === 'tip') {
                    return;
                }
                if (!checkable(el)) {
                    $el.trigger('validated.field', [field, {
                        isValid: true
                    }]);
                    return;
                }
            }

            // if the results are out
            if (ret !== undefined) {
                $el.trigger('validated.rule', [field, ret, msgOpt]);
            } else if (field.rule) {
                me._checkRule(el, field);
            }
            inputstatus = $el.attr('data-inputstatus');
            if (inputstatus == 'error') {
                $el.addClass('ui-input-error');
            } else if (inputstatus == 'ok') {
                $el.removeClass('ui-input-error');
            }
        },

        _getMsgOpt: function(obj) {
            return $.extend({}, this.msgOpt, isString(obj) ? {
                msg: obj
            } : obj);
        },

        // Get field information
        getField: function(el) {
            var me = this,
                key;

            if (el.id && '#' + el.id in me.fields || !el.name) {
                key = '#' + el.id;
            } else {
                key = el.name;
            }
            if (attr(el, DATA_RULE)) me._parse(el);

            return me.fields[key];
        },

        /* Detecting whether the value of an element that matches a rule
         *
         * @interface: test
         */
        test: function(el, rule) {
            var me = this,
                ret,
                parts = rRule.exec(rule),
                method,
                params;

            if (!parts) return true;
            if (parts[3]) parts[2] = parts[3];
            method = parts[1];
            params = parts[2] ? $.trim(parts[2]).split(', ') : undefined;
            if (method in me.rules) {
                ret = me.rules[method].call(me, el, params);
            }

            return ret === true || ret === undefined || ret === null || false;
        },

        // Get a range of validation messages
        getRangeMsg: function(value, params, type, suffix) {
            if (!params) return;

            var me = this,
                msg = me.messages[type] || '',
                p = params[0].split('~'),
                a = p[0],
                b = p[1],
                c = 'rg',
                args = [''],
                isNumber = +value === +value;

            if (p.length === 2) {
                if (a && b) {
                    if (isNumber && value >= +a && value <= +b) return true;
                    args = args.concat(p);
                } else if (a && !b) {
                    if (isNumber && value >= +a) return true;
                    args.push(a);
                    c = 'gt';
                } else if (!a && b) {
                    if (isNumber && value <= +b) return true;
                    args.push(b);
                    c = 'lt';
                }
            } else {
                if (value === +a) return true;
                args.push(a);
                c = 'eq';
            }

            if (msg) {
                if (suffix && msg[c + suffix]) {
                    c += suffix;
                }
                args[0] = msg[c];
            }

            return me.renderMsg.apply(null, args);
        },

        /* @interface: renderMsg
         */
        renderMsg: function() {
            var args = arguments,
                tpl = args[0],
                i = args.length;

            if (!tpl) return;

            while (--i) {
                tpl = tpl.replace('{' + i + '}', args[i]);
            }

            return tpl;
        },

        _getMsgDOM: function(el, opt) {
            var $el = $(el),
                $msgbox, datafor, tgt;

            if ($el.is(':input')) {
                tgt = opt.target || attr(el, DATA_TARGET);
                if (tgt) {
                    tgt = this.$el.find(tgt);
                    if (tgt.length) {
                        if (!tgt.is(':input')) {
                            $msgbox = tgt;
                        } else {
                            el = tgt.get(0);
                        }
                    }
                }
                if (!$msgbox) {
                    datafor = !checkable(el) && el.id ? el.id : el.name;
                    $msgbox = this.$el.find(opt.wrapper + '.' + CLS_MSG_BOX + '[for="' + datafor + '"]');
                }
            } else {
                $msgbox = $el;
            }

            if (!$msgbox.length) {
                $el = this.$el.find(tgt || el);
                $msgbox = $('<' + opt.wrapper + '>').attr({
                    'class': CLS_MSG_BOX + (opt.cls ? ' ' + opt.cls : ''),
                    'style': opt.style || '',
                    'for': datafor
                });
                if (checkable(el)) {
                    var $parent = $el.parent();
                    $msgbox.appendTo($parent.is('label') ? $parent.parent() : $parent);
                } else {
                    //$msgbox[!opt.pos || opt.pos === 'right' ? 'insertAfter' : 'insertBefore']($el);
                    $msgbox['insertAfter']($el);
                }
            }

            return $msgbox;
        },

        /* @interface: showMsg
         */
        showMsg: function(el, opt, /*INTERNAL*/ field) {
            opt = this._getMsgOpt(opt);
            if (!opt.msg && !opt.showOk) return;
            el = $(el).get(0);

            if ($(el).is(":verifiable")) {
                // mark message status
                attr(el, DATA_INPUT_STATUS, opt.type);
                field = field || this.getField(el);
                if (field) {
                    if (field.msgStyle) opt.style = field.msgStyle;
                    if (field.msgClass) opt.cls = field.msgClass;
                    if (field.msgWrapper) opt.wrapper = field.msgWrapper;
                }
            }

            var $msgbox = this._getMsgDOM(el, opt),
                cls = $msgbox[0].className;

            !rPos.test(cls) && $msgbox.addClass(opt.cls);
            if (isIE6 && opt.pos === 'bottom') {
                $msgbox[0].style.marginTop = $(el).outerHeight() + 'px';
            }
            $msgbox.html(((field || {}).msgMaker || this.options.msgMaker).call(this, opt));
            $msgbox[0].style.display = 'none';

            isFunction(opt.show) && opt.show.call(this, $msgbox, opt.type);
        },

        /* @interface: hideMsg
         */
        hideMsg: function(el, opt, /*INTERNAL*/ field) {
            el = $(el).get(0);
            opt = this._getMsgOpt(opt);
            if ($(el).is(":verifiable")) {
                field = field || this.getField(el);
                if (field && field.msgWrapper) opt.wrapper = field.msgWrapper;
            }

            var $msgbox = this._getMsgDOM(el, opt);
            if (!$msgbox.length) return;

            if (isFunction(opt.hide)) {
                opt.hide.call(this, $msgbox, opt.type);
            } else {
                $msgbox[0].style.display = 'none';
            }
        },

        /* @interface: mapMsg
         */
        mapMsg: function(obj) {
            var me = this;

            $.each(obj, function(name, msg) {
                var el = me.elements[name] || me.$el.find(':input[name="' + name + '"]')[0];
                me.showMsg(el, msg);
            });
        },

        /* @interface: setMsg
         */
        setMsg: function(obj) {
            new Messages(obj, this.messages);
        },

        /* @interface: setRule
         */
        setRule: function(obj) {
            new Rules(obj, this.rules);
            $.map(this.fields, function(field) {
                field.old = {};
            });
        },

        /* @interface: setField
         */
        setField: function(key, obj) {
            var me = this,
                fields = {};

            if (isString(key)) {
                // remove this field
                if (obj === null) {
                    $.map(key.split(' '), function(k) {
                        if (k && me.fields[k]) me.fields[k] = null;
                    });
                    return;
                }
                // update this field
                else if (obj) {
                    fields[key] = obj;
                }
            }
            // update fields
            else if (isObject(key)) {
                fields = key;
            }

            if (!me.options.fields) {
                me.options.fields = fields;
            } else {
                $.extend(me.options.fields, fields);
            }
            me._init();
        },

        /* @interface: holdSubmit
         */
        holdSubmit: function(hold) {
            if (hold === undefined) hold = true;
            this.submiting = hold;
        },

        /* @interface: destroy
         */
        destroy: function() {
            this._reset(true);
            this.$el.off('.' + NS).removeData(NS);
            attr(this.$el[0], NOVALIDATE, this.NOVALIDATE);
        }
    };


    // Rule class
    function Rules(obj, context) {
        var that = context ? context === true ? this : context : Rules.prototype;

        if (!isObject(obj)) return;

        for (var k in obj) {
            that[k] = getRule(obj[k]);
        }
    }

    // Message class
    function Messages(obj, context) {
        var that = context ? context === true ? this : context : Messages.prototype;

        if (!isObject(obj)) return;

        for (var k in obj) {
            if (!obj[k]) return;
            that[k] = obj[k];
        }
    }

    // Rule converted factory
    function getRule(fn) {
        switch ($.type(fn)) {
            case 'function':
                return fn;
            case 'array':
                return function(el) {
                    return fn[0].test(el.value) || fn[1] || false;
                };
            case 'regexp':
                return function(el) {
                    return fn.test(el.value);
                };
        }
    }

    // Convert space-separated keys to jQuery selector
    function keys2selector(keys) {
        var selector = '';

        $.map(keys.split(' '), function(k) {
            selector += ',' + (k.charAt(0) === '#' ? k : '[name="' + k + '"]');
        });

        return selector.substring(1);
    }

    // Get instance by an element
    function getInstance(el) {
        var wrap;

        if (!el || !el.tagName) return;
        switch (el.tagName) {
            case 'INPUT':
            case 'SELECT':
            case 'TEXTAREA':
            case 'BUTTON':
            case 'FIELDSET':
                wrap = el.form || $(el).closest('.n-' + NS);
                break;
            case 'FORM':
                wrap = el;
                break;
            default:
                wrap = $(el).closest('.n-' + NS);
        }

        return $(wrap).data(NS) || $(wrap)[NS]().data(NS);
    }

    function initByInput(el, eventType) {
        if (!el.form || attr(el.form, NOVALIDATE) !== null) return;
        var me = getInstance(el);

        if (me) {
            me._parse(el);
            $(el).trigger(eventType);
        } else {
            attr(el, DATA_RULE, null);
        }
    }

    // Get custom rules on the node
    function getDataRule(el, method) {
        var fn = $.trim(attr(el, DATA_RULE + '-' + method));

        if (!fn) return;
        fn = (new Function("return " + fn))();
        if (fn) return getRule(fn);
    }

    // Get custom messages on the node
    function getDataMsg(el, field, item) {
        var msg = field.msg;

        if (isObject(msg) && item) msg = msg[item];
        if (!isString(msg)) {
            msg = attr(el, 'data-msg-' + item) || attr(el, 'data-msg') || '';
        }

        return msg;
    }

    // Get message position
    function getPos(str) {
        var pos;

        if (str) pos = rPos.exec(str);
        return pos ? pos[1] : '';
    }

    // Check whether the element is checkbox or radio
    function checkable(el) {
        return el.tagName === 'INPUT' && el.type === 'checkbox' || el.type === 'radio';
    }

    // parse date string to timestamp
    function parseDate(str) {
        return Date.parse(str.replace(/\.|\-/g, '/'));
    }


    // Global events
    $(document)
        .on('focusin', ':input[' + DATA_RULE + ']', function() {
            initByInput(this, 'focusin');
        })

    .on('click', 'input,button', function() {
        if (!this.form) return;

        if (this.type === 'submit' && attr(this, 'formnovalidate') !== null || attr(this, NOVALIDATE) !== null) {
            attr(this.form, 'novalidateonce', true);
        } else if (this.name && checkable(this)) {
            var elem = this.form.elements[this.name];
            if (elem.length) elem = elem[0];
            if (attr(elem, DATA_RULE)) {
                initByInput(elem, 'validate');
            }
        }
    })

    .on('submit', 'form', function(e) {
        if (attr(this, NOVALIDATE) !== null) return;

        var $form = $(this),
            me;

        if (!$form.data(NS)) {
            me = $form[NS]().data(NS);
            if (!$.isEmptyObject(me.fields)) {
                e.type === 'submit' && me._submit(e);
            } else {
                attr(this, NOVALIDATE, NOVALIDATE);
                $form.removeData(NS);
            }
        }
    });


    // Built-in rules (global)
    new Rules({

        /** required
         * @example:
            required
         */
        required: function(element, params) {
            var val = $.trim(element.value),
                isValid = true;

            if (params) {
                if (params.length === 1) {
                    if (!val && !this.test(element, params[0])) {
                        return null;
                    }
                } else if (params[0] === 'not') {
                    $.map(params.slice(1), function(v) {
                        if (val === $.trim(v)) {
                            isValid = false;
                        }
                    });
                }
            }

            return isValid && !! val;
        },

        /** integer
         * @example:
            integer
            integer[+]
            integer[+0]
            integer[-]
            integer[-0]
         */
        integer: function(element, params) {
            var re, z = '0|',
                p = '[1-9]\\d*',
                key = params ? params[0] : '*';

            switch (key) {
                case '+':
                    re = p;
                    break;
                case '-':
                    re = '-' + p;
                    break;
                case '+0':
                    re = z + p;
                    break;
                case '-0':
                    re = z + '-' + p;
                    break;
                default:
                    re = z + '-?' + p;
            }
            re = '^(?:' + re + ')$';

            return new RegExp(re).test(element.value) || this.messages.integer[key];
        },

        /** match another field
         * @example:
            match[password]    Match the password field (two values ​​must be the same)
            match[eq, password]  Ditto
            match[neq, count]  The value must be not equal to the value of the count field
            match[lt, count]   The value must be less than the value of the count field
            match[lte, count]  The value must be less than or equal to the value of the count field
            match[gt, count]   The value must be greater than the value of the count field
            match[gte, count]  The value must be greater than or equal to the value of the count field
         **/
        match: function(element, params, field) {
            if (!params) return;

            var a, b,
                key, msg, type = 'eq',
                selector2, elem2, field2;

            if (params.length === 1) {
                key = params[0];
            } else {
                type = params[0];
                key = params[1];
            }

            selector2 = key.charAt(0) === '#' ? key : ':input[name="' + key + '"]';
            elem2 = this.$el.find(selector2)[0];
            // If the compared field is not exist
            if (!elem2) return;
            field2 = this.getField(elem2);
            a = element.value;
            b = elem2.value;

            if (!field.init_match) {
                this.$el.on('valid.field.' + NS, selector2, function() {
                    $(element).trigger('validate');
                });
                field.init_match = field2.init_match = 1;
            }

            // If both fields are blank
            if (!field.required && a === "" && b === "") {
                return null;
            }

            if (params[2]) {
                if (params[2] === 'date') {
                    a = parseDate(a);
                    b = parseDate(b);
                } else if (params[2] === 'time') {
                    a = +a.replace(':', '');
                    b = +b.replace(':', '');
                }
            }

            // If the compared field is incorrect, we only ensure that this field is correct.
            if (type !== "eq" && !isNaN(+a) && isNaN(+b)) {
                return true;
            }

            msg = this.messages.match[type].replace('{1}', field2.display || key);

            switch (type) {
                case 'lt':
                    return (+a < +b) || msg;
                case 'lte':
                    return (+a <= +b) || msg;
                case 'gte':
                    return (+a >= +b) || msg;
                case 'gt':
                    return (+a > +b) || msg;
                case 'neq':
                    return (a !== b) || msg;
                default:
                    return (a === b) || msg;
            }
        },

        /** range numbers
         * @example:
            range[0~99]    Number 0-99
            range[0~]      Number greater than or equal to 0
            range[~100]    Number less than or equal to 100
         **/
        range: function(element, params) {
            return this.getRangeMsg(+element.value, params, 'range');
        },

        /** how many checkbox or radio inputs that checked
         * @example:
            checked;       no empty, same to required
            checked[1~3]   1-3 items
            checked[1~]    greater than 1 item
            checked[~3]    less than 3 items
            checked[3]     3 items
         **/
        checked: function(element, params, field) {
            if (!checkable(element)) return;

            var elem, count;

            count = this.$el.find('input[name="' + element.name + '"]').filter(function() {
                if (!elem && checkable(this)) elem = this;
                return !this.disabled && this.checked && $(this).is(':visible');
            }).length;

            if (!params) {
                return !!count || getDataMsg(elem, field, 'checked') || this.messages.required;
            } else {
                return this.getRangeMsg(count, params, 'checked');
            }
        },

        /** length of a characters (You can pass the second parameter "true", will calculate the length in bytes)
         * @example:
            length[6~16]        6-16 characters
            length[6~]          Greater than 6 characters
            length[~16]         Less than 16 characters
            length[~16, true]   Less than 16 characters, non-ASCII characters calculating two-character
         **/
        length: function(element, params) {
            var value = element.value,
                len = (params[1] ? value.replace(rDoubleBytes, 'xx') : value).length;

            if (params && params[0].charAt(0) === '~') {
                params[0] = '0' + params[0];
            }

            return this.getRangeMsg(len, params, 'length', (params[1] ? '_2' : ''));
        },

        /** remote validation
         *  remote([get:]url [, name1, [name2 ...]]);
         *  Adaptation three kinds of results (Front for the successful, followed by a failure):
                1. text:
                    ''  'Error Message'
                2. json:
                    {"ok": ""}  {"error": "Error Message"}
                3. json wrapper:
                    {"status": 1, "data": {"ok": ""}}  {"status": 1, "data": {"error": "Error Message"}}
         * @example:
            The simplest:       remote(path/to/server.php);
            With parameters:    remote(path/to/server.php, name1, name2, ...);
            By GET:             remote(get:path/to/server.php, name1, name2, ...);
         */
        remote: function(element, params) {
            if (!params) return;

            var me = this,
                arr = rAjaxType.exec(params[0]),
                url = arr[2],
                type = (arr[1] || 'POST').toUpperCase(),
                search,
                data = {};

            data[element.name] = element.value;
            // There are extra fields
            if (params[1]) {
                $.map(params.slice(1), function(name) {
                    data[$.trim(name)] = me.$el.find(':input[name="' + name + '"]').val();
                });
            }
            data = $.param(data);

            if (type === 'POST') {
                search = url.indexOf('?');
                if (search !== -1) {
                    data += '&' + url.substring(search + 1, url.length);
                    url = url.substring(0, search);
                }
            }

            // Asynchronous validation need to return jqXHR objects
            return $.ajax({
                url: url,
                type: type,
                data: data,
                async: true,
                cache: false
            });
        },

        /** filters, direct filtration without prompting error (support custom regular expressions)
         * @example:
         *  filter          filter "<>"
         *  filter(regexp)  filter the "regexp" matched characters
         */
        filter: function(element, params) {
            element.value = element.value.replace(params ? (new RegExp("[" + params[0] + "]", "g")) : rUnsafe, '');
        }
    });


    /** @interface: config
     *  @usage:
        .config( obj )
     */
    Validator.config = function(obj) {
        $.each(obj, function(k, o) {
            if (k === 'rules') {
                new Rules(o);
            } else if (k === 'messages') {
                new Messages(o);
            } else {
                defaults[k] = o;
            }
        });
    };

    /** @interface: setTheme
     *  @usage:
        .setTheme( name, obj )
        .setTheme( obj )
     */
    Validator.setTheme = function(name, obj) {
        if (isObject(name)) {
            $.each(name, function(i, o) {
                themes[i] = o;
            });
        } else if (isString(name) && isObject(obj)) {
            themes[name] = obj;
        }
    };

    $[NS] = Validator;

})($ || jQuery);;(function($) {
    /* Global configuration
     */
    $.validator.config({
        //stopOnError: false,
        //theme: 'yellow_right',
        defaultMsg: "{0}格式不正确",
        loadingMsg: "正在验证...",

        // Custom rules
        rules: {
            digits: [/^\d*$/, "请输入数字"],
            letters: [/^[a-z]*$/i, "{0}只能输入字母"],
            tel: [/^(?:(?:0\d{2,3}[- ]?[1-9]\d{6,7})|(?:[48]00[- ]?[1-9]\d{6}))$/, "电话格式不正确"],
            mobile: [/^1[3-9]\d{9}$/, "手机号格式不正确"],
            email: [/^(?:[a-z0-9]+[_\-+.]?)*[a-z0-9]+@(?:([a-z0-9]+-?)*[a-z0-9]+\.)+([a-z]{2,})+$/i, "邮箱格式不正确"],
            qq: [/^[1-9]\d{4,}$/, "QQ号格式不正确"],
            date: [/^\d{4}-\d{1,2}-\d{1,2}$/, "请输入正确的日期,例:yyyy-mm-dd"],
            time: [/^([01]\d|2[0-3])(:[0-5]\d){1,2}$/, "请输入正确的时间,例:14:30或14:30:00"],
            ID_card: [/^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])((\d{4})|\d{3}[A-Z])$/, "请输入正确的身份证号码"],
            url: [/^(https?|ftp):\/\/[^\s]*$/i, "网址格式不正确"],
            postcode: [/^[1-9]\d{5}$/, "邮政编码格式不正确"],
            chinese: [/^[\u0391-\uFFE5]+$/, "请输入中文"],
            username: [/^\w{3,20}$/, "请输入3-12位数字、字母、下划线"],
            password: [/^[0-9a-zA-Z]{6,16}$/, "密码由6-16位数字、字母组成"],
            accept: function(element, params) {
                if (!params) return true;
                var ext = params[0];
                return (ext === '*') ||
                    (new RegExp(".(?:" + (ext || "png|jpg|jpeg|gif") + ")$", "i")).test(element.value) ||
                    this.renderMsg("只接受{1}后缀", ext.replace('|', ','));
            }

        }
    });

    /* Default error messages
     */
    $.validator.config({
        messages: {
            required: "{0}不能为空",
            remote: "{0}已被使用",
            integer: {
                '*': "请输入整数",
                '+': "请输入正整数",
                '+0': "请输入正整数或0",
                '-': "请输入负整数",
                '-0': "请输入负整数或0"
            },
            match: {
                eq: "{0}与{1}不一致",
                neq: "{0}与{1}不能相同",
                lt: "{0}必须小于{1}",
                gt: "{0}必须大于{1}",
                lte: "{0}必须小于或等于{1}",
                gte: "{0}必须大于或等于{1}"
            },
            range: {
                rg: "请输入{1}到{2}的数",
                gt: "请输入大于或等于{1}的数",
                lt: "请输入小于或等于{1}的数"
            },
            checked: {
                eq: "请选择{1}项",
                rg: "请选择{1}到{2}项",
                gt: "请至少选择{1}项",
                lt: "请最多选择{1}项"
            },
            length: {
                eq: "请输入{1}个字符",
                rg: "请输入{1}到{2}个字符",
                gt: "请输入大于{1}个字符",
                lt: "请输入小于{1}个字符",
                eq_2: "",
                rg_2: "",
                gt_2: "",
                lt_2: ""
            }
        }
    });

    /* Themes
     */
    var TPL_ARROW = '<span class="n-arrow"><b>◆</b><i>◆</i></span>';
    $.validator.setTheme({
        'simple_right': {
            formClass: 'n-simple',
            msgClass: 'n-right'
        },
        'simple_bottom': {
            formClass: 'n-simple',
            msgClass: 'n-bottom'
        },
        'yellow_top': {
            formClass: 'n-yellow',
            msgClass: 'n-top',
            msgArrow: TPL_ARROW
        },
        'yellow_right': {
            formClass: 'n-yellow',
            msgClass: 'n-right',
            msgArrow: TPL_ARROW
        },
        'yellow_right_effect': {
            formClass: 'n-yellow',
            msgClass: 'n-right',
            msgArrow: TPL_ARROW,
            msgShow: function($msgbox, type) {
                var $el = $msgbox.children();
                if ($el.is(':animated')) return;
                if (type === 'error') {
                    $el.css({
                        left: '20px',
                        opacity: 0
                    }).delay(100).show().stop().animate({
                        left: '-4px',
                        opacity: 1
                    }, 150).animate({
                        left: '3px'
                    }, 80).animate({
                        left: 0
                    }, 80);
                } else {
                    $el.css({
                        left: 0,
                        opacity: 1
                    }).fadeIn(200);
                }
            },
            msgHide: function($msgbox, type) {
                var $el = $msgbox.children();
                $el.stop().delay(100).show().animate({
                    left: '20px',
                    opacity: 0
                }, 300, function() {
                    $msgbox.hide();
                });
            }
        }
    });
})($ || jQuery);;
(function($) {
    var doc = $(document),
        stickyPrefix = ["-webkit-", "-ms-", "-o-", "-moz-", ""],
        guid = 0,

        // 只需判断是否是 IE 和 IE6
        ua = (window.navigator.userAgent || "").toLowerCase(),
        isIE = ua.indexOf("msie") !== -1,
        isIE6 = ua.indexOf("msie 6") !== -1;

    var isPositionStickySupported = checkPositionStickySupported(),
        isPositionFixedSupported = checkPositionFixedSupported();


    // Sticky
    // 实现侧边栏跟随滚动的效果
    // 当滚动条滚动到一定距离时，指定区域变为 sticky 效果开始跟随页面
    // ---
    function Sticky(options) {
        this.options = $.extend({}, options);
        this.elem = $(this.options.element);        
        this.callback = options.callback || function() {};
        this.marginTop = options.marginTop || 0;
        this._stickyId = guid++;
    }

    $.extend(Sticky.prototype, {
        render: function () {
        var self = this;

        // 一个元素只允许绑定一次
        if (!this.elem.length || this.elem.data('bind-sticked')) {
            return;
        }

        // 记录元素原来的位置
        this._originTop = this.elem.offset().top;

        // 表示需要 fixed，不能用 position:sticky 来实现
        if (this.marginTop === Number.MAX_VALUE) {
            var callFix = true;    // 表示调用了 sticky.fix
            this.marginTop = this._originTop;
        }

        this._originStyles = {
            position: null,
            top: null,
            left: null
        };

        // 保存原有的样式
        for (var style in this._originStyles) {
            if (this._originStyles.hasOwnProperty(style)) {
                this._originStyles[style] = this.elem.css(style);
            }
        }

        var scrollFn;
        // sticky.fix 无法用 sticky 方式来实现
        if ($.sticky.isPositionStickySupported && !callFix) {
            scrollFn = this._supportSticky;

            // 直接设置 sticky 的样式属性
            var tmp = "";
            for (var i = 0; i < stickyPrefix.length; i++) {
                tmp += "position:" + stickyPrefix[i] + "sticky;";
            }
            this.elem[0].style.cssText += tmp + "top: " + this.marginTop + "px;";


        } else if ($.sticky.isPositionFixedSupported) {
            scrollFn = this._supportFixed;            
        } else {
            scrollFn = this._supportAbsolute;   // ie6
            // avoid floatImage Shake for IE6
            // see: https://github.com/lifesinger/lifesinger.
            //      github.com/blob/master/lab/2009/ie6sticked_position_v4.html
            $("<style type='text/css'> * html" +
              "{ background:url(null) no-repeat fixed; } </style>").appendTo("head");
        }

        // 先运行一次
        //scrollFn.call(this);

        // 监听滚动事件
        // fixed 是本模块绑定的滚动事件的命名空间
        $(window).on('scroll.' + this._stickyId, function () {
            if (!self.elem.is(':visible')) {
                return;
            }
            scrollFn.call(self);
        });

        // 标记已定位
        this.elem.data('bind-sticked', true);
        return this;
    },

    _supportFixed: function () {
        // 计算元素距离当前窗口上方的距离
        var distance = this._originTop - doc.scrollTop();

        // 当距离小于等于预设的值时
        // 将元素设为 fix 状态
        if (!this.elem.data('sticked') && distance <= this.marginTop) {
            this._addPlaceholder();

            this.elem.css({
                position: 'fixed',
                top: this.marginTop,
                left: this.elem.offset().left
            });
            this.elem.data('sticked', true);
            this.callback.call(this, true);
        } else if (this.elem.data('sticked') && distance > this.marginTop) {
            this._restore();
        }
    },

    _supportAbsolute: function () {
        // 计算元素距离当前窗口上方的距离
        var distance = this._originTop - doc.scrollTop();

        // 当距离小于等于预设的值时
        // 将元素设为 fixed 状态
        if (distance <= this.marginTop) {
            // 状态变化只有一次
            if (!this.elem.data('sticked')) {
                this._addPlaceholder();
                this.elem.data('sticked', true);
                this.callback.call(this, true);
            }
            this.elem.css({
                position: 'absolute',
                top: this.marginTop + doc.scrollTop()
            });
        } else if (this.elem.data('sticked') && distance > this.marginTop) {
            this._restore();
        }
    },

    _supportSticky: function () {        
        // 由于 position:sticky 尚未提供接口判断状态
        // 因此仍然要计算 distance 以便进行回调
        var distance = this._originTop - doc.scrollTop();

        if (!this.elem.data('sticked') && distance <= this.marginTop) {
            this.elem.data('sticked', true);
            this.callback.call(this, true);            
        } else if (this.elem.data('sticked') && distance > this.marginTop) {
            this.callback.call(this, false);    // 不需要恢复样式和去占位符
        }
    },

    _restore: function () {
        this._removePlaceholder();

        // 恢复原有的样式
        this.elem.css(this._originStyles);
        
        // 设置元素状态
        this.elem.data('sticked', false);
    
        this.callback.call(this, false);
    },

    _addPlaceholder: function() {
        var need = false;
        var position = this.elem.css("position");

        if (position === 'static' || position === 'relative') {
            need = true;
        }
        if (this.elem.css("display") !== "block") {
            need = false;
        }

        if (need) {
            // 添加占位符
            this._placeholder = $('<div style="visibility:hidden;margin:0;padding:0;"></div>');
            this._placeholder.width(this.elem.outerWidth(true))
                .height(this.elem.outerHeight(true))
                .css("float", this.elem.css("float")).insertAfter(this.elem);
        }
    },

    _removePlaceholder: function() {
        // 如果后面有占位符的话, 删除掉
        this._placeholder && this._placeholder.remove();
    },

    destory: function () {
        this._restore();
        this.elem.data("bind-sticked", false);
        $(window).off('scroll.' + this._stickyId);
    }
})

   



    // 接口们
    // ---

    //module.exports = sticky;

    var sticky = $.sticky = function (elem, marginTop, callback) {
        return (new Sticky({
            element: elem,
            marginTop: marginTop || 0,
            callback: callback
        })).render();
    }
    
    // sticky.stick(elem, marginTop, callback)
   $.sticky.stick = $.sticky;

    // sticky.fix(elem)
    $.sticky.fix =  function (elem) {
        return (new Sticky({
            element: elem,
            marginTop: Number.MAX_VALUE // 无穷大的 marginTop 即表示元素永远 fixed
        })).render();
    };

    // 便于写测试用例
    $.sticky.isPositionStickySupported = isPositionStickySupported;
    $.sticky.isPositionFixedSupported = isPositionFixedSupported;

    // Helper
    // ---
    function checkPositionFixedSupported() {
        return !isIE6;
    }

    function checkPositionStickySupported() {
        if (isIE) return false;

        var container = doc[0].body;

        if (doc[0].createElement && container && container.appendChild && container.removeChild) {
            var isSupported,
                el = doc[0].createElement("div"),
                getStyle = function (st) {
                    if (window.getComputedStyle) {
                        return window.getComputedStyle(el).getPropertyValue(st);
                    } else {
                        return el.currentStyle.getAttribute(st);
                    }
                };

            container.appendChild(el);

            for (var i = 0; i < stickyPrefix.length; i++) {
                el.style.cssText = "position:" + stickyPrefix[i] + "sticky;visibility:hidden;";
                if (isSupported = getStyle("position").indexOf("sticky") !== -1) break;
            }

            el.parentNode.removeChild(el);
            return isSupported;
        }
    }
    $.sticky = window.sticky = sticky;
})($ || jQuery);

;(function($) {
    if (typeof $.fn.btnAddRow == "undefined") {
        var ExpandableTableList = [],
        className = "ExpandableTable";
        function ExpandableTable(target, maxRow) {
            if (target) this.init(target, maxRow);
        }
        ExpandableTable.prototype.init = function(target, maxRow) {
            ExpandableTableList.push(this);
            this.target = $(target).data(className, this);
            this.maxRow = maxRow;
            this.seed = Math.round(Math.random() * 10000);
            this.onAddRow = [];
            return this
        };
        ExpandableTable.prototype.live = function() {
            if (!this.goLive) {
                var t = this;
                this.update();
                $(".addRow" + this.seed).live("click",function(e) {
                    e.preventDefault();
                    
                    var newRow = t.addRow();
                    if(t.afterAddRow && $.isFunction(t.afterAddRow)) {
                        t.afterAddRow(newRow);
                    }
                });
                $(".delRow" + this.seed).live("click", function(e) {
                    e.preventDefault();
                    
                    var oj = $(this).closest("." + t.cloneClass),
                    o = oj.clone();
                    if(t.beforeDelRow && $.isFunction(t.beforeDelRow)) {
                        t.beforeDelRow(oj);
                    }
                    oj.hide().find("*").each(function(i, v) {
                        if ($(v).data("destroy"));
                        for (var k in $(v).data("destroy")) {
                            $(v).data("destroy")[k](v);
                        }
                    });
                    
                    oj.remove();
                    $(".addRow" + t.seed).attr("disabled", false);
                    t.update();
                    if (t.deleteCallBack && $.isFunction(t.deleteCallBack)) t.deleteCallBack(o);
                });
                $(".autoAdd" + this.seed).live("keyup", function() {
                    if ((this.nodeName.toLowerCase() == "textarea" && $(this).html() != "") || (this.nodeName.toLowerCase() == "textarea" && $(this).val() != "") || (this.nodeName.toLowerCase() == "input" && $(this).val() != "")) t.addRow();
                });
                this.goLive = true;
            }
            return this
        };
        ExpandableTable.prototype.updateRowNumber = function() {
            var t = this;
            if (t.rowNumColumn) {
                $("." + t.cloneClass, t.target).each(function(j, u) {
                    var n = j + 1;
                    $("." + t.rowNumColumn, $(u)).each(function(i, v) {
                        if ($(v).is(":text, textarea, select, div, a")) $(v).val(n);
                        else $(v).text(n);
                    });
                });
            }
            return t
        };
        ExpandableTable.prototype.updateName = function() {
            /*var t=this;
		var name =  t.cloneName;
			$("."+t.cloneClass,this.target).each(function(i, u){
				$('input,textarea', $(u)).each(function(index){
					var $this = $(this)
					//var name = $this.attr('name'), val = $this.val();
					if (name) $this.attr('name', name[index] + i);
					//if (val && val.indexOf("#index#") >= 0) $this.val(val.replace('#index#',i+1));
				});
			});*/
            if(!this.customName) {
                $("." + this.cloneClass, this.target).each(function(j, t) {
                     $("input,textarea, select, div, a", $(t)).each(function(i, v) {
                        if ($(v).attr("name") != undefined && $(v).attr("name") != "") {
                            var newName = $(v).attr("name").replaceSuffix(j);
                            $(v).attr("name", newName);
                        }
                    });
                });
            }

            return this
        };
        ExpandableTable.prototype.updateInputBoxName = function() {
            $("." + this.cloneClass, this.target).each(function(j, t) {
                var n = j + 1;
                $("input,textarea, select, div, a", $(t)).each(function(i, v) {
                    if ($(v).attr("name") != "") {
                        var newName = $(v).attr("name").replace(/\d+$/, "") + n;
                        $(v).attr("name", newName);
                    }
                });
            });
            return this
        };
        ExpandableTable.prototype.updateInputBoxId = function() {
            var t = this;
            $("." + t.cloneClass, this.target).each(function(j, u) {
                var n = j + 1;
                $("input,textarea, select, div, a", $(u)).each(function(i, v) {
                    if ($(v).attr("id") != "") {
                        var newId = $(v).attr("id").replace(/\d+$/, "") + n;
                        $(v).removeAttr("id").attr("id", newId);
                    }
                });
            });
            return this
        };
        ExpandableTable.prototype.updateOddRowCSS = function() {
            if (this.oddRowCSS) {
                this.target.find("." + this.oddRowCSS).removeClass(this.oddRowCSS);
                this.target.find("tr:odd").addClass(this.oddRowCSS);
            }
            return this
        };
        ExpandableTable.prototype.updateEvenRowCSS = function() {
            if (this.evenRowCSS) {
                this.target.find("." + this.evenRowCSS).removeClass(this.evenRowCSS);
                this.target.find("tr:even").addClass(this.evenRowCSS);
            }
            return this
        };
        ExpandableTable.prototype.updateRowCount = function() {
            if (this.displayRowCountTo) {
                var count = $("." + this.cloneClass, this.target).size();
                $("." + this.displayRowCountTo, this.target).each(function(i, v) {
                    var nn = v.nodeName.toLowerCase();
                    if (nn == "input" || nn == "textarea") $(v).val(count);
                    else $(v).html(count);
                });
            }
            return this
        };
        ExpandableTable.prototype.update = function() {
            var t = this;
            this.delRowButtons = $(".delRow" + this.seed, this.target);
            if (this.delRowButtons.size() == 1) this.delRowButtons.hide();
            else {
                if (this.autoAddRow) this.delRowButtons.not(":last").show();
                else this.delRowButtons.show();
            }
            if (this.autoAddRow) {
                this.target.find(".autoAdd" + this.seed).removeClass("autoAdd" + t.seed);
                this.target.find("." + t.cloneClass + ":last").find("input,textarea, select, div, a").addClass("autoAdd" + this.seed);
            }
            if (this.inputBoxAutoNumber) {
                this.updateInputBoxName();
                this.updateInputBoxId();
            }
            if (this.inputBoxAutoId) {
                this.updateInputBoxId();
            }
            if (this.hideFirstOnly && this.hideFirstOnly != "") {
                $("." + this.cloneClass).eq(0).find("." + this.hideFirstOnly).hide();
                $("." + this.cloneClass).not(":first").find("." + this.hideFirstOnly).show();
            }
            if (this.showFirstOnly && this.showFirstOnly != "") {
                $("." + this.cloneClass).eq(0).find("." + this.showFirstOnly).show();
                $("." + this.cloneClass).not(":first").find("." + this.showFirstOnly).hide();
            }
            this.updateRowNumber().updateName().updateOddRowCSS().updateEvenRowCSS().updateRowCount();
            return this
        };
        ExpandableTable.prototype.addRow = function() {
            var newRow;
            if (!this.maxRow || (this.maxRow && $("." + this.cloneClass).size() < this.maxRow)) {
                this.delRowButtons.show();
                var lastRow = $("." + this.cloneClass + ":last", this.target);
                this.newRow = newRow = lastRow.clone();
                newRow.find("input:text").val("");
                newRow.find("textarea").text("");
                if (this.autoAddRow) newRow.find("." + this.cloneClass).hide();
                newRow.insertAfter(lastRow);
                if (this.ignoreClass && this.ignoreClass != "") {
                    newRow.find("." + this.ignoreClass).each(function() {
                        if (this.nodeName.toLowerCase() == "input" && ($(this).attr("type").toLowerCase() == "text" || $(this).attr("type").toLowerCase() == "hidden")) $(this).val("");
                        else if (this.nodeName.toLowerCase() == "td") $(this).html(" ");
                        else if ($(this).html() != "") $(this).text("");
                    });
                }
                newRow.find("input:hidden").not("." + this.cloneClass).val("");
                if (this.hideFirstOnly && this.hideFirstOnly != "") {
                    newRow.find("." + this.hideFirstOnly).show();
                }
                if (this.showFirstOnly && this.showFirstOnly != "") {
                    newRow.find("." + this.hideFirstOnly).hide();
                }
                if (this.maxRow && $("." + this.cloneClass).size() >= this.maxRow) $(".addRow" + this.seed).attr("disabled", true);
                this.target.find("." + this.cloneClass + ":first").closest("tr").find("*").each(function(i, v) {
                    if ($(this).data("init")) {
                        var jObj = newRow.find("*").eq(i),
                        obj = jObj[0];
                        jObj.data("init", {});
                        for (var k in $(this).data("init")) {
                            jObj.data("init")[k] = $(this).data("init")[k];
                            jObj.data("init")[k](obj);
                        }
                    }
                });
                this.update();
            }
            if (this.addCallBack && $.isFunction(this.addCallBack)) this.addCallBack(newRow);
            return newRow
        };
        $.fn.btnAddRow = $.fn.tableAutoAddRow = function(options, func) {
            var callBack;
            if (typeof options == "object") callBack = (func && $.isFunction(func)) ? func: null;
            else callBack = (options && $.isFunction(options)) ? options: null;
            options = $.extend({
                maxRow: null,
                ignoreClass: null,
                rowNumColumn: null,
                beforeDelRow: null,
                afterAddRow: null,
                tableId: null,
                customName: false,
                cloneName: [],
                autoAddRow: false,
                oddRowCSS: null,
                evenRowCSS: null,
                inputBoxAutoNumber: false,
                inputBoxAutoId: false,
                displayRowCountTo: null,
                maxRowAttr: null,
                hideFirstOnly: null,
                showFirstOnly: null,
                cloneClass: null,
                evenRowAttr: null,
                oddRowAttr: null,
                rowCountAttr: null,
                autoNumAttr: null,
                autoIdAttr: null
            },
            options);
            this.each(function() {
                var tbl, etbl, cloneClass;
                if (typeof options.cloneClass == "string" && options.cloneClass != "") {
                    if ($(this).closest("table").find("." + options.cloneClass).size() > 0) {
                        tbl = $(this).closest("table");
                        cloneClass = options.cloneClass;
                    } else if ($(this).closest("." + options.cloneClass).size() > 0) {
                        tbl = $(this).closest("." + options.cloneClass).closest("table");
                        cloneClass = options.cloneClass;
                    } else {
                        tbl = (this.nodeName.toLowerCase() == "table") ? $(this) : $(this).closest("table");
                    }
                } else {
                    tbl = (this.nodeName.toLowerCase() == "table") ? $(this) : $(this).closest("table");
                }
                if (options.maxRowAttr && typeof $(this).attr(options.maxRowAttr) != "undefined") options.maxRow = $(this).attr(options.maxRowAttr);
                if (options.oddRowAttr && typeof $(this).attr(options.oddRowAttr) != "undefined") options.oddRowCSS = $(this).attr(options.oddRowAttr);
                if (options.evenRowAttr && typeof $(this).attr(options.evenRowAttr) != "undefined") options.evenRowCSS = $(this).attr(options.evenRowAttr);
                if (options.rowCountAttr && typeof $(this).attr(options.rowCountAttr) != "undefined") options.displayRowCountTo = $(this).attr(options.rowCountAttr);
                if (options.autoNumAttr && typeof $(this).attr(options.autoNumAttr) != "undefined") options.inputBoxAutoNumber = $(this).attr(options.autoNumAttr);
                if (options.autoIdAttr && typeof $(this).attr(options.autoIdAttr) != "undefined") options.inputBoxAutoId = $(this).attr(options.autoIdAttr);
                if (tbl.size() > 0) {
                    if (typeof tbl.data(className) === "undefined" || tbl.data(className) === null) {
                        etbl = new ExpandableTable(tbl, options.maxRow);
                        if (this.nodeName.toLowerCase() != "table") $(this).addClass("addRow" + etbl.seed).data(className, etbl);
                    } else {
                        if (this.nodeName.toLowerCase() != "table") $(this).addClass("addRow" + tbl.data(className).seed).data(className, tbl.data(className));
                    }
                    if ($(this).data(className)) {
                        etbl = $(this).data(className);
                    }
                    etbl.maxRow = options.maxRow;
                    etbl.maxRow = options.maxRow;
                    etbl.ignoreClass = options.ignoreClass;
                    etbl.rowNumColumn = options.rowNumColumn;
                    etbl.customName = options.customName;
                    etbl.beforeDelRow = options.beforeDelRow;
                    etbl.afterAddRow = options.afterAddRow;
                    etbl.tableId = options.tableId;
                    etbl.cloneName = options.cloneName;
                    etbl.oddRowCSS = options.oddRowCSS;
                    etbl.evenRowCSS = options.evenRowCSS;
                    etbl.autoAddRow = options.autoAddRow;
                    etbl.inputBoxAutoNumber = options.inputBoxAutoNumber;
                    etbl.displayRowCountTo = options.displayRowCountTo;
                    etbl.hideFirstOnly = options.hideFirstOnly;
                    etbl.showFirstOnly = options.showFirstOnly;
                    if (typeof cloneClass == "string" && etbl.cloneClass != cloneClass) {
                        etbl.cloneClass = cloneClass;
                    } else {
                        etbl.cloneClass = "cloneRow" + etbl.seed;
                    }
                    etbl.updateRowCount();
                    etbl.addCallBack = callBack;
                };
            });
            for (var i = 0; i < ExpandableTableList.length; i++) {
                if (!ExpandableTableList[i].goLive) {
                    ExpandableTableList[i].live();
                }
            }
        };
        $.fn.btnDelRow = function(options, func) {
            var callBack;
            if (typeof options == "object") callBack = (func && $.isFunction(func)) ? func: null;
            else callBack = (options && $.isFunction(options)) ? options: null;
            options = $.extend({
                cloneClass: null
            },
            options);
            this.each(function() {
                var etbl, tbl, cloneClass;
                if ($(this).closest("." + options.cloneClass).size() > 0) {
                    tbl = $(this).closest("." + options.cloneClass).closest("table");
                    cloneClass = options.cloneClass;
                } else {
                    tbl = $(this).hide().closest("table");
                }
                if (tbl.size() > 0) {
                    if (typeof tbl.data(className) === "undefined" || tbl.data(className) === null) {
                        etbl = new ExpandableTable(tbl);
                        $(this).addClass("delRow" + etbl.seed).data(className, etbl);
                    } else {
                        $(this).addClass("delRow" + tbl.data(className).seed).data(className, tbl.data(className));
                    }
                    if ($(this).data(className)) {
                        etbl = $(this).data(className);
                        etbl.deleteCallBack = callBack;
                    }
                    if (! (typeof etbl.cloneClass == "string" && etbl.cloneClass != "")) {
                        etbl.cloneClass = "cloneRow" + etbl.seed;
                        $(this).closest("tr").addClass("cloneRow" + etbl.seed);
                    } else if (typeof cloneClass == "string") {
                        etbl.cloneClass = cloneClass;
                    } else {
                        etbl.cloneClass = "cloneRow" + etbl.seed;
                        $(this).closest("tr").addClass("cloneRow" + etbl.seed);
                    }
                    etbl.update();
                }
            });
            for (var i = 0; i < ExpandableTableList.length; i++) {
                if (!ExpandableTableList[i].goLive) {
                    ExpandableTableList[i].live();
                }
            }
        };

        $.extend(String.prototype, {
            replaceSuffix: function(index) {
                return this.replace(/\[[0-9]+\]/, '[' + index + ']').replace('#index#', index);
            }
        })
    }
})($ || jQuery);;/*!
 * Accordion
 */

(function($) {

    $.fn.accordion = function(config) {
        var defaults = {
            "handle": "h3",
            "panel": ".panel",
            "speed": 200,
            "easing": "swing",
            "canOpenMultiple": false,
            "canToggle": true,
            "activeClassPanel": "open",
            "activeClassLi": "current",
            "lockedClass": "locked",
            "loadingClass": "fn-hide"
        };

        if (config) {
            $.extend(defaults, config);
        }

        this.each(function() {
            var accordion = $(this),
                reset = {
                    height: 0,
                    marginTop: 0,
                    marginBottom: 0,
                    paddingTop: 0,
                    paddingBottom: 0
                },
                panels = accordion.find(">li>" + defaults.panel).each(function() {
                    var el = $(this);
                    el.removeClass(defaults.loadingClass).css("visibility", "hidden").data("dimensions", {
                        marginTop: el.css("marginTop"),
                        marginBottom: el.css("marginBottom"),
                        paddingTop: el.css("paddingTop"),
                        paddingBottom: el.css("paddingBottom"),
                        height: this.offsetHeight - parseInt(el.css("paddingTop")) - parseInt(el.css("paddingBottom"))
                    }).bind("panel-open.accordion",
                        function(e, clickedLi) {
                            var panel = $(this);
                            clickedLi.addClass(defaults.activeClassLi);
                            panel.css($.extend({
                                    overflow: "hidden"
                                },
                                reset)).addClass(defaults.activeClassPanel).show().animate($.browser.msie && parseInt($.browser.version) < 8 ? panel.data("dimensions") : $.extend({
                                    opacity: 1
                                },
                                panel.data("dimensions")), {
                                duration: defaults.speed,
                                easing: defaults.easing,
                                queue: false,
                                complete: function(e) {
                                    if ($.browser.msie) {
                                        this.style.removeAttribute('filter');
                                    }
                                    $(this).removeAttr("style");
                                }
                            });
                        }).bind("panel-close.accordion",
                        function(e) {
                            var panel = $(this);
                            panel.closest("li").removeClass(defaults.activeClassLi);
                            panel.removeClass(defaults.activeClassPanel).css({
                                overflow: "hidden"
                            }).animate($.browser.msie && parseInt($.browser.version) < 8 ? reset : $.extend({
                                    opacity: 0
                                },
                                reset), {
                                duration: defaults.speed,
                                easing: defaults.easing,
                                queue: false,
                                complete: function(e) {
                                    if ($.browser.msie) {
                                        this.style.removeAttribute('filter');
                                    }
                                    panel.hide();
                                }
                            });
                        }).hide().css("visibility", "visible");

                    return el;
                }),
                handles = accordion.find(" > li > " + defaults.handle).wrapInner('<a class="accordion-opener" href="#open-panel" />');

            accordion.find(" > li." + defaults.activeClassLi + " > " + defaults.panel + ", > li." + defaults.lockedClass + " > " + defaults.panel).show().addClass(defaults.activeClassPanel);

            var active = accordion.find(" > li." + defaults.activeClassLi + ", > li." + defaults.lockedClass);

            if (!defaults.canToggle && active.length < 1) {
                accordion.find(" > li").first().addClass(defaults.activeClassLi).find(" > " + defaults.panel).addClass(defaults.activeClassPanel).show();
            }

            accordion.delegate(".accordion-opener", "click",
                function(e) {
                    e.preventDefault();
                    e.stopImmediatePropagation();

                    var clicked = $(this),
                        clickedLi = clicked.closest("li"),
                        panel = clickedLi.find(">" + defaults.panel).first(),
                        open = accordion.find(" > li:not(." + defaults.lockedClass + ") > " + defaults.panel + "." + defaults.activeClassPanel);

                    if (!clickedLi.hasClass(defaults.lockedClass)) {
                        if (panel.is(":visible")) {
                            if (defaults.canToggle) {
                                panel.trigger("panel-close");
                            }
                        } else {
                            panel.trigger("panel-open", [clickedLi]);
                            if (!defaults.canOpenMultiple) {
                                open.trigger("panel-close");
                            }
                        }
                    }
                });
        });

        return this;
    };
})($ || jQuery);;(function($) { 

	
	carousel = {
		
		conf: {	
			activeClass: 'current',
			circular: false,
			clonedClass: 'cloned',
			disabledClass: 'disabled',
			easing: 'swing',
			initialIndex: 0,
			item: '> *',
			items: '.items',
			keyboard: true,
			mousewheel: false,
			next: '.next',   
			prev: '.prev', 
			size: 1,
			speed: 400,
			vertical: false,
			touch: true,
			wheelSpeed: 0
		} 
	};
					
	// get hidden element's width or height even though it's hidden
	function dim(el, key) {
		var v = parseInt(el.css(key), 10);
		if (v) { return v; }
		var s = el[0].currentStyle; 
		return s && s.width && parseInt(s.width, 10);	
	}

	function find(root, query) { 
		var el = $(query);
		return el.length < 2 ? el : root.parent().find(query);
	}
	
	var current;		
	
	// constructor
	function Carousel(root, conf) {   
		
		// current instance
		var self = this, 
			 fire = root.add(self),
			 itemWrap = root.children(),
			 index = 0,
			 vertical = conf.vertical;
				
		if (!current) { current = self; } 
		if (itemWrap.length > 1) { itemWrap = $(conf.items, root); }
		
		
		// in this version circular not supported when size > 1
		if (conf.size > 1) { conf.circular = false; } 
		
		// methods
		$.extend(self, {
				
			getConf: function() {
				return conf;	
			},			
			
			getIndex: function() {
				return index;	
			}, 

			getSize: function() {
				return self.getItems().size();	
			},

			getNaviButtons: function() {
				return prev.add(next);	
			},
			
			getRoot: function() {
				return root;	
			},
			
			getItemWrap: function() {
				return itemWrap;	
			},
			
			getItems: function() {
				return itemWrap.find(conf.item).not("." + conf.clonedClass);	
			},
							
			move: function(offset, time) {
				return self.seekTo(index + offset, time);
			},
			
			next: function(time) {
				return self.move(conf.size, time);	
			},
			
			prev: function(time) {
				return self.move(-conf.size, time);	
			},
			
			begin: function(time) {
				return self.seekTo(0, time);	
			},
			
			end: function(time) {
				return self.seekTo(self.getSize() -1, time);	
			},	
			
			focus: function() {
				current = self;
				return self;
			},
			
			addItem: function(item) {
				item = $(item);
				
				if (!conf.circular)  {
					itemWrap.append(item);
					next.removeClass("done");
					
				} else {
					itemWrap.children().last().before(item);
					itemWrap.children().first().replaceWith(item.clone().addClass(conf.clonedClass)); 						
				}
				
				fire.trigger("onAddItem", [item]);
				return self;
			},
			
			
			/* all seeking functions depend on this */		
			seekTo: function(i, time, fn) {	
				
				// ensure numeric index
				if (!i.jquery) { i *= 1; }
				
				// avoid seeking from end clone to the beginning
				if (conf.circular && i === 0 && index == -1 && time !== 0) { return self; }
				
				// check that index is sane				
				if (!conf.circular && i < 0 || i > self.getSize() || i < -1) { return self; }
				
				var item = i;
			
				if (i.jquery) {
					i = self.getItems().index(i);	
					
				} else {
					item = self.getItems().eq(i);
				}  
				
				// onBeforeSeek
				var e = $.Event("onBeforeSeek"); 
				if (!fn) {
					fire.trigger(e, [i, time]);				
					if (e.isDefaultPrevented() || !item.length) { return self; }			
				}  
	
				var props = vertical ? {top: -item.position().top} : {left: -item.position().left};  
				
				index = i;
				current = self;  
				if (time === undefined) { time = conf.speed; }   
				
				itemWrap.animate(props, time, conf.easing, fn || function() { 
					fire.trigger("onSeek", [i]);		
				});	 
				
				return self; 
			}					
			
		});
				
		// callbacks	
		$.each(['onBeforeSeek', 'onSeek', 'onAddItem'], function(i, name) {
				
			// configuration
			if ($.isFunction(conf[name])) { 
				$(self).on(name, conf[name]); 
			}
			
			self[name] = function(fn) {
				if (fn) { $(self).on(name, fn); }
				return self;
			};
		});  
		
		// circular loop
		if (conf.circular) {
			
			var cloned1 = self.getItems().slice(-1).clone().prependTo(itemWrap),
				 cloned2 = self.getItems().eq(1).clone().appendTo(itemWrap);

			cloned1.add(cloned2).addClass(conf.clonedClass);
			
			self.onBeforeSeek(function(e, i, time) {
				
				if (e.isDefaultPrevented()) { return; }
				
				/*
					1. animate to the clone without event triggering
					2. seek to correct position with 0 speed
				*/
				if (i == -1) {
					self.seekTo(cloned1, time, function()  {
						self.end(0);		
					});          
					return e.preventDefault();
					
				} else if (i == self.getSize()) {
					self.seekTo(cloned2, time, function()  {
						self.begin(0);		
					});	
				}
				
			});

			// seek over the cloned item

			// if the carousel is hidden the calculations for seekTo position
			// will be incorrect (eg, if the carousel is inside an overlay).
			// ensure the elements are shown, calculate the correct position,
			// then re-hide the elements. This must be done synchronously to
			// prevent the hidden elements being shown to the user.

			// See: https://github.com/jquerytools/jquerytools/issues#issue/87

			var hidden_parents = root.parents().add(root).filter(function () {
				if ($(this).css('display') === 'none') {
					return true;
				}
			});
			if (hidden_parents.length) {
				hidden_parents.show();
				self.seekTo(0, 0, function() {});
				hidden_parents.hide();
			}
			else {
				self.seekTo(0, 0, function() {});
			}

		}
		
		// next/prev buttons
		var prev = find(root, conf.prev).click(function(e) { e.stopPropagation(); self.prev(); }),
			 next = find(root, conf.next).click(function(e) { e.stopPropagation(); self.next(); }); 
		
		if (!conf.circular) {
			self.onBeforeSeek(function(e, i) {
				setTimeout(function() {
					if (!e.isDefaultPrevented()) {
						prev.toggleClass(conf.disabledClass, i <= 0);
						next.toggleClass(conf.disabledClass, i >= self.getSize() -1);
					}
				}, 1);
			});
			
			if (!conf.initialIndex) {
				prev.addClass(conf.disabledClass);	
			}			
		}
			
		if (self.getSize() < 2) {
			prev.add(next).addClass(conf.disabledClass);	
		}
			
		// mousewheel support
		if (conf.mousewheel && $.fn.mousewheel) {
			root.mousewheel(function(e, delta)  {
				if (conf.mousewheel) {
					self.move(delta < 0 ? 1 : -1, conf.wheelSpeed || 50);
					return false;
				}
			});			
		}
		
		// touch event
		if (conf.touch) {
			var touch = {};
			
			itemWrap[0].ontouchstart = function(e) {
				var t = e.touches[0];
				touch.x = t.clientX;
				touch.y = t.clientY;
			};
			
			itemWrap[0].ontouchmove = function(e) {
				
				// only deal with one finger
				if (e.touches.length == 1 && !itemWrap.is(":animated")) {			
					var t = e.touches[0],
						 deltaX = touch.x - t.clientX,
						 deltaY = touch.y - t.clientY;
	
					self[vertical && deltaY > 0 || !vertical && deltaX > 0 ? 'next' : 'prev']();				
					e.preventDefault();
				}
			};
		}
		
		if (conf.keyboard)  {
			
			$(document).on("keydown.carousel", function(evt) {

				// skip certain conditions
				if (!conf.keyboard || evt.altKey || evt.ctrlKey || evt.metaKey || $(evt.target).is(":input")) { 
					return; 
				}
				
				// does this instance have focus?
				if (conf.keyboard != 'static' && current != self) { return; }
					
				var key = evt.keyCode;
			
				if (vertical && (key == 38 || key == 40)) {
					self.move(key == 38 ? -1 : 1);
					return evt.preventDefault();
				}
				
				if (!vertical && (key == 37 || key == 39)) {					
					self.move(key == 37 ? -1 : 1);
					return evt.preventDefault();
				}	  
				
			});  
		}
		
		// initial index
		if (conf.initialIndex) {
			self.seekTo(conf.initialIndex, 0, function() {});
		}
	} 

		
	// jQuery plugin implementation
	$.fn.carousel = function(conf) { 
			
		// already constructed --> return API
		var el = this.data("carousel");
		if (el) { return el; }		 

		conf = $.extend({}, carousel.conf, conf); 
		
		this.each(function() {			
			el = new Carousel($(this), conf);
			$(this).data("carousel", el);	
		});
		
		return conf.api ? el: this; 
		
	};
			
	
})(jQuery);
;/*jshint laxcomma:true, sub:true, browser:true, jquery:true, devel:true, eqeqeq:false */
;(function($, undefined) {
	"use strict";

	var pluginName = 'scojs_collapse';

	function Collapse($trigger, options) {
		this.options = $.extend({}, $.fn[pluginName].defaults, options);
		this.$trigger = $trigger;
		if (this.options.target !== null) {
			this.$target = $(this.options.target);
		} else {
			this.$target = this.$trigger[this.options.mode](this.options.collapseSelector);
		}
		if (this.options.parent !== null) {
			this.$parent = this.$trigger.closest(this.options.parent);
		}
	}

	$.extend(Collapse.prototype, {
		toggle: function() {
			//this.$target.toggleClass(this.options.activeTargetClass);
			if (this.options.ease) {
				//console.log(this.$target.slideToggle())
				this.$target[$.camelCase(this.options.ease + '-toggle')]();
			} else {
				this.$target.toggle();
			}
			if (this.$parent && !this.$trigger.hasClass(this.options.activeTriggerClass)) {
				this.$parent.find(this.options.triggerSelector + '.' + this.options.activeTriggerClass)[pluginName](this.options);
			}
			this.$trigger.toggleClass(this.options.activeTriggerClass);
			if(this.$trigger.hasClass(this.options.activeTriggerClass)){
				this.$trigger.html('<i class="iconfont icon-caret-down"></i>');
			}else {
				this.$trigger.html('<i class="iconfont icon-caret-up"></i>');
			}
			if (this.options.triggerHtml !== null) {
				var self = this;
				this.$trigger.html(function() {
					if (self.$trigger.hasClass(self.options.activeTriggerClass)) {
						return self.options.triggerHtml.on;
					} else {
						return self.options.triggerHtml.off;
					}
				});
			}
			return this;
		}
	});


	$.fn[pluginName] = function(options) {
		return this.each(function() {
			var obj;
			if (!(obj = $.data(this, pluginName))) {
				var $this = $(this)
					,data = $this.data()
					,opts = $.extend({}, $.fn[pluginName].defaults, options, data)
					;
				obj = new Collapse($this, opts);
				$.data(this, pluginName, obj);
			}
			obj.toggle();
		});
	};


	$[pluginName] = function(trigger, options) {
		if (typeof trigger === 'string') {
			trigger = $(trigger);
		}
		return new Collapse(trigger, options);
	};


	$.fn[pluginName].defaults = {
		parent: null                        // having a parent activates the accordion mode behaviour
		,target: null                       // the element to show/hide. If null, the target is chosen based on the "mode" selector
		,activeTriggerClass: 'active'       // class to add to the trigger in active (on) state
		//,activeTargetClass: 'in'          // class to add to the target in active (on) state
		,triggerHtml: null                  // if not null, this should be a hash like {off: 'more', on: 'less'}. This text is set on the trigger.
		,mode: 'next'                       // "next" means target is after trigger, "prev" means target is before trigger in html source
		,collapseSelector: '.collapsible'   // used in accordion to find out what to collapse when the current target expands or if the target is null
		,triggerSelector: '[data-trigger="collapse"]'		// used in accordion to find out all triggers
		,ease: 'slide'                      // the animation effect to use. Must support toggle (like slideToggle/fadeToggle or even empty string :))
	};

	$(document).on('click.' + pluginName, '[data-trigger="collapse"]', function(e) {
		e.preventDefault();
		$(this)[pluginName]({triggerSelector: e.handleObj.selector});
		if ($(this).is('a')) {
			return false;
		}
	});
})($ || jQuery);
;;
(function($, window, undefined) {

    var _ie6 = window.ActiveXObject && !window.XMLHttpRequest,
        _fn = function() {},
        _count = 0,
        _rurl = /^url:/,
        _load = /^load:/,
        _dom = /$/,
        _singleton,
        onKeyDown,
        document = window.document,
        expando = 'JDG' + (+new Date),

        dialogTpl = '<table class="ui_border">' + '<tbody>' + '<tr>' + '<td class="ui_lt"></td>' + '<td class="ui_t"></td>' + '<td class="ui_rt"></td>' + '</tr>' + '<tr>' + '<td class="ui_l"></td>' + '<td class="ui_c">' + '<div class="ui_inner">' + '<table class="ui_dialog">' + '<tbody>' + '<tr>' + '<td colspan="2">' + '<div class="ui_title_bar">' + '<div class="ui_title" unselectable="on"></div>' + '<div class="ui_title_buttons">' + '<a class="ui_min" href="javascript:void(0);" title="\u6700\u5C0F\u5316"><b class="ui_min_b"></b></a>' + '<a class="ui_res" href="javascript:void(0);" title="\u8FD8\u539F"><b class="ui_res_b"></b><b class="ui_res_t"></b></a>' + '<a class="ui_max" href="javascript:void(0);" title="\u6700\u5927\u5316"><b class="ui_max_b"></b></a>' + '<a class="ui_close" href="javascript:void(0);" title="\u5173\u95ED(esc\u952E)">\xd7</a>' + '</div>' + '</div>' + '</td>' + '</tr>' + '<tr>' + '<td class="ui_icon"></td>' + '<td class="ui_main">' + '<div class="ui_content"></div>' + '</td>' + '</tr>' + '<tr>' + '<td colspan="2">' + '<div class="ui_buttons"></div>' + '</td>' + '</tr>' + '</tbody>' + '</table>' + '</div>' + '</td>' + '<td class="ui_r"></td>' + '</tr>' + '<tr>' + '<td class="ui_lb"></td>' + '<td class="ui_b"></td>' + '<td class="ui_rb"></td>' + '</tr>' + '</tbody>' + '</table>',

        /*! 获取 lhgdialog 可跨级调用的最高层的 window 对象和 document 对象 */
        _doc,
        _top = (function(w) {
            try {
                _doc = w['top'].document; // 跨域|无权限
                _doc.getElementsByTagName; // chrome 浏览器本地安全限制
            } catch (e) {
                _doc = w.document;
                return w;
            };

            // 如果指定参数self为true则不跨框架弹出，或为框架集则无法显示第三方元素
            if (w['top'] == self || _doc.getElementsByTagName('frameset').length > 0) {
                _doc = w.document;
                return w;
            }

            return w['top'];
        })(window),

        _root = _doc.documentElement,
        _doctype = _doc.compatMode === 'BackCompat';

    _$doc = $(_doc),
    _$top = $(_top),
    _$html = $(_doc.getElementsByTagName('html')[0]);

    /*! 开启IE6 CSS背景图片缓存 */
    try {
        _doc.execCommand('BackgroundImageCache', false, true);
    } catch (e) {};

    _ie6 && (function(bg) {
        if (_$html.css(bg) !== 'fixed') {
            _$html.css({
                zoom: 1,
                // 避免偶尔出现body背景图片异常的情况
                backgroundImage: 'url(about:blank)',
                backgroundAttachment: 'fixed'
            });
        }
    })('backgroundAttachment');

    /*!----------------------------------以下为lhgdialog核心代码部分----------------------------------*/

    var lhgdialog = dialog = function(config) {
        config = config || {};

        var api, setting = lhgdialog.setting;

        // 合并默认配置
        for (var i in setting) {
            if (config[i] === undefined) config[i] = setting[i];
        }

        config.id = config.id || expando + _count;

        // 如果定义了id参数则返回存在此id的窗口对象
        api = lhgdialog.list[config.id];
        if (api) {
            if (config.content.indexOf('load') != -1 && config.cache == false) {
                $('#' + config.id).find('.ui_content').load(config.content.split('load:')[1]);
            }
            return api.zindex().focus();
        }

        // 按钮队列
        config.button = config.button || [];

        config.ok && config.button.push({
            id: 'ok',
            className: 'btn-primary',
            name: config.okVal,
            callback: config.ok,
            focus: config.focus
        });

        config.cancel && config.button.push({
            id: 'cancel',
            name: config.cancelVal,
            callback: config.cancel
        });

        // zIndex全局配置
        lhgdialog.setting.zIndex = config.zIndex;

        


        _count++;

        var result =  lhgdialog.list[config.id] = _singleton ? _singleton._init(config) : new lhgdialog.fn._init(config);
        
        $("#" + config.id).data("_dialog",result);
        return result;
    };

    lhgdialog.fn = lhgdialog.prototype = {
        constructor: lhgdialog,

        _init: function(config) {
            var that = this,
                DOM, content = config.content,
                isIfr = _rurl.test(content),
                isLoad = _load.test(content),
                isDom = _dom.test(content);
            that.opener = window;
            that.config = config;

            that.DOM = DOM = that.DOM || that._getDOM();
            that.closed = false;
            that.data = config.data;

            // 假如提示性图标为真默认不显示最小化和最大化按钮
            if (config.icon && !isIfr) {
                config.min = false;
                config.max = false;

                DOM.icon[0].style.display = '';
                DOM.icon[0].innerHTML = '<i class="iconfont ' + config.icon + '"></i>';
            } else DOM.icon[0].style.display = 'none';

            $(DOM.wrap).addClass(config.skin); // 多皮肤共存
            if(config.lock){
                $(DOM.wrap).attr('hasdialog', 'true');           
            }
            if (config.id) {
                $(DOM.wrap).attr('id', config.id);
            }
            DOM.rb[0].style.cursor = config.resize ? 'se-resize' : 'auto';
            DOM.title[0].style.cursor = config.drag ? 'move' : 'auto';
            DOM.max[0].style.display = config.max ? 'inline-block' : 'none';
            DOM.min[0].style.display = config.min ? 'inline-block' : 'none';
            DOM.close[0].style.display = config.cancel === false ? 'none' : 'inline-block'; //当cancel参数为false时隐藏关闭按钮
            DOM.content[0].style.padding = config.padding;
            that.button.apply(that, config.button);
            that.title(config.title).content(content, true, isIfr, isLoad, isDom).size(config.width, config.height).position(config.left, config.top).time(config.time)[config.show ? 'show' : 'hide'](true).zindex();
            config.focus && that.focus();
            config.lock && that.lock();
            that._addEvent();
            //if (isLoad) {
            $(DOM.content[0]).css({
                'width': config.width,
                'height': config.height,
                'overflow': 'auto'
            })
            //}
            _singleton = null;
            if (DOM.title[0].innerHTML == '') {
                DOM.content[0].style.padding = '25px 0 0';
                $(DOM.title[0]).hide();
            }
            // 假如加载的是单独页面的内容页config.init函数会在内容页加载完成后执行，这里就不执行了
            if (!isIfr && config.init) config.init.call(that, window);

            return that;
        },

        /**
   * 自定义按钮
   * @example
    button({
      name: 'login',
      callback: function(){},
      disabled: false,
      focus: true
    }, .., ..)
   */
        button: function() {
            var that = this,
                DOM = that.DOM,
                buttons = DOM.buttons[0],
                focusButton = 'btn',
                //focusButton = 'btn btn-small',
                listeners = that._listeners = that._listeners || {},
                ags = [].slice.call(arguments),
                i = 0,
                item,
                value,
                className,
                $button,
                id,
                isNewButton,
                button;

            for (; i < ags.length; i++) {
                item = ags[i];

                value = item.name;
                className = item.className;
                id = item.id || value;
                isNewButton = !listeners[id];
                button = !isNewButton ? listeners[id].elem : _doc.createElement('button');
                $button = $(button);
                $button.attr('type', 'button');
                $button.addClass('btn');

                if (!listeners[id]) listeners[id] = {};

                value && $button.html(value);
                /*if ($.browser.msie) {
                    var icon = $button.find('.iconfont');
                    if (icon.length > 0) {
                        icon.remove();
                    };
                }*/
                className && $button.addClass(className);

                if (item.callback) {
                    listeners[id].obj = button;
                    listeners[id].callback = item.callback
                }

                if (item.focus) {
                    that._focus && $(that._focus).removeClass(focusButton);
                    //that._focus = $(button).addClass(focusButton);
                    that.focus();
                }

                button[expando + 'callback'] = id;
                button.disabled = !! item.disabled;

                if (isNewButton) {
                    listeners[id].elem = button;
                    buttons.appendChild(button);
                }
            }

            buttons.style.display = ags.length ? '' : 'none';
            buttons.style.borderTop =  ags.length ? 'none' : '1px';
            that._ie6SelectFix();

            return that;
        },

        /**
         * 设置标题
         * @param {String, Boolean} 标题内容. 为false则隐藏标题栏
         * @return  {this}  如果无参数则返回对象本身
         */
        title: function(text) {
            if (text === undefined) return this;

            var DOM = this.DOM,
                border = DOM.border,
                title = DOM.title[0];

            if (text === false) {
                title.style.display = 'none';
                title.innerHTML = '';
                $(border).addClass('ui_state_tips');
            } else {
                title.style.display = '';
                title.innerHTML = text;
                $(border).removeClass('ui_state_tips');
            };

            return this;
        },

        /*!
         * 设置内容
         * @param {String}  内容 (如果内容前3个字符为‘url:’就加载单独页面的内容页)
         * @param   {Boolean}   是否为后增加的内容
         * @param   {Boolean}   是否使用iframe方式加载内容页
         * @return  {this}    如果无参数则返回对象本身
         */
        content: function(msg, add, frm, load, dom) {
            if (msg === undefined) return this;

            var that = this,
                config = that.config,
                DOM = that.DOM,
                wrap = DOM.wrap[0],
                width = wrap.offsetWidth,
                height = wrap.offsetHeight,
                left = parseInt(wrap.style.left),
                top = parseInt(wrap.style.top),
                cssWidth = wrap.style.width,
                $content = DOM.content,
                loading = lhgdialog.setting.content;
            // 假如内容中前3个字符为'url:'就加载相对路径的单独页面的内容页
            if (frm) {
                $content[0].innerHTML = loading;
                that._iframe(msg.split('url:')[1]);
            } else if (load) {
                $.ajaxSetup({
                    cache: false
                });
                config.param ? $content.load(msg.split('load:')[1], config.param) : $content.load(msg.split('load:')[1]);
            } else if (dom) {
                var domContent = $(msg).clone(true);
                domContent.show();
                $content.append(domContent);
            } else {
                $content.html(msg);
            }

            // 新增内容后调整位置
            if (!add) {
                width = wrap.offsetWidth - width;
                height = wrap.offsetHeight - height;
                left = left - width / 2;
                top = top - height / 2;
                wrap.style.left = Math.max(left, 0) + 'px';
                wrap.style.top = Math.max(top, 0) + 'px';
                if (cssWidth && cssWidth !== 'auto') wrap.style.width = wrap.offsetWidth + 'px';

                that._autoPositionType();
            }

            that._ie6SelectFix();

            return that;
        },

        /**
         *  尺寸
         *  @param  {Number, String}  宽度
         *  @param  {Number, String}  高度
         */
        size: function(width, height) {
            var that = this,
                DOM = that.DOM,
                wrap = DOM.wrap[0],
                style = DOM.main[0].style;

            wrap.style.width = 'auto';

            if (typeof width === 'number') width = width + 'px';

            if (typeof height === 'number') height = height + 'px';

            style.width = width;
            style.height = height;

            if (width !== 'auto') // 防止未定义宽度的表格遇到浏览器右边边界伸缩
                wrap.style.width = wrap.offsetWidth + 'px';

            that._ie6SelectFix();

            return that;
        },

        /**
         * 位置(相对于可视区域)
         * @param {Number, String}
         * @param {Number, String}
         */
        position: function(left, top) {
            var that = this,
                config = that.config,
                wrap = that.DOM.wrap[0],
                style = wrap.style,
                isFixed = _ie6 ? false : config.fixed,
                ie6Fixed = _ie6 && config.fixed,
                docLeft = _$top.scrollLeft(),
                docTop = _$top.scrollTop(),
                dl = isFixed ? 0 : docLeft,
                dt = isFixed ? 0 : docTop,
                ww = _$top.width(),
                wh = _$top.height(),
                ow = wrap.offsetWidth,
                oh = wrap.offsetHeight;
            if (left || left === 0) {
                that._left = left.toString().indexOf('%') !== -1 ? left : null;
                left = that._toNumber(left, ww - ow);

                if (typeof left === 'number') {
                    left = ie6Fixed ? (left += docLeft) : left + dl;
                    left = Math.max(left, dl) + 'px';
                }
                style.left = left;
            }
            if (top || top === 0) {
                that._top = top.toString().indexOf('%') !== -1 ? top : null;
                top = that._toNumber(top, wh - oh);
                if (typeof top === 'number') {
                    top = ie6Fixed ? (top += docTop) : top + dt;
                    top = Math.max(top, dt) + 'px';
                }

                style.top = top;
            }

            if (left !== undefined && top !== undefined) that._autoPositionType();

            return that;
        },

        /*!
         * 定时关闭
         * @param {Number}  单位为秒, 无参数则停止计时器
         * @param   {Function}  关闭窗口前执行的回调函数
         */
        time: function(second, callback) {
            var that = this,
                timer = that._timer;

            timer && clearTimeout(timer);
            callback && callback.call(that);

            if (second) {
                that._timer = setTimeout(function() {
                        that._click('cancel');
                    },
                    1000 * second);
            }

            return that;
        },

        /*! 显示对话框 */
        show: function(args) {
            $(this.DOM.wrap[0]).css('visibility', 'visible');
            //this.DOM.wrap[0].style.visibility = 'visible';
            $(this.DOM.border).addClass('ui_state_visible');
            //this.DOM.border.addClass('ui_state_visible');

            //if (!args && this._lock) $('#ldg_lockmask', _doc)[0].style.display = '';
            if (!args && this._lock) $('#ldg_lockmask', _doc).css('display', '');

            return this;
        },

        /*! 隐藏对话框 */
        hide: function(args) {
            //this.DOM.wrap[0].style.visibility = 'hidden';
            $(this.DOM.wrap[0]).css('visibility', 'hidden');
            //this.DOM.border.removeClass('ui_state_visible');
            $(this.DOM.border).removeClass('ui_state_visible');

            //if (!args && this._lock) $('#ldg_lockmask', _doc)[0].style.display = 'none';
            if (!args && this._lock) $('#ldg_lockmask', _doc).css('display', 'none');

            return this;
        },

        /*! 置顶对话框 */
        zindex: function() {
            var that = this,
                DOM = that.DOM,
                load = that._load,
                top = lhgdialog.focus,
                index = lhgdialog.setting.zIndex++;
            // 设置叠加高度
            DOM.wrap[0].style.zIndex = index;

            // 设置最高层的样式
            top && $(top.DOM.border).removeClass('ui_state_focus');
            lhgdialog.focus = that;
            lhgdialog.focusId = $(DOM.wrap).attr('id');
            $(DOM.border).addClass('ui_state_focus');

            // 扩展窗口置顶功能，只用在iframe方式加载内容
            // 或跨域加载内容页时点窗口内容主体部分置顶窗口
            if (load && load.style.zIndex) load.style.display = 'none';
            if (top && top !== that && top.iframe) top._load.style.display = '';

            return that;
        },

        /*! 设置焦点 */
        focus: function() {
            try {
                elemFocus = this._focus && this._focus[0] || this.DOM.close[0];
                elemFocus && elemFocus.focus();
            } catch (e) {};

            return this;
        },

        /*! 锁屏 */
        lock: function() {
            var that = this,
                frm, index = lhgdialog.setting.zIndex - 1,
                config = that.config,
                mask = $('#ldg_lockmask', _doc)[0],
                style = mask ? mask.style : '',
                positionType = _ie6 ? 'absolute' : 'fixed';

            if (!mask) {
                frm = '<iframe src="javascript:\'\'" style="width:100%;height:100%;position:absolute;' + 'top:0;left:0;z-index:-1;filter:alpha(opacity=0)"></iframe>';

                mask = _doc.createElement('div');
                mask.id = 'ldg_lockmask';
                mask.style.cssText = 'position:' + positionType + ';left:0;top:0;width:100%;height:100%;overflow:hidden;';

                style = mask.style;
                if (_ie6) mask.innerHTML = frm;

                _doc.body.appendChild(mask);
            }

            if (positionType === 'absolute') {
                style.width = _$top.width();
                style.height = _$top.height();
                style.top = _$top.scrollTop();
                style.left = _$top.scrollLeft();

                that._setFixed(mask);
            }

            style.zIndex = index;
            style.display = '';

            that.zindex();
            $(that.DOM.border).addClass('ui_state_lock');

            that._lock = true;

            return that;
        },

        /*! 解除锁屏 */
        unlock: function() {
            var that = this,
                config = that.config,
                content = config.content,
                isIfr = _rurl.test(content),
                //isLoad = _load.test(content),
                mask = $('#ldg_lockmask', _doc)[0];

            if (mask && that._lock) {


                if (isIfr) {
                    // 无限级锁屏
                    if (config.parent && config.parent._lock) {
                    //if($(that.DOM.border).parent().next().attr('hasdialog')) {
                        var index = config.parent.DOM.wrap[0].style.zIndex;
                        //var index = $(that.DOM.border).parent().next()[0].style.zIndex;
                        mask.style.zIndex = parseInt(index, 10) - 1;
                    } else mask.style.display = 'none';
                } else {
                    if($(that.DOM.border).parent().next().attr('hasdialog')) {
                        var index = $(that.DOM.border).parent().next()[0].style.zIndex;
                        mask.style.zIndex = parseInt(index, 10) - 1;
                    } else mask.style.display = 'none';
                }
                

                $(that.DOM.border).removeClass('ui_state_lock');
            }

            that._lock = false;

            return that;
        },

        /*! 关闭对话框 */
        close: function() {
            var that = this,
                DOM = that.DOM,
                wrap = DOM.wrap,
                list = lhgdialog.list,
                fn = that.config.close;

            that.time();

            // 当使用iframe方式加载内容页时的处理代码
            if (that.iframe) {
                if (typeof fn === 'function' && fn.call(that, that.iframe.contentWindow, window) === false) return that;

                // 重要！需要重置iframe地址，否则下次出现的对话框在IE6、7无法聚焦input
                // IE删除iframe后，iframe仍然会留在内存中出现上述问题，置换src是最容易解决的方法
                //$(that.iframe).unbind('load', that._fmLoad).attr('src', "javascript:''").remove();
                $(that.iframe).unbind('load', that._fmLoad).attr('src', "about:blank").remove();

                $(DOM.content).removeClass('ui_state_full');
                if (that._frmTimer) clearTimeout(that._frmTimer);
            } else {
                if (typeof fn === 'function' && fn.call(that, window) === false) return that;
            }

            that.unlock();

            if (that._maxState) {
                _$html.removeClass('ui_lock_scroll');
                DOM.res[0].style.display = 'none';
            }

            if (lhgdialog.focus === that) lhgdialog.focus = null;

            that._removeEvent();
            delete list[that.config.id];

            $(wrap).remove(); // 全部删除
            // 移除HTMLElement或重用
            /*if (_singleton) wrap.remove();
            else {
                _singleton = that;

                if (that._minState) {
                    DOM.main[0].style.display = '';
                    DOM.buttons[0].style.display = '';
                    DOM.dialog[0].style.width = '';
                }

                DOM.wrap[0].style.cssText = 'left:0;top:0;';
                DOM.wrap[0].className = '';
                DOM.border.removeClass('ui_state_focus');
                DOM.title[0].innerHTML = '';
                DOM.content.html('');
                DOM.icon[0].innerHTML = '';
                DOM.buttons[0].innerHTML = '';

                that.hide(true)._setAbsolute();

                // 清空除this.DOM之外临时对象，恢复到初始状态，以便使用单例模式
                for (var i in that) {
                    if (that.hasOwnProperty(i) && i !== 'DOM') delete that[i];
                };
            }*/

            that.closed = true;
            return that;
        },

        /*! 最大化窗口 */
        max: function() {
            var that = this,
                maxSize, DOM = that.DOM,
                wrapStyle = DOM.wrap[0].style,
                mainStyle = DOM.main[0].style,
                rbStyle = DOM.rb[0].style,
                titleStyle = DOM.title[0].style,
                config = that.config,
                top = _$top.scrollTop(),
                left = _$top.scrollLeft();

            if (!that._maxState) {

                _$html.addClass('ui_lock_scroll');

                if (that._minState) that.min();

                // 存储最大化窗口前的状态
                that._or = {
                    t: wrapStyle.top,
                    l: wrapStyle.left,
                    w: mainStyle.width,
                    h: mainStyle.height,
                    d: config.drag,
                    r: config.resize,
                    rc: rbStyle.cursor,
                    tc: titleStyle.cursor
                };

                wrapStyle.top = top + 'px';
                wrapStyle.left = left + 'px';
                maxSize = that._maxSize();
                $(DOM.content[0]).css({
                    'width': maxSize.w,
                    'height': maxSize.h,
                    'overflow': 'auto'
                })
                that.size(maxSize.w, maxSize.h)._setAbsolute();

                if (_ie6 && _doctype) wrapStyle.width = _$top.width() + 'px';

                config.drag = false;
                config.resize = false;
                rbStyle.cursor = 'auto';
                titleStyle.cursor = 'auto';

                DOM.max[0].style.display = 'none';
                DOM.res[0].style.display = 'inline-block';
                that._maxState = true;
            } else {
                _$html.removeClass('ui_lock_scroll');

                wrapStyle.top = that._or.t;
                wrapStyle.left = that._or.l;
                $(DOM.content[0]).css({
                    'width': that._or.w,
                    'height': that._or.h,
                    'overflow': 'auto'
                })
                that.size(that._or.w, that._or.h)._autoPositionType();
                config.drag = that._or.d;
                config.resize = that._or.r;
                rbStyle.cursor = that._or.rc;
                titleStyle.cursor = that._or.tc;

                DOM.res[0].style.display = 'none';
                DOM.max[0].style.display = 'inline-block';

                delete that._or;

                that._maxState = false;
            }
            that._reset();
            return that;
        },

        /*! 最小化窗口 */
        min: function() {
            var that = this,
                DOM = that.DOM,
                main = DOM.main[0].style,
                buttons = DOM.buttons[0].style,
                dialog = DOM.dialog[0].style,
                rb = DOM.rb[0].style.cursor,
                resize = that.config.resize;

            if (!that._minState) {
                if (that._maxState) that.max();

                that._minRz = {
                    rzs: resize,
                    btn: buttons.display
                };
                main.display = 'none';
                buttons.display = 'none';
                dialog.width = main.width;
                rb.cursor = 'auto';
                resize = false;

                DOM.min[0].style.display = 'none';
                DOM.res[0].style.display = 'inline-block';

                that._minState = true;
            } else {
                main.display = '';
                buttons.display = that._minRz.btn;
                dialog.width = '';
                resize = that._minRz;
                rb.cursor = that._minRz.rzs ? 'se-resize' : 'auto';

                DOM.res[0].style.display = 'none';
                DOM.min[0].style.display = 'inline-block';

                delete that._minRz;

                that._minState = false;
            }

            that._ie6SelectFix();
            that._reset();
            return that;
        },

        /*!
         * 获取指定id的窗口对象或窗口中iframe加载的内容页的window对象
         * @param {String} 指定的id
         * @param {String} 是否返回的为指定id的窗口对象
         *        用数字1来表示真，如果不写或写其它为false
         * @return {Object|null}
         */
        get: function(id, object) {
            if (lhgdialog.list[id]) {
                if (object === 1) return lhgdialog.list[id];
                else return lhgdialog.list[id].content || null;
            }

            return null;
        },

        /**
         * 刷新或跳转指定页面
         * @param {Object, 指定页面的window对象}
         * @param {String, 要跳转到的页面地址}
         */
        reload: function(win, url, callback) {
            win = win || window;

            try {
                win.location.href = url ? url : win.location.href;
            } catch (e) { // 跨域
                url = this.iframe.src;
                $(this.iframe).attr('src', url);
            };

            callback && callback.call(this);

            return this;
        },

        /*!
         * 设置iframe方式加载内容页
         */
        _iframe: function(url) {
            var that = this,
                iframe, $iframe, iwin, $idoc, $ibody, iWidth, iHeight, $content = that.DOM.content,
                config = that.config,
                loading = that._load = $('.ui_loading', $content[0])[0],
                //initCss = 'position:absolute;left:-9999em;border:none 0;background:transparent',
                initCss = 'position:absolute;display:none;background:transparent',
                loadCss = 'width:100%;height:100%;border:none 0;';

            // 是否允许缓存. 默认true
            if (config.cache === false) {
                var ts = (new Date).getTime(),
                    ret = url.replace(/([?&])_=[^&]*/, '$1_=' + ts);
                url = ret + ((ret === url) ? (/\?/.test(url) ? '&' : '?') + '_=' + ts : '');
            }

            iframe = that.iframe = _doc.createElement('iframe');
            iframe.name = config.id;
            iframe.id = config.id;
            iframe.style.cssText = initCss;
            iframe.setAttribute('frameborder', 0, 0);

            $iframe = $(iframe);

            $content[0].appendChild(iframe);

            // 延迟加载iframe的src属性，IE6下不延迟加载会出现加载进度条的BUG
            that._frmTimer = setTimeout(function() {
        
                    $iframe.attr('src', url);

                },
                1);

            // iframe中页面加载完成后执行的函数
            var load = that._fmLoad = function() {
                $content.addClass('ui_state_full');

                // 增强窗口置顶功能，iframe方式加载内容或跨域加载内容页时点窗口内容部分置顶窗口
                // 通过使用重置loading层来优雅的完成此功能，在focus方法中有此功能的相关代码
                var DOM = that.DOM,
                    ltSize, lt = DOM.lt[0].offsetHeight,
                    main = DOM.main[0].style;

                loading.style.cssText = 'display:none;position:absolute;background:#FFF;opacity:0;' + 'filter:alpha(opacity=0);z-index:1;width:' + main.width + ';height:' + main.height + ';';
                // 此部分代码结束，在拖动改变大小的_dragEvent.onmove方法中还有此功能的相关代码
                try {
                    iwin = that.content = iframe.contentWindow; // 定义窗口对象content属性为内容页的window对象
                    $idoc = $(iwin.document);
                    $ibody = $(iwin.document.body);
                } catch (e) { // 跨域
                    iframe.style.cssText = loadCss;
                    return;
                }
                // 获取iframe内部尺寸
                iWidth = config.width === 'auto' ? $idoc.width() + (_ie6 ? 0 : parseInt($ibody.css('marginLeft'))) : config.width;

                iHeight = config.height === 'auto' ? $idoc.height() : config.height;

                // 适应iframe尺寸
                setTimeout(function() {
                        iframe.style.cssText = loadCss;
                    },
                    0); // setTimeout: 防止IE6~7对话框样式渲染异常
                // 窗口最大化时这里不用再计算窗口的尺寸和位置了，如果再计算窗口会出现错位
                if (!that._maxState) {
                    that.size(iWidth, iHeight).position(config.left, config.top);
                }

                // 非跨域时还要对loading层重设大小，要不宽和度都为'auto'
                loading.style.width = main.width;
                loading.style.height = main.height;

                config.init && config.init.call(that, iwin, _top);
            };

            // 绑定iframe元素api属性为窗口自身对象，在内容页中此属性很重要
            that.iframe.api = that;
            $iframe.bind('load', load);
        },

        /*! 获取窗口元素 */
        _getDOM: function() {
            var wrap = _doc.createElement('div'),
                body = _doc.body;

            wrap.style.cssText = 'position:absolute;left:0;top:0;visibility:hidden;';
            wrap.innerHTML = dialogTpl;

            var name, i = 0,
                DOM = {
                    wrap: $(wrap)
                },
                els = wrap.getElementsByTagName('*'),
                len = els.length;

            for (; i < len; i++) {
                name = els[i].className.split('ui_')[1];
                if (name) DOM[name] = $(els[i]);
            };

            body.insertBefore(wrap, body.firstChild);
            return DOM;
        },

        /*!
         * px与%单位转换成数值 (百分比单位按照最大值换算)
         * 其他的单位返回原值
         */
        _toNumber: function(thisValue, maxValue) {
            if (typeof thisValue === 'number') return thisValue;

            if (thisValue.indexOf('%') !== -1) thisValue = parseInt(maxValue * thisValue.split('%')[0] / 100);

            return thisValue;
        },

        /*! 计算最大化窗口时窗口的尺寸 */
        _maxSize: function() {
            var that = this,
                DOM = that.DOM,
                wrap = DOM.wrap[0],
                main = DOM.main[0],
                maxWidth,
                maxHeight;

            maxWidth = _$top.width() - wrap.offsetWidth + main.offsetWidth;
            maxHeight = _$top.height() - wrap.offsetHeight + main.offsetHeight;

            return {
                w: maxWidth,
                h: maxHeight
            };
        },

        /*! 强制覆盖IE6下拉控件 */
        _ie6SelectFix: _ie6 ?
            function() {
                var $wrap = this.DOM.wrap,
                    wrap = $wrap[0],
                    expando = expando + 'iframeMask',
                    iframe = $wrap[expando],
                    width = wrap.offsetWidth,
                    height = wrap.offsetHeight;

                width = width + 'px';
                height = height + 'px';
                if (iframe) {
                    iframe.style.width = width;
                    iframe.style.height = height;
                } else {
                    iframe = wrap.appendChild(_doc.createElement('iframe'));
                    $wrap[expando] = iframe;
                    //iframe.src = "javascript:''";
                    iframe.src = "about:blank";
                    iframe.style.cssText = 'position:absolute;z-index:-1;left:0;top:0;' + 'filter:alpha(opacity=0);width:' + width + ';height:' + height;
                }
        } : _fn,

        /*! 自动切换定位类型 */
        _autoPositionType: function() {
            this[this.config.fixed ? '_setFixed' : '_setAbsolute']();
        },

        /*! 设置静止定位 */
        _setFixed: function(el) {
            var style = el ? el.style : this.DOM.wrap[0].style;

            if (_ie6) {
                var sLeft = _$top.scrollLeft(),
                    sTop = _$top.scrollTop(),
                    left = parseInt(style.left) - sLeft,
                    top = parseInt(style.top) - sTop,
                    txt = _doctype ? 'this.ownerDocument.body' : 'this.ownerDocument.documentElement';

                this._setAbsolute();

                style.setExpression('left', txt + '.scrollLeft +' + left);
                style.setExpression('top', txt + '.scrollTop +' + top);
            } else style.position = 'fixed';
        },

        /*! 设置绝对定位 */
        _setAbsolute: function() {
            var style = this.DOM.wrap[0].style;

            if (_ie6) {
                style.removeExpression('left');
                style.removeExpression('top');
            }

            style.position = 'absolute';
        },

        /*! 按钮回调函数触发 */
        _click: function(name) {
            var that = this,
                fn = that._listeners[name] && that._listeners[name].callback;
            return typeof fn !== 'function' || fn.call(that, that._listeners[name].obj, window) !== false ? that.close() : that;
        },

        /*! 重置位置与尺寸 */
        _reset: function() {
            var test = !! window.ActiveXObject,
                newSize, that = this,
                tw = _$top.width(),
                tt = _$top.height(),
                oldSize = that._winSize || tw * tt,
                oldWidth = that._lockDocW || tw,
                left = that._left,
                top = that._top;
            if (test) {
                //IE6下遮罩大小改变
                if (that._lock && _ie6) $('#ldg_lockmask', _doc).css({
                    width: tw + 'px',
                    height: tt + 17 + 'px'
                });

                newWidth = that._lockDocW = tw;
                //IE6~7 window.onresize bug
                newSize = that._winSize = tw * tt;
                if (oldSize === newSize) {
                    if (left || top) {
                        that.position(left, top);
                    }
                    return;
                }
            };

            if (that._maxState) {
                var size = that._maxSize();
                that.size(size.w, size.h);
            }
            //IE6~8会出现最大化还原后窗口重新定位，锁定滚动条在IE下就会触发resize事件BUG 
            if (test && Math.abs(oldWidth - newWidth) === 17) return;

            if (left || top) {
                that.position(left, top);
            }
        },

        _addEvent: function() {
            var resizeTimer, that = this,
                config = that.config,
                DOM = that.DOM;

            // 窗口调节事件
            that._winResize = function() {
                resizeTimer && clearTimeout(resizeTimer);
                resizeTimer = setTimeout(function() {
                        that._reset();
                    },
                    140);
            };
            _$top.bind('resize', that._winResize);

            // 监听点击
            DOM.wrap.bind('click',
                function(event) {
                    var target = event.target,
                        callbackID;

                    if (target.disabled) return false; // IE BUG
                    if (target === DOM.close[0]) {
                        that._click('cancel');
                        return false;
                    } else if (target === DOM.max[0] || target === DOM.max_b[0]) {
                        that.max();
                        return false;
                    } else if (target === DOM.min[0] || target === DOM.min_b[0]) {
                        that.min();
                        return false;
                    } else if (target === DOM.res[0] || target === DOM.res_b[0] || target === DOM.res_t[0]) {
                        if (that._minState) {
                            that.min();
                        } else {
                            that.max();
                        }
                    } else {
                        //callbackID = target[expando + 'callback'];
                        callbackID = $(target).data('value') ? $(target).data('value') : target[expando + 'callback'];
                        callbackID && that._click(callbackID);
                    }
                }).bind('mousedown',
                function(event) {
                    that.zindex();

                    var target = event.target;

                    if (config.drag !== false && target === DOM.title[0] || config.resize !== false && target === DOM.rb[0]) {
                        _use(event);
                        return false;
                    }
                });

            // 双击标题栏最大化还窗口事件
            if (config.max) DOM.title.bind('dblclick',
                function() {
                    that.max();
                    return false;
                });
        },

        /*!  卸载事件代理 */
        _removeEvent: function() {
            var that = this,
                DOM = that.DOM;

            $(DOM.wrap).unbind();
            $(DOM.title).unbind();
            _$top.unbind('resize', that._winResize);
        }
    };

    lhgdialog.fn._init.prototype = lhgdialog.fn;

    /*! 此对象用来存储获得焦点的窗口对象实例 */
    lhgdialog.focus = null;

    /*! 此对象用来存储获得焦点的窗口对象的 id */
    lhgdialog.focusId = '';

    /*! 存储窗口实例的对象列表 */
    lhgdialog.list = {};

    /*!
     * 全局快捷键
     * 由于跨框架时事件是绑定到最顶层页面，所以当当前页面卸载时必须要除移此事件
     * 所以必须unbind此事件绑定的函数，所以这里要给绑定的事件定义个函数
     * 这样在当前页面卸载时就可以移此事件绑定的相应函数，不而不影响顶层页面此事件绑定的其它函数
     */
    onKeyDown = function(event) {
        var target = event.target,
            api = lhgdialog.focus,
            keyCode = event.keyCode;

        if (!api || !api.config.esc || api.config.cancel === false) return;
        keyCode === 27 && api._click(api.config.cancelVal);
    };

    _$doc.bind('keydown', onKeyDown);

    /*!
     * 框架页面卸载前关闭所有穿越的对话框
     * 同时移除拖动层和遮罩层
     */
    _top != window && $(window).bind('unload',
        function() {
            var list = lhgdialog.list;
            for (var i in list) {
                if (list[i]) list[i].close();
            }
            _singleton && _singleton.DOM.wrap.remove();

            _$doc.unbind('keydown', onKeyDown);

            $('#ldg_lockmask', _doc)[0] && $('#ldg_lockmask', _doc).remove();
            $('#ldg_dragmask', _doc)[0] && $('#ldg_dragmask', _doc).remove();
        });

    /*! lhgdialog 的全局默认配置 */
    lhgdialog.setting = {
        content: '<div class="ui_loading"><span>loading...</span></div>',
        //title: '\u89C6\u7A97 ',
        // 标题,默认'视窗'
        button: null,
        // 自定义按钮
        ok: null,
        // 确定按钮回调函数
        cancel: null,
        // 取消按钮回调函数
        init: null,
        // 对话框初始化后执行的函数
        close: null,
        // 对话框关闭前执行的函数
        okVal: '\u786E\u5B9A',
        // 确定按钮文本,默认'确定'
        cancelVal: '\u53D6\u6D88',
        // 取消按钮文本,默认'取消'
        skin: 'default',
        // 多皮肤共存预留接口
        esc: true,
        // 是否支持Esc键关闭
        show: true,
        // 初始化后是否显示对话框
        width: 'auto',
        // 内容宽度
        height: 'auto',
        // 内容高度
        icon: null,
        // 消息图标名称
        lock: true,
        // 是否锁屏
        focus: true,
        // 窗口是否自动获取焦点
        parent: null,
        // 打开子窗口的父窗口对象，主要用于多层锁屏窗口
        padding: '0',
        // 内容与边界填充距离
        param: null,
        fixed: true,
        // 是否静止定位
        left: '50%',
        // X轴坐标
        top: '38.2%',
        // Y轴坐标
        max: false,
        // 是否显示最大化按钮
        min: false,
        // 是否显示最小化按钮
        zIndex: 1999,
        // 对话框叠加高度值(重要：此值不能超过浏览器最大限制)
        resize: false,
        // 是否允许用户调节尺寸
        drag: true,
        // 是否允许用户拖动位置
        cache: false,
        // 是否缓存窗口内容页
        data: null,
        // 传递各种数据
        extendDrag: false // 增加lhgdialog拖拽体验
    };

    /*!
     *------------------------------------------------
     * 对话框模块-拖拽支持（可选外置模块）
     *------------------------------------------------
     */
    var _use, _isSetCapture = 'setCapture' in _root,
        _isLosecapture = 'onlosecapture' in _root;

    lhgdialog.dragEvent = {
        onstart: _fn,
        start: function(event) {
            var that = lhgdialog.dragEvent;

            _$doc.bind('mousemove', that.move).bind('mouseup', that.end);

            that._sClientX = event.clientX;
            that._sClientY = event.clientY;
            that.onstart(event.clientX, event.clientY);

            return false;
        },

        onmove: _fn,
        move: function(event) {
            var that = lhgdialog.dragEvent;

            that.onmove(event.clientX - that._sClientX, event.clientY - that._sClientY);

            return false;
        },

        onend: _fn,
        end: function(event) {
            var that = lhgdialog.dragEvent;

            _$doc.unbind('mousemove', that.move).unbind('mouseup', that.end);

            that.onend(event.clientX, event.clientY);
            return false;
        }
    };

    _use = function(event) {
        var limit, startWidth, startHeight, startLeft, startTop, isResize, api = lhgdialog.focus,
            config = api.config,
            DOM = api.DOM,
            wrap = DOM.wrap[0],
            title = DOM.title,
            main = DOM.main[0],
            _dragEvent = lhgdialog.dragEvent,

            // 清除文本选择
            clsSelect = 'getSelection' in _top ?
                function() {
                    _top.getSelection().removeAllRanges();
            } : function() {
                try {
                    _doc.selection.empty();
                } catch (e) {};
            };

        // 对话框准备拖动
        _dragEvent.onstart = function(x, y) {
            if (isResize) {
                startWidth = main.offsetWidth;
                startHeight = main.offsetHeight;
            } else {
                startLeft = wrap.offsetLeft;
                startTop = wrap.offsetTop;
            };

            _$doc.bind('dblclick', _dragEvent.end);

            !_ie6 && _isLosecapture ? title.bind('losecapture', _dragEvent.end) : _$top.bind('blur', _dragEvent.end);

            _isSetCapture && title[0].setCapture();

            $(DOM.border).addClass('ui_state_drag');
            api.focus();
        };

        // 对话框拖动进行中
        _dragEvent.onmove = function(x, y) {
            if (isResize) {
                var wrapStyle = wrap.style,
                    style = main.style,
                    width = x + startWidth,
                    height = y + startHeight;

                wrapStyle.width = 'auto';
                config.width = style.width = Math.max(0, width) + 'px';
                wrapStyle.width = wrap.offsetWidth + 'px';

                config.height = style.height = Math.max(0, height) + 'px';
                //api._ie6SelectFix();
                // 使用loading层置顶窗口时窗口大小改变相应loading层大小也得改变
                api._load && $(api._load).css({
                    width: style.width,
                    height: style.height
                });
            } else {
                var style = wrap.style,
                    left = x + startLeft,
                    top = y + startTop;

                config.left = Math.max(limit.minX, Math.min(limit.maxX, left));
                config.top = Math.max(limit.minY, Math.min(limit.maxY, top));
                style.left = config.left + 'px';
                style.top = config.top + 'px';
            }

            clsSelect();
        };

        // 对话框拖动结束
        _dragEvent.onend = function(x, y) {
            _$doc.unbind('dblclick', _dragEvent.end);

            !_ie6 && _isLosecapture ? title.unbind('losecapture', _dragEvent.end) : _$top.unbind('blur', _dragEvent.end);

            _isSetCapture && title[0].releaseCapture();

            _ie6 && api._autoPositionType();

            $(DOM.border).removeClass('ui_state_drag');
        };

        isResize = event.target === DOM.rb[0] ? true : false;

        limit = (function(fixed) {
            var ow = wrap.offsetWidth,
                // 向下拖动时不能将标题栏拖出可视区域
                oh = title[0].offsetHeight || 20,
                ww = _$top.width(),
                wh = _$top.height(),
                dl = fixed ? 0 : _$top.scrollLeft(),
                dt = fixed ? 0 : _$top.scrollTop();
            // 坐标最大值限制(在可视区域内)  
            maxX = ww - ow + dl;
            maxY = wh - oh + dt;

            return {
                minX: dl,
                minY: dt,
                maxX: maxX,
                maxY: maxY
            };
        })(wrap.style.position === 'fixed');

        _dragEvent.start(event);
    };

    /*! 
     * 页面DOM加载完成执行的代码
     */
    $(function() {
        // 触发浏览器预先缓存背景图片
        setTimeout(function() {
                if (_count) return;
                lhgdialog({
                    left: '-9999em',
                    time: 9,
                    fixed: false,
                    lock: false,
                    focus: false
                });
            },
            150);

        // 增强lhgdialog拖拽体验（可选外置模块，如不需要可删除）
        // 防止鼠标落入iframe导致不流畅，对超大对话框拖动优化
        lhgdialog.setting.extendDrag && (function(dragEvent) {
            var mask = _doc.createElement('div'),
                style = mask.style,
                positionType = _ie6 ? 'absolute' : 'fixed';
            mask.id = 'ldg_dragmask';

            style.cssText = 'display:none;position:' + positionType + ';left:0;top:0;width:100%;height:100%;' + 'cursor:move;filter:alpha(opacity=0);opacity:0;background:#FFF;pointer-events:none;';

            _doc.body.appendChild(mask);

            dragEvent._start = dragEvent.start;
            dragEvent._end = dragEvent.end;

            dragEvent.start = function() {
                var api = lhgdialog.focus,
                    main = api.DOM.main[0],
                    iframe = api.iframe;

                dragEvent._start.apply(this, arguments);
                style.display = 'block';
                style.zIndex = lhgdialog.setting.zIndex + 3;

                if (positionType === 'absolute') {
                    style.width = _$top.width() + 'px';
                    style.height = _$top.height() + 'px';
                    style.left = _$doc.scrollLeft() + 'px';
                    style.top = _$doc.scrollTop() + 'px';
                };

                if (iframe && main.offsetWidth * main.offsetHeight > 307200) main.style.visibility = 'hidden';
            };

            dragEvent.end = function() {
                var api = lhgdialog.focus;
                dragEvent._end.apply(this, arguments);
                style.display = 'none';
                if (api) api.DOM.main[0].style.visibility = 'visible';
            };
        })(lhgdialog.dragEvent);
    });

    /*! 使用jQ方式调用窗口 */
    $.fn.dialog = function() {
        var config = arguments;
        this.bind('click',
            function() {
                lhgdialog.apply(this, config);
                return false;
            });
        return this;
    };
    $.fn.dialogRefresh = function(url){
        var _d = $(this).data("_dialog");
        if(!_d)return;

        var config = _d.config;
        if (config.content.indexOf('load') != -1) {
            $('#' + config.id).find('.ui_content').empty().load(config.content.split('load:')[1]);
        }
    };

    window.lhgdialog = $.dialog = lhgdialog;

})(this.jQuery || this.lhgcore, this);

/*!
 *------------------------------------------------
 * 对话框其它功能扩展模块（可选外置模块）
 *------------------------------------------------
 */
;
(function($, lhgdialog, undefined) {

    var _zIndex = function() {
        return lhgdialog.setting.zIndex;
    };

    /**
     * 警告
     * @param {String}  消息内容
     */
    lhgdialog.alert = function(content, callback, parent) {
        return lhgdialog({
            title: '消息',
            id: 'Alert',
            zIndex: _zIndex(),
            icon: 'icon-exclamation-sign',
            fixed: true,
            lock: true,
            //content: content,
            ok: true,
            resize: false,
            close: callback,
            parent: parent || null
        }).content(content);
    };

    /**
     * 确认
     * @param {String}  消息内容
     * @param {Function}  确定按钮回调函数
     * @param {Function}  取消按钮回调函数
     */
    lhgdialog.confirm = function(content, yes, no, parent) {
        return lhgdialog({
            title: '确认',
            id: 'Confirm',
            zIndex: _zIndex(),
            icon: 'icon-question-sign',
            fixed: true,
            lock: true,
            //content: content,
            padding: 20,
            resize: false,
            parent: parent || null,
            ok: function(here) {
                return yes.call(this, here);
            },
            cancel: function(here) {
                return no && no.call(this, here);
            }
        }).content(content);
    };

    /**
     * 提问
     * @param {String}  提问内容
     * @param {Function}  回调函数. 接收参数：输入值
     * @param {String}  默认值
     */
    lhgdialog.prompt = function(content, yes, value, parent) {
        value = value || '';
        var input;

        return lhgdialog({
            title: '提问',
            id: 'Prompt',
            zIndex: _zIndex(),
            icon: 'icon-question-sign',
            fixed: true,
            lock: true,
            padding: '20px',
            parent: parent || null,
            content: ['<div style="margin-bottom:5px;font-size:12px">', content, '</div>', '<div>', '<input value="', value, '" style="width:18em;padding:6px 4px" />', '</div>'].join(''),
            init: function() {
                input = this.DOM.content[0].getElementsByTagName('input')[0];
                input.select();
                input.focus();
            },
            ok: function(here) {
                return yes && yes.call(this, input.value, here);
            },
            cancel: true
        });
    };

    /**
     * 短暂提示
     * @param {String}  提示内容
     * @param   {Number}    显示时间 (默认1.5秒)
     * @param {String}  提示图标 (注意要加扩展名)
     * @param   {Function}  提示关闭时执行的回调函数
     */
    lhgdialog.tips = function(content, time, icon, callback, left, top) {
        var reIcon = icon ?
                function() {
                    $(this.DOM.icon[0]).html('<i class="iconfont ' + icon + '"></i>');
                    this.DOM.icon[0].style.display = '';
                    if (callback) this.config.close = callback;
            } : function() {
                this.DOM.icon[0].style.display = 'none';
                if (callback) this.config.close = callback;
            };

        return lhgdialog({
            id: 'Tips',
            zIndex: _zIndex(),
            title: false,
            cancel: false,
            fixed: true,
            lock: false,
            resize: false,
            left: left,
            top: top
        }).content(content).time(time || 1.5, reIcon);
    };

})(this.jQuery || this.lhgcore, this.lhgdialog);
;;
(function($, undefined) {
    "use strict";

    var pluginName = 'message';

    $[pluginName] = function(message, type, delay, auto, top) {

        clearTimeout($[pluginName].timeout);

        var selector, _doc, _body;

        selector = $('#' + $[pluginName].options.id);
        if (!selector.length) {
            //selector = $('<div/>', {id: $[pluginName].options.id}).appendTo($[pluginName].options.appendTo);
            if (window['top'] != self) {
                _doc = window['top'].document;
            } else {
                _doc = window.document;
            };

            selector = _doc.createElement('div'),
            _body = _doc.body;
            selector.id = $[pluginName].options.id;
            _body.insertBefore(selector, _body.firstChild);

            $(selector).addClass('ui-message');
        }
        var messageHtml = '';
        if (type === undefined || type == $[pluginName].TYPE_ERROR) {
            if (message == undefined || message == '' || message == null) {
                message = '操作失败。';
            }
            messageHtml += '<div class="ui-message-content"><p class="ui-tiptext ui-tiptext-error"><i class="iconfont icon-remove-sign"></i>失败。</p><p class="ui-message-text">' + message + '</p></div><div class="ui-message-btn"><button class="btn" type="button">确定</button></div>'
        } else if (type == $[pluginName].TYPE_OK) {
            if (message == undefined || message == '' || message == null) {
                message = '操作成功。';
            }
            messageHtml += '<div class="ui-message-content"><p class="ui-tiptext ui-tiptext-success"><i class="iconfont icon-ok-sign"></i>成功。</p><p class="ui-message-text">' + message + '</p></div><div class="ui-message-btn"><button class="btn" type="button">确定</button></div>';
        } else if (type == $[pluginName].TYPE_WARN) {
            if (message == undefined || message == '' || message == null) {
                message = '操作错误。';
            }
            messageHtml += '<div class="ui-message-content"><p class="ui-tiptext ui-tiptext-warning"><i class="iconfont icon-exclamation-sign"></i>警告。</p><p class="ui-message-text">' + message + '</p></div><div class="ui-message-btn"><button class="btn" type="button">确定</button></div>';
        }
        $(selector).html(messageHtml);
        if (type === undefined || type == $[pluginName].TYPE_ERROR) {
            $(selector).removeClass($[pluginName].options.okClass).addClass($[pluginName].options.errClass);
        } else if (type == $[pluginName].TYPE_OK) {
            $(selector).removeClass($[pluginName].options.errClass).addClass($[pluginName].options.okClass);
        }
        if (top) {
            $(selector).addClass('no-auto');
        }
        if (auto) {
            var btnWrap = $(selector).find('.ui-message-btn');
            btnWrap.length > 0 && btnWrap.remove();
            $(selector).slideDown('fast',
                function() {
                    $[pluginName].timeout = setTimeout(function() {
                            $(selector).slideUp('fast');
                        },
                        delay * 1000);
                });
        } else {
            $(selector).slideDown('fast',
                function() {
                    $(selector).find('.btn').click(
                        function() {
                            $(selector).slideUp('fast');
                        }
                    )
                });
        }

    };

    $.extend($[pluginName], {
        options: {
            id: 'page_message',
            okClass: 'ui-message-ok',
            errClass: 'ui-message-error',
            delay: 4,
            auto: true,
            top: false,
            appendTo: 'body' // where should the modal be appended to (default to document.body). Added for unit tests, not really needed in real life.
        },

        TYPE_ERROR: 1,
        TYPE_OK: 2,
        TYPE_WARN: 3
    });
})($ || jQuery);;;(function($) {
    /*
     * jQuery 1.9 support. browser object has been removed in 1.9
     */
    var browser = $.browser

    if (!browser) {
        function uaMatch(ua) {
            ua = ua.toLowerCase();

            var match = /(chrome)[ \/]([\w.]+)/.exec(ua) ||
                /(webkit)[ \/]([\w.]+)/.exec(ua) ||
                /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) ||
                /(msie) ([\w.]+)/.exec(ua) ||
                ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) ||
                [];

            return {
                browser: match[1] || "",
                version: match[2] || "0"
            };
        };

        var matched = uaMatch(navigator.userAgent);
        browser = {};

        if (matched.browser) {
            browser[matched.browser] = true;
            browser.version = matched.version;
        }

        // Chrome is Webkit, but Webkit is also Safari.
        if (browser.chrome) {
            browser.webkit = true;
        } else if (browser.webkit) {
            browser.safari = true;
        }
    }

    /*!
     * START code from jQuery UI
     *
     * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
     * Dual licensed under the MIT or GPL Version 2 licenses.
     * http://jquery.org/license
     *
     * http://docs.jquery.com/UI
     */

    if (typeof $.support.selectstart != 'function') {
        $.support.selectstart = "onselectstart" in document.createElement("div");
    }

    if (typeof $.fn.disableSelection != 'function') {
        $.fn.disableSelection = function() {
            return this.bind(($.support.selectstart ? "selectstart" : "mousedown") +
                ".ui-disableSelection", function(event) {
                    event.preventDefault();
                });
        };
    }

    /* END code from jQuery UI */

    $.addFlex = function(t, p) {
        if (t.grid) return false; //return if already exist
        p = $.extend({ //apply default properties
            //height: 330, //default height
            width: 'auto', //auto width
            striped: true, //apply odd even stripes
            novstripe: false,
            minwidth: 30, //min width of columns
            minheight: 80, //min height of columns
            resizable: false, //allow table resizing
            url: false, //URL if using data from AJAX
            method: 'POST', //data sending method
            showOperate: true,
            dataType: 'json', //type of data for AJAX, either xml or json
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
            errormsg: 'Connection Error',
            usepager: false,
            showOrderNumber: true,
            orderColor: '#e9e9e9',
            showCheckbox: false,
            nowrap: true,
            pageNo: 1, //current page
            total: 1, //total pages
            searchFormId: '',
            sortorder: "asc",
            orderField: '',
            useRp: true, //use the results per page select box
            pageSize: 10, //results per page
            rpOptions: [10, 20, 30, 50], //allowed per-page values
            title: false,
            idProperty: 'id',
            pagestat: '显示 {from} 到 {to} 条信息（总 {total} 条）',
            pagetext: '第',
            outof: '页（共',
            findtext: '查找',
            params: [], //allow optional parameters to be passed around
            procmsg: '处理中, 请等待 ...',
            query: '',
            qtype: '',
            nomsg: '没有找到信息',
            minColToggle: 1, //minimum allowed column to be hidden
            showToggleBtn: true, //show or hide column toggle popup
            hideOnSubmit: true,
            autoload: true,
            blockOpacity: 0.5,
            id: null,
            preProcess: false,
            addTitleToCell: false, // add a title attr to cells with truncated contents
            dblClickResize: false, //auto resize column by double clicking
            onDragCol: false,
            onToggleCol: false,
            onChangeSort: false,
            searchCallback: false,
            onDoubleClick: false,
            onSuccess: false,
            onError: false,
            onSubmit: false, //using a custom populate function
            __mw: { //extendable middleware function holding object
                datacol: function(p, col, val) { //middleware for formatting data columns
                    var _col = (typeof p.datacol[col] == 'function') ? p.datacol[col](val) : val; //format column using function
                    if (typeof p.datacol['*'] == 'function') { //if wildcard function exists
                        return p.datacol['*'](_col); //run wildcard function
                    } else {
                        return _col; //return column without wildcard
                    }
                }
            },
            getGridClass: function(g) { //get the grid class, always returns g
                return g;
            },
            datacol: {}, //datacol middleware object 'colkey': function(colval) {}
            colResize: true, //from: http://stackoverflow.com/a/10615589
            colMove: true,
            singleSelect: true,
            asynchronousPage : false // 是否异步分页，即先出数据后发请求获取总条数，针对大规模数据容量的单表查询总数慢的问题
        }, p);
        $(t).show() //show if hidden
        .attr({
            cellPadding: 0,
            cellSpacing: 0,
            border: 0
        }) //remove padding and spacing
        .removeAttr('width'); //remove width properties
        //create grid class
        var g = {
            hset: {},
            rePosDrag: function() {
                var cdleft = 0 - this.hDiv.scrollLeft;
                if (this.hDiv.scrollLeft > 0) cdleft -= Math.floor(p.cgwidth / 2);
                $(g.cDrag).css({
                    top: g.hDiv.offsetTop + 1
                });
                var cdpad = this.cdpad;
                var cdcounter = 0;
                $('div', g.cDrag).hide();
                $('thead tr:first th:visible', this.hDiv).each(function() {
                    var n = $('thead tr:first th:visible', g.hDiv).index(this);
                    var cdpos = parseInt($('div', this).width());
                    if (cdleft == 0) cdleft -= Math.floor(p.cgwidth / 2);

                    if (!(browser.mozilla)) {
                        cdpos = cdpos + cdleft + cdpad + 1;
                    } else {
                        cdpos = cdpos + cdleft + cdpad;
                    }
                    if (isNaN(cdpos)) {
                        cdpos = 0;
                    }
                    var ischeckbox = $(this).data('checkbox');
                    //var isOrderNumber = $(this).data('orderNumber');
                    //if (ischeckbox != 'show' && isOrderNumber != 'show') {
                    if (ischeckbox != 'show') {
                        $('div:eq(' + n + ')', g.cDrag).css({
                            'left': (!(browser.mozilla) ? cdpos - cdcounter : cdpos) + 45 + 'px'
                        }).show();
                    }
                    cdleft = cdpos;
                    cdcounter++;
                });
            },

            fixHeight: function(newH) {
                newH = false;
                if (!newH) newH = $(g.bDiv).height();
                var hdHeight = $(this.hDiv).height();
                $('div', this.cDrag).each(
                    function() {
                        $(this).height(newH + hdHeight);
                    }
                );
                var nd = parseInt($(g.nDiv).height(), 10);
                if (nd > newH) $(g.nDiv).height(newH)//.width(200);
                else $(g.nDiv).height('auto')//.width('auto');
                $(g.block).css({
                    height: newH,
                    marginBottom: (newH * -1)
                });
                var hrH = g.bDiv.offsetTop + newH;
                if (p.height != 'auto' && p.resizable) hrH = g.vDiv.offsetTop;
                $(g.rDiv).css({
                    height: hrH
                });
            },
            dragStart: function(dragtype, e, obj) { //default drag function start
                if (dragtype == 'colresize' && p.colResize === true) { //column resize
                    $(g.nDiv).hide();
                    //$(g.nBtn).hide();
                    var n = $('div', this.cDrag).index(obj);
                    var ow = $('th:visible div:eq(' + n + ')', this.hDiv).width();
                    $(obj).addClass('dragging').siblings().hide();
                    $(obj).prev().addClass('dragging').show();
                    this.colresize = {
                        startX: e.pageX,
                        ol: parseInt(obj.style.left, 10),
                        ow: ow,
                        n: n
                    };
                    $('body').css('cursor', 'col-resize');
                } else if (dragtype == 'vresize') { //table resize
                    var hgo = false;
                    $('body').css('cursor', 'row-resize');
                    if (obj) {
                        hgo = true;
                        $('body').css('cursor', 'col-resize');
                    }
                    this.vresize = {
                        h: p.height,
                        sy: e.pageY,
                        w: p.width,
                        sx: e.pageX,
                        hgo: hgo
                    };
                } else if (dragtype == 'colMove') { //column header drag
                    $(e.target).disableSelection(); //disable selecting the column header
                    if ((p.colMove === true)) {
                        $(g.nDiv).hide();
                        //$(g.nBtn).hide();
                        this.hset = $(this.hDiv).offset();
                        this.hset.right = this.hset.left + $('table', this.hDiv).width();
                        this.hset.bottom = this.hset.top + $('table', this.hDiv).height();
                        this.dcol = obj;
                        this.dcoln = $('th', this.hDiv).index(obj);
                        this.colCopy = document.createElement("div");
                        this.colCopy.className = "colCopy";
                        this.colCopy.innerHTML = obj.innerHTML;
                        if (browser.msie) {
                            this.colCopy.className = "colCopy ie";
                        }
                        $(this.colCopy).css({
                            position: 'absolute',
                            'float': 'left',
                            display: 'none',
                            textAlign: obj.align
                        });
                        $('body').append(this.colCopy);
                        $(this.cDrag).hide();
                    }
                }
                $('body').noSelect();
            },
            dragMove: function(e) {
                if (this.colresize) { //column resize
                    var n = this.colresize.n;
                    var diff = e.pageX - this.colresize.startX;
                    var nleft = this.colresize.ol + diff;
                    var nw = this.colresize.ow + diff;
                    if (nw > p.minwidth) {
                        $('div:eq(' + n + ')', this.cDrag).css('left', nleft);
                        this.colresize.nw = nw;
                    }
                } else if (this.vresize) { //table resize
                    var v = this.vresize;
                    var y = e.pageY;
                    var diff = y - v.sy;
                    if (!p.defwidth) p.defwidth = p.width;
                    if (p.width != 'auto' && !p.nohresize && v.hgo) {
                        var x = e.pageX;
                        var xdiff = x - v.sx;
                        var newW = v.w + xdiff;
                        if (newW > p.defwidth) {
                            this.gDiv.style.width = newW + 'px';
                            p.width = newW;
                        }
                    }
                    var newH = v.h + diff;
                    if ((newH > p.minheight || p.height < p.minheight) && !v.hgo) {
                        this.bDiv.style.height = newH + 'px';
                        p.height = newH;
                        this.fixHeight(newH);
                    }
                    v = null;
                } else if (this.colCopy) {
                    $(this.dcol).addClass('thMove').removeClass('thOver');
                    if (e.pageX > this.hset.right || e.pageX < this.hset.left || e.pageY > this.hset.bottom || e.pageY < this.hset.top) {
                        //this.dragEnd();
                        $('body').css('cursor', 'move');
                    } else {
                        $('body').css('cursor', 'pointer');
                    }
                    $(this.colCopy).css({
                        top: e.pageY + 10,
                        left: e.pageX + 20,
                        display: 'block'
                    });
                }
            },
            dragEnd: function() {
                if (this.colresize) {
                    var n = this.colresize.n;
                    var nw = this.colresize.nw;
                    $('th:visible div:eq(' + n + ')', this.hDiv).css('width', nw);
                    $('tr', this.bDiv).each(
                        function() {
                            var $tdDiv = $('td:visible div:eq(' + n + ')', this);
                            $tdDiv.css('width', nw);
                            g.addTitleToCell($tdDiv);
                        }
                    );
                    this.hDiv.scrollLeft = this.bDiv.scrollLeft;
                    $('div:eq(' + n + ')', this.cDrag).siblings().show();
                    $('.dragging', this.cDrag).removeClass('dragging');
                    this.rePosDrag();
                    this.fixHeight();
                    this.colresize = false;
                    if ($.cookies) {
                        var name = p.colModel[n].name; // Store the widths in the cookies
                        $.cookie('flexiwidths/' + name, nw);
                    }
                } else if (this.vresize) {
                    this.vresize = false;
                } else if (this.colCopy) {
                    $(this.colCopy).remove();
                    if (this.dcolt !== null) {

                        if (this.dcoln > this.dcolt) $('th:eq(' + this.dcolt + ')', this.hDiv).before(this.dcol);
                        else $('th:eq(' + this.dcolt + ')', this.hDiv).after(this.dcol);
                        this.switchCol(this.dcoln, this.dcolt);

                        $(this.cdropleft).remove();
                        $(this.cdropright).remove();
                        this.rePosDrag();
                        if (p.onDragCol) {
                            p.onDragCol(this.dcoln, this.dcolt);
                        }
                    }
                    this.dcol = null;
                    this.hset = null;
                    this.dcoln = null;
                    this.dcolt = null;
                    this.colCopy = null;
                    $('.thMove', this.hDiv).removeClass('thMove');
                    $(this.cDrag).show();
                }
                $('body').css('cursor', 'default');
                $('body').noSelect(false);
            },
            toggleCol: function(cid, visible) {
                var ncol = $("th[axis='col" + cid + "']", this.hDiv)[0];
                var n = $('thead th', g.hDiv).index(ncol);
                var cb = $('input[value=' + cid + ']', g.nDiv)[0];
                if (visible == null) {
                    visible = ncol.hidden;
                }
                if ($('input:checked', g.nDiv).length < p.minColToggle && !visible) {
                    return false;
                }
                if (visible) {
                    ncol.hidden = false;
                    $(ncol).show();
                    cb.checked = true;
                } else {
                    ncol.hidden = true;
                    $(ncol).hide();
                    cb.checked = false;
                }
                $('tbody tr', t).each(
                    function() {
                        if (visible) {
                            $('td:eq(' + n + ')', this).show();
                        } else {
                            $('td:eq(' + n + ')', this).hide();
                        }
                    }
                );
                this.rePosDrag();
                if (p.onToggleCol) {
                    p.onToggleCol(cid, visible);
                }
                return visible;
            },
            switchCol: function(cdrag, cdrop) { //switch columns
                $('tbody tr', t).each(
                    function() {
                        if (cdrag > cdrop) $('td:eq(' + cdrop + ')', this).before($('td:eq(' + cdrag + ')', this));
                        else $('td:eq(' + cdrop + ')', this).after($('td:eq(' + cdrag + ')', this));
                    }
                );
                //switch order in nDiv
                if (cdrag > cdrop) {
                    $('tr:eq(' + cdrop + ')', this.nDiv).before($('tr:eq(' + cdrag + ')', this.nDiv));
                } else {
                    $('tr:eq(' + cdrop + ')', this.nDiv).after($('tr:eq(' + cdrag + ')', this.nDiv));
                }
                /* ie6 切换列的时候报错，注释掉就不报错了 2013.9.11 */
                /*if (browser.msie && browser.version < 7.0) {
                    $('tr:eq(' + cdrop + ') input', this.nDiv)[0].checked = true;
                }*/
                this.hDiv.scrollLeft = this.bDiv.scrollLeft;
            },
            scroll: function() {
                this.hDiv.scrollLeft = this.bDiv.scrollLeft;
                this.rePosDrag();
            },
            addData: function(data) { //parse data
                if(data.rows.length == 0) {
                    $('table', g.obDiv).html('');
                };
                if (p.dataType == 'json') {
                    data = $.extend({
                        rows: [],
                        pageNo: 0,
                        total: 0
                    }, data);
                }
                if (p.preProcess) {
                    data = p.preProcess(data);
                }
                $('.pReload', this.pDiv).removeClass('loading');
                this.loading = false;
                if (!data) {
                    $('.pPageStat', this.pDiv).html(p.errormsg);
                    if (p.onSuccess) p.onSuccess(this);
                    return false;
                }
                p.total = data.total;
                if (p.total === 0) {
                    $('tr, a, td, div', t).unbind();
                    $(t).empty();
                    p.pages = 1;
                    p.pageNo = 1;
                    this.buildpager();
                    $('.pPageStat', this.pDiv).html(p.nomsg);
                    if (p.onSuccess) p.onSuccess(this);
                    return false;
                }
                p.pages = Math.ceil(p.total / p.pageSize);
                p.pageNo = data.pageNo;
                this.buildpager();
                //build new body
                var tbody = document.createElement('tbody');
         
                var obTbody = document.createElement('tbody');
               
                if (p.dataType == 'json') {
                    $.each(data.rows, function(i, row) {
                        var tr = document.createElement('tr');
                        var obTr = document.createElement('tr');
                        var obTd = document.createElement('td');
                        obTd.innerHTML = i + 1;

                        $(tr).data("row", row);
                        if (row.name) tr.name = row.name;
                        if (row.color) {
                            $(tr).css('background', row.color);
                        } else {
                            if (i % 2 && p.striped) tr.className = 'erow';
                        }
                        if (row.colorful) {
                            $(tr).addClass(row.colorful);
                        }
                        if (row[p.idProperty]) {
                            tr.id = 'row' + row[p.idProperty];
                        }
                        $('thead tr:first th', g.hDiv).each( //add cell
                            function() {
                                var td = document.createElement('td');
                                
                                var idx = $(this).attr('axis').substr(3);
                                td.align = this.align;
                                var col = p.colModel[idx];
                                var tagname = col ? col.tagName : 'DIV',
                                    linkText = col ? col.linkText : '',
                                    linkBtn = col ? col.linkBtn : '',
                                    onclick = col ? col.onclick : null,
                                    display = col ? col.display : '',
                                    customName = col ? col.customName : '',
                                    checkedCallback = col ? col.checkedCallback : null,
                                    format = col ? col.format : null;
                                if (col.customClass) {
                                    $(td).addClass(col.customClass);
                                }
                                // If each row is the object itself (no 'cell' key)
                                if (typeof row.cell == 'undefined') {
                                    var colName = col ? col.name : '',
                                        colValue = null;
                                    if (colName && colName.indexOf(".") > 0) {
                                        try {
                                            colValue = eval("row." + colName);
                                        } catch (e) {}
                                    } else {
                                        colValue = row[colName];
                                    }
                                    if (colValue == undefined || colValue == null) {
                                        if (tagname && tagname == 'input') {
                                            td.innerHTML = '<input type="input" class="ui-input" />';
                                        } else if (linkText) {
                                            if ($.type(linkText) == 'array') {
                                                for (var l = 0; l < linkText.length; l++) {
                                                    var a = $('<a ltNo="' + l + '" href="#" class="custom-link">' + linkText[l].name + '</a>');
                                                    $(td).append(a);
                                                }
                                                $(td).click(function(e) {
                                                    if (e.target.tagName == 'A') {
                                                        linkText[$(e.target).attr("ltNo")].onclick(row, e.target);
                                                        return false;
                                                    }
                                                })
                                            } else {
                                                var a = $('<a href="#" class="custom-link">' + linkText.name + '</a>');
                                                $(td).append(a);
                                                $(td).click(function(e) {
                                                    if (e.target.tagName == 'A') {
                                                        linkText.onclick(row, e.target);
                                                        return false;
                                                    }
                                                })
                                            }


                                        } else if (display == 'checkbox') {
                                            td.innerHTML = '<input name="subcheckbox" type="checkbox" />';
                                            if(row.checked === true || (checkedCallback && $.isFunction(checkedCallback) && checkedCallback(row))){
                                                $("input",td).attr("checked",true);
                                                $(td).attr("tdSelected",true);
                                            }
                                            $(td).addClass('showCheckbox');
                                        } else if (display == '序号') {
                                            $(td).css({
                                                'background': p.orderColor,
                                                'borderRight': '1px solid #ddd'
                                            }).addClass('OrderNumber');
                                            td.innerHTML = i + 1;
                                            $(td).hide();
                                        } else {
                                            var tdText = '&nbsp;';
                                            if (format && $.isFunction(format)) {
                                                tdText = format(tdText, row);
                                            }
                                            td.innerHTML = tdText;
                                        }
                                    } else {
                                        var tdText = colValue;                                        

                                        if (format && $.isFunction(format)) {
                                            tdText = format(tdText, row);
                                        }

                                        if(col && col.dic){
                                            $(td).attr("dicVal",colValue).addClass("ui-loading");
                                            tdText = "";
                                        }

                                        if (col.onclick) {
                                            td.innerHTML = '<a href="#">' + tdText + '</a>';
                                        } else {
                                            td.innerHTML = tdText;
                                        }
                                    }
                                    customName && $(td).attr('name', customName);

                                    if (onclick && $.isFunction(onclick)) {
                                        $(td).click(function(e) {
                                            e.preventDefault();
                                            if (e.target.tagName == 'A') {
                                                onclick(row, e.target);
                                            }
                                        })
                                    }
                                    

                                } else {
                                    // If the json elements aren't named (which is typical), use numeric order
                                    var iHTML = '';
                                    if (typeof row.cell[idx] != "undefined") {
                                        iHTML = (row.cell[idx] !== null) ? row.cell[idx] : ''; //null-check for Opera-browser
                                    } else {
                                        iHTML = row.cell[p.colModel[idx].name];
                                    }
                                    td.innerHTML = p.__mw.datacol(p, $(this).attr('abbr'), iHTML); //use middleware datacol to format cols
                                }
                                // If the content has a <BGCOLOR=nnnnnn> option, decode it.
                                var offs = td.innerHTML.indexOf('<BGCOLOR=');
                                if (offs > 0) {
                                    $(td).css('background', text.substr(offs + 7, 7));
                                }

                                $(td).attr('abbr', $(this).attr('abbr'));
                                if($(td).attr("tdSelected")){
                                    $(tr).addClass("trSelected");
                                }
                                $(tr).append(td);
                                $(obTr).append(obTd);
                                td = null;
                                obTd = null;
                            }
                        );
                        if ($('thead', this.gDiv).length < 1) { //handle if grid has no headers
                            for (idx = 0; idx < row.cell.length; idx++) {
                                var td = document.createElement('td');
                                // If the json elements aren't named (which is typical), use numeric order
                                if (typeof row.cell[idx] != "undefined") {
                                    td.innerHTML = (row.cell[idx] != null) ? row.cell[idx] : ''; //null-check for Opera-browser
                                } else {
                                    td.innerHTML = row.cell[p.colModel[idx].name];
                                }
                                $(tr).append(td);
                                td = null;
                            }
                        }
                        $(tbody).append(tr);
            
                        $(obTbody).append(obTr);
                        tr = null;
                        obTr = null;
                    });
                }

                /* 数据字典加载 */
                $('thead tr:first th', g.hDiv).each(function(idx,it){
                    var dic = $(this).attr("dic");
                    if(dic){}else return;
                    var codes = {};
                    $("tr",tbody).each(function(index,item){
                        var td = $("td:eq("+idx+")",this);
                        var c = td.attr("dicVal");
                        if(c){
                            codes[c]=1;
                        }
                    });
                    var query = [];
                    $.each(codes,function(index,item){
                        query.push(index);
                    });
                    if(query.length > 0){
                        $.ajax({
                            type : "POST",
                            url : $.CONTEXT_PATH + "/platform/dictionary/data/api",
                            data : {type : "query",dic : dic,codes : query},
                            success : function(res){
                                $("tr",tbody).each(function(index,item){
                                    var td = $("td:eq("+idx+")",this);
                                    td.removeClass("ui-loading");
                                    if(res){
                                        $("div",td).html(res[td.attr("dicVal")]);
                                    }
                                });
                            }
                        });
                    }

                });

                $('tr', t).unbind();
                $(t).empty();
                $(t).append(tbody);
                $('table', g.obDiv).empty();
                $('table', g.obDiv).append(obTbody);
                this.addCellProp();
                this.addRowProp();
                this.rePosDrag();
                tbody = null;
                data = null;
                i = null;
                if (p.onSuccess) {
                    p.onSuccess(g.bDiv, this);
                }
                if (p.hideOnSubmit) {
                    $(g.block).remove();
                }
                this.hDiv.scrollLeft = this.bDiv.scrollLeft;
                if (browser.opera) {
                    $(t).css('visibility', 'visible');
                }
                if (p.showCheckbox) {
                    var checkAll = $('input[name="checkAll"]', g.hDiv),
                        subCheck = $('input[name="subcheckbox"]', g.bDiv),
                        th = $('thead tr:first th', g.hDiv);
                    th.click(function() {
                        var checkbox = $(this).find('input[name="checkAll"]');
                        subCheck.prop('checked', checkbox.prop('checked'));
                        var tr = $('tbody tr', g.bDiv);
                        checkbox.prop('checked') ? tr.addClass('trSelected') : tr.removeClass('trSelected');
                    });

                    subCheck.click(function() {
                        var flag = subCheck.length == $('input[name="subcheckbox"]:checked', g.bDiv).length ? true : false;
                        checkAll.prop('checked', flag);
                        var tr = $(this).parent().parent().parent();
                        $(this).prop('checked') ? tr.addClass('trSelected') : tr.removeClass('trSelected');
                    })

                }

            },
            changeSort: function(th) { //change sortorder
                if (this.loading) {
                    return true;
                }
                $(g.nDiv).hide();
                //$(g.nBtn).hide();
                if (p.sortname == $(th).attr('abbr')) {
                    if (p.sortorder == 'asc') {
                        p.sortorder = 'desc';
                    } else {
                        p.sortorder = 'asc';
                    }
                }
                //$(th).addClass('sorted').siblings().removeClass('sorted');
                $('.sdesc', this.hDiv).removeClass('sdesc');
                $('.sasc', this.hDiv).removeClass('sasc');
                $('div', th).addClass('s' + p.sortorder);
                p.sortname = $(th).attr('abbr');
                var orderFieldData = $(th).data('orderField');
                if (orderFieldData == undefined) {
                    p.orderField = '';
                } else {
                    p.orderField = orderFieldData;
                }
                if (p.onChangeSort) {
                    p.onChangeSort(p.sortname, p.sortorder);
                } else {
                    this.populate();
                }
            },
            buildpager: function() { //rebuild pager based on new properties
                $('.pcontrol input', this.pDiv).val(p.pageNo);
				p.pageValue = p.pageNo;
                $('.pcontrol span', this.pDiv).html(p.pages);
                var r1 = (p.pageNo - 1) * p.pageSize + 1;
                var r2 = r1 + p.pageSize - 1;
                if (p.total < r2) {
                    r2 = p.total;
                }
                var stat = p.pagestat;
                stat = stat.replace(/{from}/, r1);
                stat = stat.replace(/{to}/, r2);
                stat = stat.replace(/{total}/, p.total);
                $('.pPageStat', this.pDiv).html(stat);
            },
            populate: function(isSearch) { //get latest data
                if (this.loading) {
                    return true;
                }
                if (p.onSubmit) {
                    var gh = p.onSubmit();
                    if (!gh) {
                        return false;
                    }
                }
                this.loading = true;

                if (!p.url) {
                    return false;
                }

                $('.pPageStat', this.pDiv).html(p.procmsg);
                $('.pReload', this.pDiv).addClass('loading');
                $(g.block).css({
                    top: g.bDiv.offsetTop + $(g.hDiv).height()
                });
                if (p.hideOnSubmit) {
                    $(this.gDiv).prepend(g.block);
                }
                if (browser.opera) {
                    $(t).css('visibility', 'hidden');
                }
                if (!p.newp) {
                    p.newp = 1;
                }
                /*if (p.pageNo > p.pages) {
                    p.pageNo = p.pages;
                }*/
                p.pageNo = 1;
                var param = [{
                    name: 'pageNo',
                    value: isSearch ? 1 : p.newp
                }, {
                    name: 'pageSize',
                    value: p.pageSize
                }];

                

                if (p.params.length) {
                    for (var pi = 0; pi < p.params.length; pi++) {
                        param[param.length] = p.params[pi];
                    }
                }
                if (p.sortname) {
                    var conditionColumn = '';
                    conditionColumn = (p.orderField == '' ? p.sortname : p.orderField);
                    param.push({
                        name: 'condition.orderParts[0].column',
                        value: conditionColumn
                    }, {
                        name: 'condition.orderParts[0].sort',
                        value: p.sortorder.toUpperCase()
                    });
                }
                if(p.customData){
                    for(var i = 0; i < p.customData.length; i++) {
                        param.push({
                            name: p.customData[i].name,
                            value: p.customData[i].value
                        });
                    }
                };
                
                // Add:  searchFormId
                if (p.searchFormId) {
                    var form = $("#" + p.searchFormId);
                    if (form.length > 0) {
                        var arr = form.serializeArray();
                        if (arr.length > 0) {
                            for (var i = 0; i < arr.length; i++) {
                                param.push(arr[i]);
                            }
                        }
                    }
                }
                var currentParam = [];
                $.each(param,function(idx,it){
                  if(it.name==null || it.name == '' || it.value == null || it.value == '')return;
				 if(p.hasreload) {
                    if (it.name == "pageNo") {
                        it.value = p.pageValue;
                    };
                    p.hasreload = false;
                  }
                  currentParam.push(it);
                });

                $.ajax({
                    type: p.method,
                    url: p.url,
                    data: currentParam,
                    cache: false,
                    dataType: p.dataType,
                    contentType: p.contentType,
                    success: function(data) {
                        g.addData(data);
                        g.obDiv.style.top = (26 + 'px');
                        //g.bDiv.style.backgroundPosition = '0 0';
                        //g.dgDiv.style.backgroundPositionY = '0';
                        g.bDiv.scrollTop = 0;
                    },
                    complete: function() {
                        if (p.searchFormId) {
                            var form = $("#" + p.searchFormId),
                                submitBtn;
                            submitBtn = form.find('*[type="submit"]');
                            if ($.btn) {
                                $.btn.enabled(submitBtn);
                            }
                            if (p.searchCallback) {
                                p.searchCallback(g);
                            }
                        }
                    },
                    error: function(XMLHttpRequest, textStatus, errorThrown) {
                        $('.pPageStat', this.pDiv).html('');
                        $('.pReload', this.pDiv).removeClass('loading');
                        $(g.block).remove();
                        $.message && $.message('数据格式错误。', 3, 4, false, true);
                        try {
                            if (p.onError) p.onError(XMLHttpRequest, textStatus, errorThrown);
                        } catch (e) {}
                    }
                });


            },
            doSearch: function() {
                p.query = $('input[name=q]', g.sDiv).val();
                p.qtype = $('select[name=qtype]', g.sDiv).val();
                p.newp = 1;
                this.populate();
            },
            changePage: function(ctype) { //change page
                if (this.loading) {
                    return true;
                }
                switch (ctype) {
                    case 'first':
                        p.newp = 1;
                        break;
                    case 'prev':
                        if (p.pageNo > 1) {
                            p.newp = parseInt(p.pageNo, 10) - 1;
                        }
                        break;
                    case 'next':
                        if (p.pageNo < p.pages) {
                            p.newp = parseInt(p.pageNo, 10) + 1;
                        }
                        break;
                    case 'last':
                        p.newp = p.pages;
                        break;
                    case 'input':
                        var nv = parseInt($('.pcontrol input', this.pDiv).val(), 10);
                        if (isNaN(nv)) {
                            nv = 1;
                        }
                        if (nv < 1) {
                            nv = 1;
                        } else if (nv > p.pages) {
                            nv = p.pages;
                        }
                        $('.pcontrol input', this.pDiv).val(nv);
                        p.newp = nv;
                        break;
                }
                if (p.newp == p.pageNo) {
                    return false;
                }
                if (p.onChangePage) {
                    p.onChangePage(p.newp);
                } else {
                    this.populate();
                }
            },
            addCellProp: function() {
                $('tbody tr td', g.bDiv).each(function() {
                    var tdDiv = document.createElement('div');
                    var n = $('td', $(this).parent()).index(this);
                    var pth = $('th:eq(' + n + ')', g.hDiv).get(0);
                    if (pth != null) {
                        if (p.sortname == $(pth).attr('abbr') && p.sortname) {
                            //this.className = 'sorted';
                        }
                        $(tdDiv).css({
                            textAlign: pth.align,
                            width: $('div:first', pth)[0].style.width
                        });

                        var align = p.colModel[n] ? p.colModel[n].align : 'center';
                        if (align && align == 'center') {
                            $(tdDiv).css('text-align', 'center');
                        } else if (align && align == 'right') {
                            $(tdDiv).css('text-align', 'right')
                                .addClass('alignRight');
                        }

                        if (pth.hidden) {
                            $(this).css('display', 'none');
                        }
                    }
                    if (p.nowrap == false) {
                        $(tdDiv).css('white-space', 'normal');
                    }
                    if (this.innerHTML == '') {
                        this.innerHTML = '&nbsp;';
                    }
                    if (align && align == 'right') {
                        tdDiv.innerHTML = this.innerHTML + '&nbsp;&nbsp;&nbsp;';
                    } else {
                        tdDiv.innerHTML = this.innerHTML;
                    }

                    var prnt = $(this).parent()[0];
                    var pid = false;
                    if (prnt.id) {
                        pid = prnt.id.substr(3);
                    }
                    if (pth != null) {
                        if (pth.process) pth.process(tdDiv, pid);
                    }
                    $(this).empty().append(tdDiv).removeAttr('width'); //wrap content
                    g.addTitleToCell(tdDiv);
                });

            },
            // Add: getSelectedRows function
            getSelectedRows: function() {
                var rows = $("tr.trSelected", g.bDiv);
                if (rows.length == 0) return [];
                var result = [];
                rows.each(function(index) {
                    result.push($(this).data("row"));
                });
                return result.slice(0);
            },
            getAllRows: function() {
                var rows = $("tr", g.bDiv);
                if (rows.length == 0) return [];
                var result = [];
                rows.each(function(index) {
                    result.push($(this).data("row"));
                });
                return result.slice(0);
            },
            flexReload: function() {
                g.populate();
            },
            datagridResize: function(p) {
                var bDivSiblingsHeight = 0,
                    bDivHeight = 0;
                $(g.tDiv).length > 0 ? bDivSiblingsHeight += $(g.tDiv).height() : bDivSiblingsHeight;
                $(g.mDiv).length > 0 ? bDivSiblingsHeight += $(g.mDiv).height() : bDivSiblingsHeight;
                $(g.pDiv).length > 0 ? bDivSiblingsHeight += $(g.pDiv).height() : bDivSiblingsHeight;
                $(g.hDiv).length > 0 ? bDivSiblingsHeight += $(g.hDiv).height() : bDivSiblingsHeight;
                bDivHeight = p.height - bDivSiblingsHeight - 10;
                g.bDiv.style.height = bDivHeight + 'px';
                //g.bInnerDiv.style.height = bDivHeight + 'px';
                //g.obDiv.style.height = bDivHeight + 'px';
                //g.bInnerDiv.style.width = p.width - $(g.obDiv).width();
                g.gDiv.style.width = p.width + 'px';

                $(g.bDiv).css({
                    width: p.width - $(g.obDiv).width()
                })
        
            },
            flexOptions: function(p, _p) {
                $.extend(p, _p)
            },
            flexAddData: function(data) {
                g.addData(data);
            },
            getCellDim: function(obj) { // get cell prop for editable event
                var ht = parseInt($(obj).height(), 10);
                var pht = parseInt($(obj).parent().height(), 10);
                var wt = parseInt(obj.style.width, 10);
                var pwt = parseInt($(obj).parent().width(), 10);
                var top = obj.offsetParent.offsetTop;
                var left = obj.offsetParent.offsetLeft;
                var pdl = parseInt($(obj).css('paddingLeft'), 10);
                var pdt = parseInt($(obj).css('paddingTop'), 10);
                return {
                    ht: ht,
                    wt: wt,
                    top: top,
                    left: left,
                    pdl: pdl,
                    pdt: pdt,
                    pht: pht,
                    pwt: pwt
                };
            },
            addRowProp: function() {

                $('tbody tr', g.bDiv).on('click', function(e) {
                    var obj = (e.target || e.srcElement);
                    if (obj.href || obj.type) return true;
                    if (e.ctrlKey || e.metaKey || p.showCheckbox) {
                        // mousedown already took care of this case
                        return;
                    }
                    $(this).toggleClass('trSelected');
                    if (p.singleSelect && !g.multisel) {
                        $(this).siblings().removeClass('trSelected');
                        p.onSingleClick && p.onSingleClick(this, $(this).data("row"));
                    }
                }).on('mousedown', function(e) {
                    /*if (e.shiftKey) {
                        $(this).toggleClass('trSelected');
                        g.multisel = true;
                        this.focus();
                        $(g.gDiv).noSelect();
                    }*/
                    /*if (e.ctrlKey || e.metaKey) {
                        $(this).toggleClass('trSelected');
                        g.multisel = true;
                        this.focus();
                    }*/
                }).on('mouseup', function(e) {
                    if (g.multisel && !(e.ctrlKey || e.metaKey)) {
                        g.multisel = false;
                        $(g.gDiv).noSelect(false);
                    }
                }).on('dblclick', function() {
                    if (p.onDoubleClick) {
                        p.onDoubleClick(this, g, p);
                    }
                }).hover(function(e) {
                    /*if (g.multisel && e.shiftKey) {
                        $(this).toggleClass('trSelected');
                    }*/
                    if (!$(this).hasClass('trSelected')) {
                        $(this).addClass('trOver');
                    }
                }, function() {
                    $(this).removeClass('trOver');
                });
            },

            combo_flag: true,
            combo_resetIndex: function(selObj) {
                if (this.combo_flag) {
                    selObj.selectedIndex = 0;
                }
                this.combo_flag = true;
            },
            combo_doSelectAction: function(selObj) {
                eval(selObj.options[selObj.selectedIndex].value);
                selObj.selectedIndex = 0;
                this.combo_flag = false;
            },
            //Add title attribute to div if cell contents is truncated
            addTitleToCell: function(tdDiv) {
                if (p.addTitleToCell) {
                    var $span = $('<span />').css('display', 'none'),
                        $div = (tdDiv instanceof jQuery) ? tdDiv : $(tdDiv),
                        div_w = $div.outerWidth(),
                        span_w = 0;

                    $('body').children(':first').before($span);
                    $span.html($div.html());
                    $span.css('font-size', '' + $div.css('font-size'));
                    $span.css('padding-left', '' + $div.css('padding-left'));
                    span_w = $span.innerWidth();
                    $span.remove();

                    if (span_w > div_w) {
                        $div.attr('title', $div.text());
                    } else {
                        $div.removeAttr('title');
                    }
                }
            },
            autoResizeColumn: function(obj) {
                if (!p.dblClickResize) {
                    return;
                }
                var n = $('div', this.cDrag).index(obj),
                    $th = $('th:visible div:eq(' + n + ')', this.hDiv),
                    ol = parseInt(obj.style.left, 10),
                    ow = $th.width(),
                    nw = 0,
                    nl = 0,
                    $span = $('<span />');
                $('body').children(':first').before($span);
                $span.html($th.html());
                $span.css('font-size', '' + $th.css('font-size'));
                $span.css('padding-left', '' + $th.css('padding-left'));
                $span.css('padding-right', '' + $th.css('padding-right'));
                nw = $span.width();
                $('tr', this.bDiv).each(function() {
                    var $tdDiv = $('td:visible div:eq(' + n + ')', this),
                        spanW = 0;
                    $span.html($tdDiv.html());
                    $span.css('font-size', '' + $tdDiv.css('font-size'));
                    $span.css('padding-left', '' + $tdDiv.css('padding-left'));
                    $span.css('padding-right', '' + $tdDiv.css('padding-right'));
                    spanW = $span.width();
                    nw = (spanW > nw) ? spanW : nw;
                });
                $span.remove();
                nw = (p.minWidth > nw) ? p.minWidth : nw;
                nl = ol + (nw - ow);
                $('div:eq(' + n + ')', this.cDrag).css('left', nl);
                this.colresize = {
                    nw: nw,
                    n: n
                };
                g.dragEnd();
            },
            pager: 0
        };

        g = p.getGridClass(g); //get the grid class

        //var ThW = 0;
        //var count = 0;
        if (p.colModel) { //create model if any
            thead = document.createElement('thead');
            var tr = document.createElement('tr');
            for (var i = 0; i < p.colModel.length; i++) {
                var cm = p.colModel[i];
                var th = document.createElement('th');
                $(th).attr('axis', 'col' + i);
                if (cm) { // only use cm if its defined
                    if ($.cookies) {
                        var cookie_width = 'flexiwidths/' + cm.name; // Re-Store the widths in the cookies
                        if ($.cookie(cookie_width) != undefined) {
                            cm.width = $.cookie(cookie_width);
                        }
                    }
                    if (cm.display != undefined && cm.display != 'checkbox') {
                        th.innerHTML = cm.display;
                    }
                    if (p.showCheckbox && cm.display == 'checkbox') {
                        th.innerHTML = '<input id="checkAll" name="checkAll" type="checkbox" />';
                        $(th).data('checkbox', 'show')
                            .addClass('showCheckbox');
                        cm.align = 'center';
                        cm.width = 30;
                    }
                    if (p.showOrderNumber && cm.display == '序号') {
                        th.innerHTML = '序号';
                        $(th).data('orderNumber', "show")
                            .addClass('OrderNumber');
                        cm.align = 'center';
                        cm.width = 30;
                        $(th).hide();
                    }
                    if (cm.hide) {
                        $(th).hide();
                    }
                    if (cm.name && cm.sortable) {
                        $(th).attr('abbr', cm.name);
                    }
                    if (cm.align) {
                        th.align = cm.align;
                    }
                    if (cm.width) {
                        $(th).attr('width', cm.width);
                    }
                    if (cm.orderField) {
                        $(th).data('orderField', cm.orderField);
                    }
                    if(cm.dic){
                        $(th).attr("dic",cm.dic);
                    }
                    /*if (!cm.hide && (i != p.colModel.length - 1)) {
                        ThW += cm.width;
                        count += 1;
                    }*/
                    if ($(cm).attr('hide')) {
                        th.hidden = true;
                    }
                    if (cm.process) {
                        th.process = cm.process;
                    }
                } else {
                    th.innerHTML = "";
                    $(th).attr('width', 30);
                }
                $(tr).append(th);
            }
            $(thead).append(tr);
            $(t).prepend(thead);

        } // end if p.colmodel
        //init divs
        g.dgDiv = document.createElement('div');
        g.ohDiv = document.createElement('div');
        g.obDiv = document.createElement('div');
        g.gDiv = document.createElement('div'); //create global container
        g.mDiv = document.createElement('div'); //create title container
        g.hDiv = document.createElement('div'); //create header container
        g.bDiv = document.createElement('div'); //create body container
        g.vDiv = document.createElement('div'); //create grip
        g.rDiv = document.createElement('div'); //create horizontal resizer
        g.cDrag = document.createElement('div'); //create column drag
        g.block = document.createElement('div'); //creat blocker
        g.nDiv = document.createElement('div'); //create column show/hide popup
        g.nBtn = document.createElement('div'); //create column show/hide button
        g.iDiv = document.createElement('div'); //create editable layer
        g.tDiv = document.createElement('div'); //create toolbar
        g.sDiv = document.createElement('div');
        g.pDiv = document.createElement('div'); //create pager container
        g.bInnerDiv = document.createElement('div');

        if (p.colResize === false) { //don't display column drag if we are not using it
            $(g.cDrag).css('display', 'none');
        }

        if (!p.usepager) {
            g.pDiv.style.display = 'none';
        }
        g.hTable = document.createElement('table');
        g.obTable = document.createElement('table');
        g.gDiv.className = 'flexigrid';
        g.bInnerDiv.className = 'bInnerDiv';
        g.gDiv.id = p.id;
        if (p.width != 'auto') {
            g.gDiv.style.width = p.width + isNaN(p.width) ? '' : 'px';
        }
        //add conditional classes
        if (browser.msie) {
            $(g.gDiv).addClass('ie');
        }
        if (p.novstripe) {
            $(g.gDiv).addClass('novstripe');
        }
        $(t).before(g.gDiv);
        $(g.gDiv).append(t);
        //set toolbar
        g.tDiv.className = 'tDiv';
        var tDiv2 = document.createElement('div');
        tDiv2.className = 'tDiv2';
        if (p.buttons) {

            for (var i = 0; i < p.buttons.length; i++) {
                var btn = p.buttons[i];
                if (!btn) continue;
                if (!btn.separator) {
                    var btnDiv = document.createElement('div');
                    btnDiv.className = 'fbutton';
                    btnDiv.innerHTML = ('<div><a href="#">') + (btn.hidename ? '&nbsp;' : btn.name) + ('</a></div>');
                    //if (btn.bclass) $('a', btnDiv).addClass(btn.bclass);
                    $('a', btnDiv).html('<i class="iconfont ' + btn.bclass + '"></i>' + (btn.name == undefined ? '' : btn.name));

                    if (btn.bimage) // if bimage defined, use its string as an image url for this buttons style (RS)
                        $('span', btnDiv).css('background', 'url(' + btn.bimage + ') no-repeat center left');
                    //$('span',btnDiv).css( 'paddingLeft', 20 );

                    if (btn.tooltip) // add title if exists (RS)
                        $('span', btnDiv)[0].title = btn.tooltip;

                    btnDiv.onpress = btn.onpress;
                    btnDiv.name = btn.name;
                    if (btn.id) {
                        btnDiv.id = btn.id;
                    }
                    if (btn.onpress) {
                        $(btnDiv).click(function(e) {
                            e.preventDefault();
                            //this.onpress(this.id || this.name, g.gDiv, g);
                            this.onpress($('a', this), g.gDiv, g);
                        });
                    }
                    $(tDiv2).append(btnDiv);
                    if (browser.msie && browser.version < 7.0) {
                        $(btnDiv).hover(function() {
                            $(this).addClass('fbOver');
                        }, function() {
                            $(this).removeClass('fbOver');
                        });
                    }
                } else {
                    $(tDiv2).append("<div class='btnseparator'></div>");
                }
            }

        }
        /* else {
            g.hDiv.style.borderTop = '1px solid #ddd';
        }*/
        $(g.tDiv).append(tDiv2);
        $(g.tDiv).append("<div style='clear:both'></div>");
        $(g.gDiv).prepend(g.tDiv);
        if (!p.showOperate) {
            $(g.tDiv).css({
                'height': "1px",
                "border": "none"
            })
        }
        g.hDiv.className = 'hDiv';

        // Define a combo button set with custom action'ed calls when clicked.
        if (p.combobuttons && $(g.tDiv2)) {
            var btnDiv = document.createElement('div');
            btnDiv.className = 'fbutton';

            var tSelect = document.createElement('select');
            $(tSelect).change(function() {
                g.combo_doSelectAction(tSelect)
            });
            $(tSelect).click(function() {
                g.combo_resetIndex(tSelect)
            });
            tSelect.className = 'cselect';
            $(btnDiv).append(tSelect);

            for (i = 0; i < p.combobuttons.length; i++) {
                var btn = p.combobuttons[i];
                if (!btn.separator) {
                    var btnOpt = document.createElement('option');
                    btnOpt.innerHTML = btn.name;

                    if (btn.bclass)
                        $(btnOpt)
                            .addClass(btn.bclass)
                            .css({
                                paddingLeft: 20
                            });
                    if (btn.bimage) // if bimage defined, use its string as an image url for this buttons style (RS)
                        $(btnOpt).css('background', 'url(' + btn.bimage + ') no-repeat center left');
                    $(btnOpt).css('paddingLeft', 20);

                    if (btn.tooltip) // add title if exists (RS)
                        $(btnOpt)[0].title = btn.tooltip;

                    if (btn.onpress) {
                        btnOpt.value = btn.onpress;
                    }
                    $(tSelect).append(btnOpt);
                }
            }
            $('.tDiv2').append(btnDiv);
        }
        g.dgDiv.className = 'dgDiv';
        $(g.gDiv).append(g.dgDiv);
        $(g.dgDiv).append(g.hDiv);
        g.ohDiv.className = 'ohDiv';
        g.obDiv.className = 'obDiv';
        $(g.dgDiv).append(g.ohDiv);
        $(g.dgDiv).append(g.obDiv);
        $(g.obDiv).append(g.obTable);
        $(g.ohDiv).append('<table><thead><tr><th>序号</th></tr></thead></table>');
        $(g.dgDiv).css({
            'position': 'relative'
        });
        $(g.hDiv).css({
            'position': 'relative',
            'left': '47px'
        })
        //$(t).before(g.hDiv);
        g.hTable.cellPadding = 0;
        g.hTable.cellSpacing = 0
        $(g.hDiv).append('<div class="hDivBox"></div>');
        $('div', g.hDiv).append(g.hTable);

        var thead = $("thead:first", t).get(0);
        if (thead) $(g.hTable).append(thead);
        thead = null;
        if (!p.colmodel) var ci = 0;
        $('thead tr:first th', g.hDiv).each(function(n) {
            var thdiv = document.createElement('div');
            if ($(this).attr('abbr')) {
                $(this).click(function(e) {
                    if (!$(this).hasClass('thOver')) return false;
                    var obj = (e.target || e.srcElement);
                    if (obj.href || obj.type) return true;
                    g.changeSort(this);
                });
                if ($(this).attr('abbr') == p.sortname) {
                    //this.className = 'sorted';
                    thdiv.className = 's' + p.sortorder;
                }
            }
            if (this.hidden) {
                $(this).hide();
            }
            if (!p.colmodel) {
                $(this).attr('axis', 'col' + ci++);
            }


            // if there isn't a default width, then the column headers don't match
            // i'm sure there is a better way, but this at least stops it failing
            if (this.width == '') {
                this.width = 100;
            }

            $(thdiv).css({
                textAlign: "center",
                width: this.width + 'px'
            });


            thdiv.innerHTML = this.innerHTML;


            $(this).empty().append(thdiv).removeAttr('width').mousedown(function(e) {
                g.dragStart('colMove', e, this);
            }).hover(function() {
                if (!g.colresize && !$(this).hasClass('thMove') && !g.colCopy) {
                    $(this).addClass('thOver');
                }
                if ($(this).attr('abbr') != p.sortname && !g.colCopy && !g.colresize && $(this).attr('abbr')) {
                    $('div', this).addClass('s' + p.sortorder);
                } else if ($(this).attr('abbr') == p.sortname && !g.colCopy && !g.colresize && $(this).attr('abbr')) {
                    //var no = (p.sortorder == 'asc') ? 'desc' : 'asc';
                    //$('div', this).removeClass('s' + p.sortorder).addClass('s' + no);
                }
                if (g.colCopy) {
                    var n = $('th', g.hDiv).index(this);
                    if (n == g.dcoln) {
                        return false;
                    }
                    if (n < g.dcoln) {
                        $(this).append(g.cdropleft);
                    } else {
                        $(this).append(g.cdropright);
                    }
                    g.dcolt = n;
                } else if (!g.colresize) {
                    var nv = $('th:visible', g.hDiv).index(this);
                    var onl = parseInt($('div:eq(' + nv + ')', g.cDrag).css('left'), 10);
                    var nw = jQuery(g.nBtn).outerWidth();
                    var nl = onl - nw + Math.floor(p.cgwidth / 2);
                    $(g.nDiv).hide();
                    //$(g.nBtn).hide();
                    //var isOrderNumber = $(this).data('orderNumber');
                    var isCheckbox = $(this).data('checkbox');
                    //if (isOrderNumber != 'show' && isCheckbox != 'show') {
                    if (isCheckbox != 'show') {
                        $(g.nBtn).css({
                            //'left': nl,
                            right: '24px',
                            top: '-20px' 
                            //top: g.hDiv.offsetTop
                        }).show();
                    }
                    var ndw = parseInt($(g.nDiv).width(), 10);
                    $(g.nDiv).css({
                        //top: g.bDiv.offsetTop
                    });
                    if ((nl + ndw) > $(g.gDiv).width()) {
                        //$(g.nDiv).css('left', onl - ndw + 1);
                    } else {
                        //$(g.nDiv).css('left', nl);
                    }
                    if ($(this).hasClass('sorted')) {
                        $(g.nBtn).addClass('srtd');
                    } else {
                        $(g.nBtn).removeClass('srtd');
                    }
                }
            }, function() {
                $(this).removeClass('thOver');
                if ($(this).attr('abbr') != p.sortname) {
                    $('div', this).removeClass('s' + p.sortorder);
                } else if ($(this).attr('abbr') == p.sortname) {
                    var no = (p.sortorder == 'asc') ? 'desc' : 'asc';
                    //$('div', this).addClass('s' + p.sortorder).removeClass('s' + no);
                }
                if (g.colCopy) {
                    $(g.cdropleft).remove();
                    $(g.cdropright).remove();
                    g.dcolt = null;
                }
            }); //wrap content
        });
        //set bDiv
        g.bDiv.className = 'bDiv';
        $(g.dgDiv).append(g.bDiv);
        $(g.bDiv).append(g.bInnerDiv);
        $(g.bDiv).css({
            'position': 'relative',
            'left': '47px'
        });

        $(g.hDiv).css({
            width: $(g.dgDiv).width() - $(g.obDiv).width() -20
        })
     
        
        $(g.bDiv).css({
            height: (p.height == 'auto') ? 'auto' : p.height + "px",
            width: $(g.dgDiv).width() - $(g.obDiv).width() 
        }).scroll(function(e) {
            g.scroll();
            //this.style.backgroundPosition = ((-this.scrollLeft + 'px ') + (-this.scrollTop + 'px'));
            g.obDiv.style.top = (-this.scrollTop + 26 + 'px');
            //g.dgDiv.style.backgroundPositionY = (-this.scrollTop + 'px');

            g.ohDiv.style.zIndex = 99;
            g.tDiv.style.zIndex = 100;
            g.pDiv.style.zIndex = 101;
            

        }).append(t);
        if (p.height == 'auto') {
            $('table', g.bDiv).addClass('autoht');
        }
        
        //add td & row properties
        g.addCellProp();
        g.addRowProp();
        //set cDrag only if we are using it
        if (p.colResize === true) {
            var cdcol = $('thead tr:first th:first', g.hDiv).get(0);
            if (cdcol !== null) {
                g.cDrag.className = 'cDrag';
                g.cdpad = 0;
                g.cdpad += (isNaN(parseInt($('div', cdcol).css('borderLeftWidth'), 10)) ? 0 : parseInt($('div', cdcol).css('borderLeftWidth'), 10));
                g.cdpad += (isNaN(parseInt($('div', cdcol).css('borderRightWidth'), 10)) ? 0 : parseInt($('div', cdcol).css('borderRightWidth'), 10));
                g.cdpad += (isNaN(parseInt($('div', cdcol).css('paddingLeft'), 10)) ? 0 : parseInt($('div', cdcol).css('paddingLeft'), 10));
                g.cdpad += (isNaN(parseInt($('div', cdcol).css('paddingRight'), 10)) ? 0 : parseInt($('div', cdcol).css('paddingRight'), 10));
                g.cdpad += (isNaN(parseInt($(cdcol).css('borderLeftWidth'), 10)) ? 0 : parseInt($(cdcol).css('borderLeftWidth'), 10));
                g.cdpad += (isNaN(parseInt($(cdcol).css('borderRightWidth'), 10)) ? 0 : parseInt($(cdcol).css('borderRightWidth'), 10));
                g.cdpad += (isNaN(parseInt($(cdcol).css('paddingLeft'), 10)) ? 0 : parseInt($(cdcol).css('paddingLeft'), 10));
                g.cdpad += (isNaN(parseInt($(cdcol).css('paddingRight'), 10)) ? 0 : parseInt($(cdcol).css('paddingRight'), 10));
                $(g.bDiv).before(g.cDrag);
                var cdheight = $(g.bDiv).height();
                var hdheight = $(g.hDiv).height();
                $(g.cDrag).css({
                    top: -hdheight + 'px'
                });
                $('thead tr:first th', g.hDiv).each(function() {
                    var cgDiv = document.createElement('div');
                    $(g.cDrag).append(cgDiv);
                    if (!p.cgwidth) {
                        p.cgwidth = $(cgDiv).width();
                    }
                    $(cgDiv).css({
                        height: cdheight + hdheight
                    }).mousedown(function(e) {
                        g.dragStart('colresize', e, this);
                    }).dblclick(function(e) {
                        g.autoResizeColumn(this);
                    });
                    if (browser.msie && browser.version < 7.0) {
                        g.fixHeight($(g.gDiv).height());
                        $(cgDiv).hover(function() {
                            g.fixHeight();
                            $(this).addClass('dragging');
                        }, function() {
                            if (!g.colresize) {
                                $(this).removeClass('dragging');
                            }
                        });
                    }
                });
            }
        }

        //add strip
        if (p.striped) {
            $('tbody tr:odd', g.bDiv).addClass('erow');
            $(g.bDiv).addClass('strip');
            $(g.hDiv).addClass('strip');
            $(g.bDiv).addClass('striped');
        }
        /*if (!p.showOrderNumber) {
            if (p.striped) {
                $(g.bDiv).addClass('no-order-number-striped');
            } else {
                $(g.bDiv).addClass('no-order-number');
            }
        }*/
        if (p.resizable && p.height != 'auto') {
            g.vDiv.className = 'vGrip';
            $(g.vDiv).mousedown(function(e) {
                g.dragStart('vresize', e);
            }).html('<span></span>');
            $(g.bDiv).after(g.vDiv);
        }
        if (p.resizable && p.width != 'auto' && !p.nohresize) {
            g.rDiv.className = 'hGrip';
            $(g.rDiv).mousedown(function(e) {
                g.dragStart('vresize', e, true);
            }).html('<span></span>').css('height', $(g.gDiv).height());
            if (browser.msie && browser.version < 7.0) {
                $(g.rDiv).hover(function() {
                    $(this).addClass('hgOver');
                }, function() {
                    $(this).removeClass('hgOver');
                });
            }
            $(g.gDiv).append(g.rDiv);
        }

        //add search button
        if (p.searchFormId) {
            var form = $("#" + p.searchFormId);
            form.submit(function() {
                g.populate(true);
                var submitBtn = form.find('*[type="submit"]');
                if ($.btn)
                    $.btn.running(submitBtn, '查询中...');
                return false;
            });
        }
        // add pager
        if (p.usepager) {
            g.pDiv.className = 'pDiv';
            g.pDiv.innerHTML = '<div class="pDiv2"></div>';
            $(g.gDiv).append(g.pDiv);
            var html = ' <div class="pGroup"> <div class="pFirst pButton"><span></span></div><div class="pPrev pButton"><span></span></div> </div> <div class="btnseparator"></div> <div class="pGroup pGroup-s"><span class="pcontrol"><em>' + p.pagetext + ' </em><input type="text" size="4" value="1" /><em> ' + p.outof + ' </em><span> 1 </span><em>页)</em></span></div> <div class="btnseparator"></div> <div class="pGroup"> <div class="pNext pButton"><span></span></div><div class="pLast pButton"><span></span></div> </div> <div class="btnseparator"></div> <div class="pGroup"> <div class="pReload pButton"><span></span></div> </div> <div class="btnseparator"></div> <div class="pGroup"><span class="pPageStat"></span></div>';
            $('div', g.pDiv).html(html);
            $('.pReload', g.pDiv).click(function() {
				 p.hasreload = true;
                g.populate();
            });
            $('.pFirst', g.pDiv).click(function() {
                g.changePage('first');
            });
            $('.pPrev', g.pDiv).click(function() {
                g.changePage('prev');
            });
            $('.pNext', g.pDiv).click(function() {
                g.changePage('next');
            });
            $('.pLast', g.pDiv).click(function() {
                g.changePage('last');
            });
            $('.pcontrol input', g.pDiv).keydown(function(e) {
                if (e.keyCode == 13) {
                    g.changePage('input');
                }
            });
            if (browser.msie && browser.version < 7) $('.pButton', g.pDiv).hover(function() {
                $(this).addClass('pBtnOver');
            }, function() {
                $(this).removeClass('pBtnOver');
            });
            if (p.useRp) {
                var opt = '',
                    sel = '';
                for (var nx = 0; nx < p.rpOptions.length; nx++) {
                    if (p.pageSize == p.rpOptions[nx]) sel = 'selected="selected"';
                    else sel = '';
                    opt += "<option value='" + p.rpOptions[nx] + "' " + sel + " >" + p.rpOptions[nx] + "&nbsp;&nbsp;</option>";
                }
                $('.pDiv2', g.pDiv).prepend("<div class='pGroup'><select name='pageSize'>" + opt + "</select></div> <div class='btnseparator'></div>");
                $('select', g.pDiv).change(function() {
                    if (p.onRpChange) {
                        p.onRpChange(+this.value);
                    } else {
                        p.newp = 1;
                        p.pageSize = +this.value;
                        g.populate();
                    }
                });
            }

        }

        var bDivSiblingsHeight = 0,
            bDivHeight = 0;
        if ($(g.tDiv).length > 0) {
            bDivSiblingsHeight += $(g.tDiv).height();
        }
        if ($(g.mDiv).length > 0) {
            bDivSiblingsHeight += $(g.mDiv).height();
        }
        if ($(g.pDiv).length > 0) {
            bDivSiblingsHeight += $(g.pDiv).height();
        }
        if ($(g.hDiv).length > 0) {
            bDivSiblingsHeight += $(g.hDiv).height();
        }
        bDivHeight = p.height - bDivSiblingsHeight - 10;
        $(g.bDiv).css({
            height: (p.height == 'auto') ? 'auto' : bDivHeight + "px"
        })
  
        $(g.sDiv).css({
            'top': bDivHeight + $(g.pDiv).height(),
            'width': '100%'
        });

        $(g.pDiv, g.sDiv).append("<div style='clear:both'></div>");

        // add title
        if (p.title) {
            g.mDiv.className = 'mDiv';
            g.mDiv.innerHTML = '<div class="ftitle">' + p.title + '</div>';
            $(g.gDiv).prepend(g.mDiv);
            if (p.showTableToggleBtn) {
                $(g.mDiv).append('<div class="ptogtitle" title="Minimize/Maximize Table"><span></span></div>');
                $('div.ptogtitle', g.mDiv).click(function() {
                    $(g.gDiv).toggleClass('hideBody');
                    $(this).toggleClass('vsble');
                });
            }
        }

        //setup cdrops
        g.cdropleft = document.createElement('span');
        g.cdropleft.className = 'cdropleft';
        g.cdropright = document.createElement('span');
        g.cdropright.className = 'cdropright';
        //add block
        g.block.className = 'gBlock';
        var gh = $(g.bDiv).height();
        var gtop = g.bDiv.offsetTop;
        // 显示loading 遮罩层
        $(g.block).css({
            width: g.bDiv.style.width,
            height: gh,
            background: 'white',
            position: 'relative',
            marginBottom: (gh * -1),
            zIndex: 1000,
            top: gtop + $(g.hDiv).height(),
            left: '0px'
        });
        $(g.block).fadeTo(0, p.blockOpacity);
        // add column control

        if ($('th', g.hDiv).length) {
            g.nDiv.className = 'nDiv';
            g.nDiv.innerHTML = "<table cellpadding='0' cellspacing='0'><tbody></tbody></table>";
            $(g.nDiv).css({
                marginBottom: (gh * -1),
                display: 'none',
                right: '20px',
                top: '0px'
                //top: gtop
            }).noSelect();
            var cn = 0;
            $('th div', g.hDiv).each(function() {
                var kcol = $("th[axis='col" + cn + "']", g.hDiv)[0];
                var chk = 'checked="checked"';
                if (kcol.style.display == 'none') {
                    chk = '';
                }
                if (this.innerHTML != '序号' && this.innerHTML.toUpperCase() != '<INPUT ID=CHECKALL TYPE=CHECKBOX NAME=CHECKALL>' && this.innerHTML != '<input id="checkAll" name="checkAll" type="checkbox">') {
                    $('tbody', g.nDiv).append('<tr><td class="ndcol1"><input type="checkbox" ' + chk + ' class="togCol" value="' + cn + '" /></td><td class="ndcol2">' + this.innerHTML + '</td></tr>');
                }
                cn++;
            });
            if (browser.msie && browser.version < 7.0) $('tr', g.nDiv).hover(function() {
                $(this).addClass('ndcolover');
            }, function() {
                $(this).removeClass('ndcolover');
            });
            $('td.ndcol2', g.nDiv).click(function() {
                if ($('input:checked', g.nDiv).length <= p.minColToggle && $(this).prev().find('input')[0].checked) return false;
                return g.toggleCol($(this).prev().find('input').val());
            });
            $('input.togCol', g.nDiv).click(function() {
                if ($('input:checked', g.nDiv).length < p.minColToggle && this.checked === false) return false;
                $(this).parent().next().trigger('click');
            });
            $(g.dgDiv).prepend(g.nDiv);
            $(g.nBtn).addClass('nBtn')
                .html('<div></div>')
                .attr('title', '显示／隐藏列')
                .click(function() {
                    $(g.nDiv).toggle();
                    return true;
                });
            if (p.showToggleBtn) {
                $(g.dgDiv).prepend(g.nBtn);
            }
        }

        // add date edit layer
        $(g.iDiv).addClass('iDiv').css({
            display: 'none'
        });
        $(g.bInnerDiv).append(g.iDiv);
        $(g.iDiv).before(t);
        // add flexigrid events
        $(g.bDiv).hover(function() {
            $(g.nDiv).hide();
            //$(g.nBtn).hide();
        }, function() {
            if (g.multisel) {
                g.multisel = false;
            }
        });
        $(g.gDiv).hover(function() {}, function() {
            $(g.nDiv).hide();
            //$(g.nBtn).hide();
        });

        //add document events
        $(document).mousemove(function(e) {
            g.dragMove(e);
        }).mouseup(function(e) {
            g.dragEnd();
        }).hover(function() {}, function() {
            g.dragEnd();
        });


        //browser adjustments
        if (browser.msie && browser.version < 7.0) {
            /* if (p.width != 'auto') {
                $('.hDiv,.mDiv,.pDiv,.vGrip,.tDiv, .sDiv, .bDiv', g.gDiv).width(p.width);
            } else { */
            var tDivW = $(g.tDiv).innerWidth();
            $('.hDiv,.mDiv,.pDiv,.vGrip,.tDiv, .sDiv, .bDiv', g.gDiv).width(tDivW);
            //}
            $(g.gDiv).addClass('ie6');
            if (p.width != 'auto') {
                $(g.gDiv).addClass('ie6fullwidthbug');
            }
        }

        /*var bW = $(g.bDiv).width();

        if (p.striped) {
            if (browser.msie) {
                ThW += 20 * (count + 1) - count - 1;
            } else {
                ThW += 18 * (count + 1) - count - 1;
            }
        } else {
            if (browser.msie) {
                ThW += 18 * (count + 1) - count - 1;
            } else {
                ThW += 18 * (count + 1) - count - 1;
            }
        }

        if (ThW < bW) {
            var theLastTd = $('thead tr:first th').eq($('thead tr:first th').length - 1);
            if (!theLastTd.hasClass('OrderNumber') && !theLastTd.hasClass('showCheckbox')) {
        theLastTd.find('div').width(bW - ThW);
            }
        }*/

        g.rePosDrag();
        g.fixHeight();
        //make grid functions accessible
        t.p = p;
        t.grid = g;
        // load data
        if (p.url && p.autoload) {
            g.populate();
        }
    };

    var docloaded = false;
    $(document).ready(function() {
        docloaded = true;
    });
    var datagrid = $.fn.flexigrid = function(p) {
        return this.each(function() {
            if (!docloaded) {
                $(this).hide();
                var t = this;
                $(document).ready(function() {
                    $.addFlex(t, p);
                });
            } else {
                $.addFlex(this, p);
            }
        });
    }; //end flexigrid
    $.fn.flexReload = function(p) { // function to reload grid
        /*return this.each(function () {
            if (this.grid && this.p.url) this.grid.populate();
        });*/
        return this.each(function() {
            if (this.grid && this.p.url) this.grid.flexReload();
        });
    }; //end flexReload
    $.fn.datagridResize = function(p) {
        return this.each(function() {
            if (this.grid && this.p.width && this.p.height) this.grid.datagridResize(p);
        });
    }
    $.fn.flexOptions = function(p) { //function to update general options
        /*return this.each(function () {
            if (this.grid) $.extend(this.p, p);
        });*/
        return this.each(function() {
            if (this.grid) this.grid.flexOptions(this.p, p);
        });
    }; //end flexOptions
    $.fn.getSelectedRows = function() {
        if (this[0].grid) {
            return this[0].grid.getSelectedRows();
        }
        return [];
    }; // Add: getSelectedRows 
    $.fn.getAllRows = function() {
        if (this[0].grid) {
            return this[0].grid.getAllRows();
        }
        return [];
    }; //end getAllRows
    $.fn.flexToggleCol = function(cid, visible) { // function to reload grid
        return this.each(function() {
            if (this.grid) this.grid.toggleCol(cid, visible);
        });
    }; //end flexToggleCol
    $.fn.flexAddData = function(data) { // function to add data to grid
        /*return this.each(function () {
            if (this.grid) this.grid.addData(data);
        });*/
        if (this[0].grid) {
            return this[0].grid.flexAddData(data);
        }
    };
    $.fn.noSelect = function(p) { //no select plugin by me :-)
        var prevent = (p === null) ? true : p;
        if (prevent) {
            return this.each(function() {
                if (browser.msie || browser.safari) $(this).bind('selectstart', function() {
                    return false;
                });
                else if (browser.mozilla) {
                    $(this).css('MozUserSelect', 'none');
                    $('body').trigger('focus');
                } else if (browser.opera) $(this).bind('mousedown', function() {
                    return false;
                });
                else $(this).attr('unselectable', 'on');
            });
        } else {
            return this.each(function() {
                if (browser.msie || browser.safari) $(this).unbind('selectstart');
                else if (browser.mozilla) $(this).css('MozUserSelect', 'inherit');
                else if (browser.opera) $(this).unbind('mousedown');
                else $(this).removeAttr('unselectable', 'on');
            });
        }
    }; //end noSelect
    $.fn.flexSearch = function(p) { // function to search grid
        return this.each(function() {
            if (this.grid) this.grid.doSearch();
        });
    }; //end flexSearch
    window.datagrid = $.fn.datagrid = $.datagrid = datagrid;
})($ || jQuery);
;(function($) {
    $.photogallery = {};

    $.fn.photogallery = function(pp_settings) {
        pp_settings = jQuery.extend({
            hook: 'rel',
            /* the attribute tag to use for photogallery hooks. default: 'rel'. For HTML5, use "data-rel" or similar. */
            animation_speed: 'fast',
            /* fast/slow/normal */
            ajaxcallback: function() {},
            imagesSrc: [],
            slideshow: 5000,
            /* false OR interval time in ms */
            autoplay_slideshow: false,
            /* true/false */
            opacity: 0.80,
            /* Value between 0 and 1 */
            show_title: true,
            show_rotate: false,
            /* true/false */
            allow_resize: true,
            /* Resize the photos bigger than viewport. true/false */
            allow_expand: false,
            /* Allow the user to expand a resized image. true/false */
            default_width: 500,
            default_height: 344,
            counter_separator_label: '/',
            /* The separator for the gallery counter 1 "of" 2 */
            horizontal_padding: 20,
            /* The padding on each side of the picture */
            hideflash: false,
            /* Hides all the flash object on a page, set to TRUE if flash appears over photogallery */
            wmode: 'opaque',
            /* Set the flash wmode attribute */
            autoplay: true,
            /* Automatically start videos: True/False */
            modal: false,
            /* If set to true, only the close button will close the window */
            deeplinking: true,
            /* Allow photogallery to update the url to enable deeplinking. */
            overlay_gallery: true,
            /* If set to true, a gallery will overlay the fullscreen image on mouse over */
            overlay_gallery_max: 30,
            /* Maximum number of pictures in the overlay gallery */
            keyboard_shortcuts: true,
            /* Set to false if you open forms inside photogallery */
            changepicturecallback: function() {},
            /* Called everytime an item is shown/changed */
            callback: function() {},
            /* Called when photogallery is closed */
            ie6_fallback: true,
            markup: '<div class="pp_pic_holder"> \
                        <div class="ppt">&nbsp;</div> \
                        <div class="pp_content_container"> \
                                <div class="pp_content"> \
                                    <a class="pp_close" href="#">×</a> \
                                    <div class="pp_loaderIcon"></div> \
                                    <div class="pp_fade"> \
                                        <a href="#" class="pp_expand" title="Expand the image">Expand</a> \
                                        <div class="pp_hoverContainer"> \
                                            <a class="pp_next" href="#">next</a> \
                                            <a class="pp_previous" href="#">previous</a> \
                                        </div> \
                                        <div id="pp_full_res"></div> \
                                        <div class="pp_details"> \
                                            <div class="pp_nav"> \
                                                <a href="#" class="pp_arrow_previous">Previous</a> \
                                                <p class="currentTextHolder">0/0</p> \
                                                <a href="#" class="pp_arrow_next">Next</a> \
                                            </div> \
                                            <p class="pp_description"></p> \
                                            <div class="pp_rotate" id="rotate"></div> \
                                        </div> \
                                    </div> \
                            </div> \
                        </div> \
                    </div> \
                    <div class="pp_overlay"></div>',
            gallery_markup: '<div class="pp_gallery"> \
                                <a href="#" class="pp_arrow_previous">Previous</a> \
                                <div> \
                                    <ul> \
                                        {gallery} \
                                    </ul> \
                                </div> \
                                <a href="#" class="pp_arrow_next">Next</a> \
                            </div>',
            image_markup: '<img id="fullResImage" src="{path}" />',
            flash_markup: '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="{width}" height="{height}"><param name="wmode" value="{wmode}" /><param name="allowfullscreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="movie" value="{path}" /><embed src="{path}" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="{width}" height="{height}" wmode="{wmode}"></embed></object>',
            quicktime_markup: '<object classid="clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B" codebase="http://www.apple.com/qtactivex/qtplugin.cab" height="{height}" width="{width}"><param name="src" value="{path}"><param name="autoplay" value="{autoplay}"><param name="type" value="video/quicktime"><embed src="{path}" height="{height}" width="{width}" autoplay="{autoplay}" type="video/quicktime" pluginspage="http://www.apple.com/quicktime/download/"></embed></object>',
            iframe_markup: '<iframe src ="{path}" width="{width}" height="{height}" frameborder="no"></iframe>',
            inline_markup: '<div class="pp_inline">{content}</div>',
            custom_markup: ''
            //social_tools: '' /* html or false to disable */
        }, pp_settings);

        // Global variables accessible only by photogallery
        var matchedObjects = this,
            percentBased = false,
            pp_dimensions, pp_open,

            // photogallery container specific
            pp_contentHeight, pp_contentWidth, pp_containerHeight, pp_containerWidth,

            // Window size
            windowHeight = $(window).height(),
            windowWidth = $(window).width(),

            // Global elements
            pp_slideshow;

        doresize = true, scroll_pos = _get_scroll();

        // Window/Keyboard events
        $(window).unbind('resize.photogallery').bind('resize.photogallery', function() {
            _center_overlay();
            _resize_overlay();
        });

        if (pp_settings.keyboard_shortcuts) {
            $(document).unbind('keydown.photogallery').bind('keydown.photogallery', function(e) {
                if (typeof $pp_pic_holder != 'undefined') {
                    if ($pp_pic_holder.is(':visible')) {
                        switch (e.keyCode) {
                            case 37:
                                $.photogallery.changePage('previous');
                                e.preventDefault();
                                break;
                            case 39:
                                $.photogallery.changePage('next');
                                e.preventDefault();
                                break;
                            case 27:
                                if (!settings.modal)
                                    $.photogallery.close();
                                e.preventDefault();
                                break;
                        };
                        // return false;
                    };
                };
            });
        };

        /**
         * Initialize photogallery.
         */
        $.photogallery.initialize = function() {

            settings = pp_settings;

            settings.horizontal_padding = 16;

            // Find out if the picture is part of a set
            theRel = $(this).attr(settings.hook);
            galleryRegExp = /\[(?:.*)\]/;
            isSet = (galleryRegExp.exec(theRel)) ? true : false;

            // Put the SRCs, TITLEs, ALTs into an array.


            if (settings.imagesSrc.length > 0) {
                pp_images = settings.imagesSrc;
            } else {
                pp_images = (isSet) ? jQuery.map(matchedObjects, function(n, i) {
                    if ($(n).attr(settings.hook).indexOf(theRel) != -1) return $(n).attr('href');
                }) : $.makeArray($(this).attr('href'));
            }
            pp_titles = (isSet) ? jQuery.map(matchedObjects, function(n, i) {
                if ($(n).attr(settings.hook).indexOf(theRel) != -1) return ($(n).find('img').attr('alt')) ? $(n).find('img').attr('alt') : "";
            }) : $.makeArray($(this).find('img').attr('alt'));
            pp_descriptions = (isSet) ? jQuery.map(matchedObjects, function(n, i) {
                if ($(n).attr(settings.hook).indexOf(theRel) != -1) return ($(n).attr('title')) ? $(n).attr('title') : "";
            }) : $.makeArray($(this).attr('title'));

            if (pp_images.length > settings.overlay_gallery_max) settings.overlay_gallery = false;

            if (settings.imagesSrc.length > 0) {
                set_position = 0;
            } else {
                set_position = jQuery.inArray($(this).attr('href'), pp_images); // Define where in the array the clicked item is positionned
            }
            rel_index = (isSet) ? set_position : $("a[" + settings.hook + "^='" + theRel + "']").index($(this));

            _build_overlay(this); // Build the overlay {this} being the caller

            if (settings.allow_resize)
                $(window).bind('scroll.photogallery', function() {
                    _center_overlay();
                });


            $.photogallery.open();

            return false;
        }


        /**
         * Opens the photogallery modal box.
         * @param image {String,Array} Full path to the image to be open, can also be an array containing full images paths.
         * @param title {String,Array} The title to be displayed with the picture, can also be an array containing all the titles.
         * @param description {String,Array} The description to be displayed with the picture, can also be an array containing all the descriptions.
         */
        $.photogallery.open = function(event) {
            if (typeof settings == "undefined") { // Means it's an API call, need to manually get the settings and set the variables
                settings = pp_settings;
                if (settings.imagesSrc.length > 0) {
                    pp_images = settings.imagesSrc;
                } else {
                    pp_images = $.makeArray(arguments[0]);
                }
                pp_titles = (arguments[1]) ? $.makeArray(arguments[1]) : $.makeArray("");
                pp_descriptions = (arguments[2]) ? $.makeArray(arguments[2]) : $.makeArray("");
                isSet = (pp_images.length > 1) ? true : false;
                set_position = (arguments[3]) ? arguments[3] : 0;
                _build_overlay(event.target); // Build the overlay {this} being the caller
            }

            if (settings.hideflash) $('object,embed').css('visibility', 'hidden'); // Hide the flash

            _checkPosition($(pp_images).size()); // Hide the next/previous links if on first or last images.

            $('.pp_loaderIcon').show();

            if (settings.deeplinking)
                setHashtag();

            // Rebuild Facebook Like Button with updated href
            /*if (settings.social_tools) {
                facebook_like_link = settings.social_tools.replace('{location_href}', encodeURIComponent(location.href));
                $pp_pic_holder.find('.pp_social').html(facebook_like_link);
            }*/

            // Fade the content in
            if ($ppt.is(':hidden')) $ppt.css('opacity', 0).show();
            $pp_overlay.show().fadeTo(settings.animation_speed, settings.opacity);

            // Display the current position
            $pp_pic_holder.find('.currentTextHolder').text((set_position + 1) + settings.counter_separator_label + $(pp_images).size());

            // Set the description
            if (typeof pp_descriptions[set_position] != 'undefined' && pp_descriptions[set_position] != "") {
                $pp_pic_holder.find('.pp_description').show().html(unescape(pp_descriptions[set_position]));
            } else {
                $pp_pic_holder.find('.pp_description').hide();
            }

            // Get the dimensions
            movie_width = (parseFloat(getParam('width', pp_images[set_position]))) ? getParam('width', pp_images[set_position]) : settings.default_width.toString();
            movie_height = (parseFloat(getParam('height', pp_images[set_position]))) ? getParam('height', pp_images[set_position]) : settings.default_height.toString();

            // If the size is % based, calculate according to window dimensions
            percentBased = false;
            if (movie_height.indexOf('%') != -1) {
                movie_height = parseFloat(($(window).height() * parseFloat(movie_height) / 100) - 150);
                percentBased = true;
            }
            if (movie_width.indexOf('%') != -1) {
                movie_width = parseFloat(($(window).width() * parseFloat(movie_width) / 100) - 150);
                percentBased = true;
            }
            // Fade the holder
            $pp_pic_holder.fadeIn(function() {
                // Set the title
                (settings.show_title && pp_titles[set_position] != "" && typeof pp_titles[set_position] != "undefined") ? $ppt.html(unescape(pp_titles[set_position])) : $ppt.html('&nbsp;');

                var imgPreloader = "",
                    nextImage,
                    prevImage,
                    _imagesSrc = pp_settings.imagesSrc;
                skipInjection = false;

                // Inject the proper content
                switch (_getFileType(pp_images[set_position])) {
                    case 'image':
                        imgPreloader = new Image();

                        // Preload the neighbour images
                        nextImage = new Image();
                        prevImage = new Image();
                        if (_imagesSrc.length > 0) {
                            if (isSet && set_position < $(_imagesSrc).size() - 1) nextImage.src = _imagesSrc[set_position + 1];
                            if (isSet && _imagesSrc[set_position - 1]) prevImage.src = _imagesSrc[set_position - 1];
                            $pp_pic_holder.find('#pp_full_res')[0].innerHTML = settings.image_markup.replace(/{path}/g, _imagesSrc[set_position]);
                        } else {
                            if (isSet && set_position < $(pp_images).size() - 1) nextImage.src = pp_images[set_position + 1];
                            if (isSet && pp_images[set_position - 1]) prevImage.src = pp_images[set_position - 1];
                            $pp_pic_holder.find('#pp_full_res')[0].innerHTML = settings.image_markup.replace(/{path}/g, pp_images[set_position]);
                        }

                        imgPreloader.onload = function() {
                            // Fit item to viewport
                            pp_dimensions = _fitToViewport(imgPreloader.width, imgPreloader.height);

                            _showContent();
                        };

                        imgPreloader.onerror = function() {
                            alert('图片链接地址错误。');
                            $.photogallery.close();
                        };
                        if (_imagesSrc.length > 0) {
                            imgPreloader.src = _imagesSrc[set_position];
                        } else {
                            imgPreloader.src = pp_images[set_position];
                        }

                        break;

                    /*case 'quicktime':
                        pp_dimensions = _fitToViewport(movie_width, movie_height); // Fit item to viewport
                        pp_dimensions['height'] += 15;
                        pp_dimensions['contentHeight'] += 15;
                        pp_dimensions['containerHeight'] += 15; // Add space for the control bar

                        toInject = settings.quicktime_markup.replace(/{width}/g, pp_dimensions['width']).replace(/{height}/g, pp_dimensions['height']).replace(/{wmode}/g, settings.wmode).replace(/{path}/g, pp_images[set_position]).replace(/{autoplay}/g, settings.autoplay);
                        break;

                    case 'flash':
                        pp_dimensions = _fitToViewport(movie_width, movie_height); // Fit item to viewport

                        flash_vars = pp_images[set_position];
                        flash_vars = flash_vars.substring(pp_images[set_position].indexOf('flashvars') + 10, pp_images[set_position].length);

                        filename = pp_images[set_position];
                        filename = filename.substring(0, filename.indexOf('?'));

                        toInject = settings.flash_markup.replace(/{width}/g, pp_dimensions['width']).replace(/{height}/g, pp_dimensions['height']).replace(/{wmode}/g, settings.wmode).replace(/{path}/g, filename + '?' + flash_vars);
                        break;

                    case 'iframe':
                        pp_dimensions = _fitToViewport(movie_width, movie_height); // Fit item to viewport

                        frame_url = pp_images[set_position];
                        frame_url = frame_url.substr(0, frame_url.indexOf('iframe') - 1);

                        toInject = settings.iframe_markup.replace(/{width}/g, pp_dimensions['width']).replace(/{height}/g, pp_dimensions['height']).replace(/{path}/g, frame_url);
                        break;

                    case 'ajax':
                        doresize = false; // Make sure the dimensions are not resized.
                        pp_dimensions = _fitToViewport(movie_width, movie_height);
                        doresize = true; // Reset the dimensions

                        skipInjection = true;
                        $.get(pp_images[set_position], function(responseHTML) {
                            toInject = settings.inline_markup.replace(/{content}/g, responseHTML);
                            $pp_pic_holder.find('#pp_full_res')[0].innerHTML = toInject;
                            _showContent();
                        });

                        break;

                    case 'custom':
                        pp_dimensions = _fitToViewport(movie_width, movie_height); // Fit item to viewport

                        toInject = settings.custom_markup;
                        break;*/

                    case 'inline':
                        // to get the item height clone it, apply default width, wrap it in the photogallery containers , then delete
                        myClone = $(pp_images[set_position]).clone().append('<br clear="all" />').css({
                            'width': settings.default_width
                        }).wrapInner('<div id="pp_full_res"><div class="pp_inline"></div></div>').appendTo($('body')).show();
                        doresize = false; // Make sure the dimensions are not resized.
                        pp_dimensions = _fitToViewport($(myClone).width(), $(myClone).height());
                        doresize = true; // Reset the dimensions
                        $(myClone).remove();
                        toInject = settings.inline_markup.replace(/{content}/g, $(pp_images[set_position]).html());
                        break;
                };

                if (!imgPreloader && !skipInjection) {
                    $pp_pic_holder.find('#pp_full_res')[0].innerHTML = toInject;

                    // Show content
                    _showContent();
                };
            });

            return false;
        };


        /**
         * Change page in the photogallery modal box
         * @param direction {String} Direction of the paging, previous or next.
         */
        $.photogallery.changePage = function(direction) {
            currentGalleryPage = 0;

            if (direction == 'previous') {
                set_position--;
                if (set_position < 0) set_position = $(pp_images).size() - 1;
            } else if (direction == 'next') {
                set_position++;
                if (set_position > $(pp_images).size() - 1) set_position = 0;
            } else {
                set_position = direction;
            };

            rel_index = set_position;

            if (!doresize) doresize = true; // Allow the resizing of the images
            if (settings.allow_expand) {
                $('.pp_contract').removeClass('pp_contract').addClass('pp_expand');
            }

            _hideContent(function() {
                $.photogallery.open();
            });
        };


        /**
         * Change gallery page in the photogallery modal box
         * @param direction {String} Direction of the paging, previous or next.
         */
        $.photogallery.changeGalleryPage = function(direction) {
            if (direction == 'next') {
                currentGalleryPage++;

                if (currentGalleryPage > totalPage) currentGalleryPage = 0;
            } else if (direction == 'previous') {
                currentGalleryPage--;

                if (currentGalleryPage < 0) currentGalleryPage = totalPage;
            } else {
                currentGalleryPage = direction;
            };

            slide_speed = (direction == 'next' || direction == 'previous') ? settings.animation_speed : 0;

            slide_to = currentGalleryPage * (itemsPerPage * itemWidth);

            $pp_gallery.find('ul').animate({
                left: -slide_to
            }, slide_speed);
        };


        /**
         * Start the slideshow...
         */
        $.photogallery.startSlideshow = function() {
            if (typeof pp_slideshow == 'undefined') {
                $pp_pic_holder.find('.pp_play').unbind('click').removeClass('pp_play').addClass('pp_pause').click(function() {
                    $.photogallery.stopSlideshow();
                    return false;
                });
                pp_slideshow = setInterval($.photogallery.startSlideshow, settings.slideshow);
            } else {
                $.photogallery.changePage('next');
            };
        }


        /**
         * Stop the slideshow...
         */
        $.photogallery.stopSlideshow = function() {
            $pp_pic_holder.find('.pp_pause').unbind('click').removeClass('pp_pause').addClass('pp_play').click(function() {
                $.photogallery.startSlideshow();
                return false;
            });
            clearInterval(pp_slideshow);
            pp_slideshow = undefined;
        }


        /**
         * Closes photogallery.
         */
        $.photogallery.close = function() {
            if ($pp_overlay.is(":animated")) return;

            $.photogallery.stopSlideshow();

            $pp_pic_holder.stop().find('object,embed').css('visibility', 'hidden');

            $('div.pp_pic_holder,div.ppt,.pp_fade').fadeOut(settings.animation_speed, function() {
                $(this).remove();
            });

            $pp_overlay.fadeOut(settings.animation_speed, function() {

                if (settings.hideflash) $('object,embed').css('visibility', 'visible'); // Show the flash

                $(this).remove(); // No more need for the photogallery markup

                $(window).unbind('scroll.photogallery');

                clearHashtag();

                settings.callback();

                doresize = true;

                pp_open = false;

                delete settings;
            });
        };

        /**
         * Set the proper sizes on the containers and animate the content in.
         */
        function _showContent() {
            $('.pp_loaderIcon').hide();

            // Calculate the opened top position of the pic holder
            projectedTop = scroll_pos['scrollTop'] + ((windowHeight / 2) - (pp_dimensions['containerHeight'] / 2));
            if (projectedTop < 0) projectedTop = 0;

            $ppt.fadeTo(settings.animation_speed, 1);

            // Resize the content holder
            $pp_pic_holder.find('.pp_content')
                .animate({
                    height: pp_dimensions['contentHeight'] + (settings.show_rotate ? 20 : 0),
                    width: pp_dimensions['contentWidth']
                }, settings.animation_speed);

            var imgFullHeight;
            var imgFullWidth;

            // Resize picture the holder
            $pp_pic_holder.animate({
                'top': projectedTop,
                'left': ((windowWidth / 2) - (pp_dimensions['containerWidth'] / 2) < 0) ? 0 : (windowWidth / 2) - (pp_dimensions['containerWidth'] / 2),
                width: pp_dimensions['containerWidth']
            }, settings.animation_speed, function() {

                var imgheight = pp_dimensions['height'],
                imgwidth = pp_dimensions['width'],
                wwidth = $(window).width(),
                wheight = $(window).height(),
                mwidth,
                mheight;

                mheight = (pp_dimensions['height'] > $(window).height()) ? $(window).height() - 70 : pp_dimensions['height'];
                mwidth = (pp_dimensions['width'] > $(window).width()) ? $(window).width() - 40 : pp_dimensions['width'];

                
                $pp_pic_holder.find('.pp_hoverContainer,#fullResImage, #pp_full_res').height(pp_dimensions['height']).width(pp_dimensions['width']);

                if(!doresize) {
                    $pp_pic_holder.find('#pp_full_res, .pp_hoverContainer').height(mheight).width(mwidth);
                    $pp_pic_holder.find('.pp_content').height(mheight + 60).width(mwidth).css('position', 'relative');
                    $pp_pic_holder.find('.pp_details, .ppt').width(mwidth);
                    $('.pp_pic_holder').width(mwidth);
                    $pp_pic_holder.find('#pp_full_res, .pp_hoverContainer').css('overflow', 'scroll');
                }


                imgFullHeight = $pp_pic_holder.find('#fullResImage').height();
                imgFullWidth = $pp_pic_holder.find('#fullResImage').width();

                $pp_pic_holder.find('.pp_fade').fadeIn(settings.animation_speed); // Fade the new content
                if (settings.imagesSrc.length > 0) {
                    pp_images = settings.imagesSrc;
                }
                // Show the nav
                if (isSet && _getFileType(pp_images[set_position]) == "image") {
                    $pp_pic_holder.find('.pp_hoverContainer').show();
                } else {
                    if (settings.imagesSrc.length > 0) {
                        $pp_pic_holder.find('.pp_hoverContainer').show();
                    } else {
                        $pp_pic_holder.find('.pp_hoverContainer').hide();
                    }
                }

                if (settings.allow_expand) {
                    if (pp_dimensions['resized']) { // Fade the resizing link if the image is resized
                        $('a.pp_expand,a.pp_contract').show();
                    } else {
                        $('a.pp_expand').hide();
                    }
                }

                if (settings.autoplay_slideshow && !pp_slideshow && !pp_open) $.photogallery.startSlideshow();

                settings.changepicturecallback(); // Callback!

                pp_open = true;
            });
        

            if (settings.show_rotate) {
                $('#rotate').html('<a id="rotLeft" class="btn btn-small" href="javascript:void(0)">向左转</a><a id="rotRight" class="btn btn-small" href="javascript:void(0)">向右转</a>');
                var params = {
                    right: $('#rotRight'),
                    left: $('#rotLeft'),
                    img: $('#fullResImage'),
                    rot: 0
                };

                var funcs = {
                    right: function () {
                        params.rot += 1;
                        params.img.get(0).className = 'rot' + params.rot;
                        if (params.rot === 3){
                            params.rot = -1;
                        }
                    },
                    left: function () {
                        params.rot -= 1;
                        if(params.rot === -1) {
                            params.rot =3;
                        }
                        params.img.get(0).className = 'rot' + params.rot;
                    },
                    zoom: function () {
                        var imgClassName = params.img.get(0).className;

                        var cW = $pp_pic_holder.find('.pp_hoverContainer').width();
                        var cH = $pp_pic_holder.find('.pp_hoverContainer').height();

                        $pp_pic_holder.find('#pp_full_res').css({"text-align":"center"});
                        if (imgClassName == 'rot3' || imgClassName == 'rot1') {
                            if($.browser.msie) {
                                var imgH = params.img.width();
                                var imgW = params.img.height();
                                if (imgW > cH) {
                                    var h = (cH*imgH)/imgW; 
                                    var top = parseInt((cW - cH)/2);
                                    top = (top > 0 ? top : - top);
                                    params.img.css({
                                        "width":cH,
                                        "height":h,
                                        "marginLeft": top
                                    });
                                } else if (imgH > cW) {
                                    var w = (cW*imgW)/imgH; 
                                    var top = parseInt((imgH - imgW));
                                    var left = parseInt((imgH - imgW) - ((imgH - imgW)/4));
                                    top = (top > 0 ? top : - top);
                                    left = (left > 0 ? left : - left);
                                    params.img.css({
                                        "width":w,
                                        "height":cW,
                                        "marginTop": top,
                                        "marginLeft": -left
                                    });
                                }
                            } else {
                                var imgH = params.img.height();
                                var imgW = params.img.width();
                                if (imgW > cH) {
                                    var h = (cH*imgH)/imgW; 
                                    var top = parseInt((cH - h)/2);
                                    top = (top > 0 ? top : - top);
                                    params.img.css({
                                        "width":cH,
                                        "height":h,
                                        "marginTop": top
                                    });
                                } else if (imgH > cW) {
                                    var w = (cW*imgW)/imgH; 
                                    var top = parseInt((w - cW)/2);
                                    top = (top > 0 ? top : - top);
                                    params.img.css({
                                        "width":w,
                                        "height":cW,
                                        "marginTop": top,
                                        "marginLeft": 0
                                    });
                                }
                            }
                        } else {
                            params.img.css({
                                "width":imgFullWidth,
                                "height":imgFullHeight,
                                "marginTop": "0",
                                "marginLeft": "0"
                            });
                        }
                    }
                }   
                params.right.click(function(){
                    funcs.right();
                    funcs.zoom(); 
                    return false;
                });
                params.left.click(function() {
                    funcs.left();
                    funcs.zoom(); 
                    return false;
                });
            }

            _insert_gallery();
            pp_settings.ajaxcallback();
        };

        /**
         * Hide the content...DUH!
         */
        function _hideContent(callback) {
            // Fade out the current picture
            $pp_pic_holder.find('#pp_full_res object,#pp_full_res embed').css('visibility', 'hidden');
            $pp_pic_holder.find('.pp_fade').fadeOut(settings.animation_speed, function() {
                $('.pp_loaderIcon').show();

                callback();
            });
        };

        /**
         * Check the item position in the gallery array, hide or show the navigation links
         * @param setCount {integer} The total number of items in the set
         */
        function _checkPosition(setCount) {
            (setCount > 1) ? $('.pp_nav').show() : $('.pp_nav').hide(); // Hide the bottom nav if it's not a set.
        };

        /**
         * Resize the item dimensions if it's bigger than the viewport
         * @param width {integer} Width of the item to be opened
         * @param height {integer} Height of the item to be opened
         * @return An array containin the "fitted" dimensions
         */
        function _fitToViewport(width, height) {
            resized = false;

            _getDimensions(width, height);

            // Define them in case there's no resize needed
            imageWidth = width, imageHeight = height;

            if (((pp_containerWidth > windowWidth) || (pp_containerHeight > windowHeight)) && doresize && settings.allow_resize && !percentBased) {
                resized = true, fitting = false;

                while (!fitting) {
                    if ((pp_containerWidth > windowWidth)) {
                        imageWidth = (windowWidth - 200);
                        imageHeight = (height / width) * imageWidth;
                    } else if ((pp_containerHeight > windowHeight)) {
                        imageHeight = (windowHeight - 200);
                        imageWidth = (width / height) * imageHeight;
                    } else {
                        fitting = true;
                    };

                    pp_containerHeight = imageHeight, pp_containerWidth = imageWidth;
                };



                if ((pp_containerWidth > windowWidth) || (pp_containerHeight > windowHeight)) {
                    _fitToViewport(pp_containerWidth, pp_containerHeight)
                };

                _getDimensions(imageWidth, imageHeight);
            };

            return {
                width: Math.floor(imageWidth),
                height: Math.floor(imageHeight),
                containerHeight: Math.floor(pp_containerHeight),
                containerWidth: Math.floor(pp_containerWidth) + (settings.horizontal_padding * 2),
                contentHeight: Math.floor(pp_contentHeight),
                contentWidth: Math.floor(pp_contentWidth),
                resized: resized
            };
        };

        /**
         * Get the containers dimensions according to the item size
         * @param width {integer} Width of the item to be opened
         * @param height {integer} Height of the item to be opened
         */
        function _getDimensions(width, height) {
            width = parseFloat(width);
            height = parseFloat(height);

            // Get the details height, to do so, I need to clone it since it's invisible
            $pp_details = $pp_pic_holder.find('.pp_details');
            $pp_details.width(width);
            detailsHeight = parseFloat($pp_details.css('marginTop')) + parseFloat($pp_details.css('marginBottom'));

            $pp_details = $pp_details.clone().width(width).appendTo($('body')).css({
                'position': 'absolute',
                'top': -10000
            });
            detailsHeight += $pp_details.height();
            detailsHeight = (detailsHeight <= 34) ? 36 : detailsHeight; // Min-height for the details
            $pp_details.remove();

            // Get the titles height, to do so, I need to clone it since it's invisible
            $pp_title = $pp_pic_holder.find('.ppt');
            $pp_title.width(width);
            titleHeight = parseFloat($pp_title.css('marginTop')) + parseFloat($pp_title.css('marginBottom'));
            $pp_title = $pp_title.clone().appendTo($('body')).css({
                'position': 'absolute',
                'top': -10000
            });
            titleHeight += $pp_title.height();
            $pp_title.remove();

            // Get the container size, to resize the holder to the right dimensions
            pp_contentHeight = height + detailsHeight;
            pp_contentWidth = width;
            pp_containerHeight = pp_contentHeight + titleHeight + $pp_pic_holder.find('.pp_top').height() + $pp_pic_holder.find('.pp_bottom').height();
            pp_containerWidth = width;
        }

        function _getFileType(itemSrc) {
            if (itemSrc.match(/\b.mov\b/i)) {
                return 'quicktime';
            } else if (itemSrc.match(/\b.swf\b/i)) {
                return 'flash';
            } else if (itemSrc.match(/\biframe=true\b/i)) {
                return 'iframe';
            } else if (itemSrc.match(/\bajax=true\b/i)) {
                return 'ajax';
            } else if (itemSrc.match(/\bcustom=true\b/i)) {
                return 'custom';
            } else if (itemSrc.substr(0, 1) == '#') {
                return 'inline';
            } else {
                return 'image';
            };
        };

        function _center_overlay() {
            if (doresize && typeof $pp_pic_holder != 'undefined') {
                scroll_pos = _get_scroll();
                contentHeight = $pp_pic_holder.height(), contentwidth = $pp_pic_holder.width();

                projectedTop = (windowHeight / 2) + scroll_pos['scrollTop'] - (contentHeight / 2);
                if (projectedTop < 0) projectedTop = 0;

                if (contentHeight > windowHeight)
                    return;

                $pp_pic_holder.css({
                    'top': projectedTop,
                    'left': (windowWidth / 2) + scroll_pos['scrollLeft'] - (contentwidth / 2)
                });
            };
        };

        function _get_scroll() {
            if (self.pageYOffset) {
                return {
                    scrollTop: self.pageYOffset,
                    scrollLeft: self.pageXOffset
                };
            } else if (document.documentElement && document.documentElement.scrollTop) { // Explorer 6 Strict
                return {
                    scrollTop: document.documentElement.scrollTop,
                    scrollLeft: document.documentElement.scrollLeft
                };
            } else if (document.body) { // all other Explorers
                return {
                    scrollTop: document.body.scrollTop,
                    scrollLeft: document.body.scrollLeft
                };
            };
        };

        function _resize_overlay() {
            windowHeight = $(window).height(), windowWidth = $(window).width();

            if (typeof $pp_overlay != "undefined") $pp_overlay.height($(document).height()).width(windowWidth);
        };

        function _insert_gallery() {
            if (isSet && settings.overlay_gallery && _getFileType(pp_images[set_position]) == "image") {
                itemWidth = 52 + 5; // 52 beign the thumb width, 5 being the right margin.
                navWidth = 50; // Define the arrow width depending on the theme

                itemsPerPage = Math.floor((pp_dimensions['containerWidth'] - 100 - navWidth) / itemWidth);
                itemsPerPage = (itemsPerPage < pp_images.length) ? itemsPerPage : pp_images.length;
                totalPage = Math.ceil(pp_images.length / itemsPerPage) - 1;

                // Hide the nav in the case there's no need for links
                if (totalPage == 0) {
                    navWidth = 0; // No nav means no width!
                    $pp_gallery.find('.pp_arrow_next,.pp_arrow_previous').hide();
                } else {
                    $pp_gallery.find('.pp_arrow_next,.pp_arrow_previous').show();
                };

                galleryWidth = itemsPerPage * itemWidth;
                fullGalleryWidth = pp_images.length * itemWidth;

                // Set the proper width to the gallery items
                $pp_gallery
                    .css('margin-left', -((galleryWidth / 2) + (navWidth / 2)))
                    .width(galleryWidth + 50)
                    .find('div:first').width(galleryWidth + 5)
                    .find('ul').width(fullGalleryWidth)
                    .find('li.selected').removeClass('selected');

                goToPage = (Math.floor(set_position / itemsPerPage) < totalPage) ? Math.floor(set_position / itemsPerPage) : totalPage;

                $.photogallery.changeGalleryPage(goToPage);

                $pp_gallery_li.filter(':eq(' + set_position + ')').addClass('selected');
            } else {
                $pp_pic_holder.find('.pp_content').unbind('mouseenter mouseleave');
                // $pp_gallery.hide();
            }
        }

        function _build_overlay(caller) {
            // Inject Social Tool markup into General markup
            /*if (settings.social_tools)
                facebook_like_link = settings.social_tools.replace('{location_href}', encodeURIComponent(location.href));

            settings.markup = settings.markup.replace('{pp_social}', '');*/

            $('body').append(settings.markup); // Inject the markup

            $pp_pic_holder = $('.pp_pic_holder'), $ppt = $('.ppt'), $pp_overlay = $('div.pp_overlay'); // Set my global selectors

            // Inject the inline gallery!
            if (isSet && settings.overlay_gallery) {
                currentGalleryPage = 0;
                toInject = "";
                for (var i = 0; i < pp_images.length; i++) {
                    if (!pp_images[i].match(/\b(jpg|jpeg|png|gif)\b/gi)) {
                        classname = 'default';
                        img_src = '';
                    } else {
                        classname = '';
                        img_src = pp_images[i];
                    }
                    toInject += "<li class='" + classname + "'><a href='#'><img src='" + img_src + "' width='50' alt='' /></a></li>";
                };

                toInject = settings.gallery_markup.replace(/{gallery}/g, toInject);

                $pp_pic_holder.find('#pp_full_res').after(toInject);


                $pp_gallery = $('.pp_pic_holder .pp_gallery'), $pp_gallery_li = $pp_gallery.find('li'); // Set the gallery selectors

                $pp_gallery.find('.pp_arrow_next').click(function() {
                    $.photogallery.changeGalleryPage('next');
                    $.photogallery.stopSlideshow();
                    return false;
                });

                $pp_gallery.find('.pp_arrow_previous').click(function() {
                    $.photogallery.changeGalleryPage('previous');
                    $.photogallery.stopSlideshow();
                    return false;
                });

                $pp_pic_holder.find('.pp_content').hover(
                    function() {
                        $pp_pic_holder.find('.pp_gallery:not(.disabled)').fadeIn();
                    },
                    function() {
                        $pp_pic_holder.find('.pp_gallery:not(.disabled)').fadeOut();
                    });

                itemWidth = 52 + 5; // 52 beign the thumb width, 5 being the right margin.
                $pp_gallery_li.each(function(i) {
                    $(this)
                        .find('a')
                        .click(function() {
                            $.photogallery.changePage(i);
                            $.photogallery.stopSlideshow();
                            return false;
                        });
                });
            };


            // Inject the play/pause if it's a slideshow
            if (settings.slideshow) {
                $pp_pic_holder.find('.pp_nav').prepend('<a href="#" class="pp_play">Play</a>')
                $pp_pic_holder.find('.pp_nav .pp_play').click(function() {
                    $.photogallery.startSlideshow();
                    return false;
                });
            }

            $pp_pic_holder.attr('class', 'pp_pic_holder '); // Set the proper theme

            $pp_overlay
                .css({
                    'opacity': 0,
                    'height': $(document).height(),
                    'width': $(window).width()
                })
                .bind('click', function() {
                    if (!settings.modal) $.photogallery.close();
                });

            $('a.pp_close').bind('click', function() {
                $.photogallery.close();
                return false;
            });
            $('a.pp_close').css({
                'right': '-5px',
                'top': '-5px'
            })

            if (settings.allow_expand) {
                $('a.pp_expand').bind('click', function(e) {
                    // Expand the image
                    if ($(this).hasClass('pp_expand')) {
                        $(this).removeClass('pp_expand').addClass('pp_contract');
                        doresize = false;
                    } else {
                        $(this).removeClass('pp_contract').addClass('pp_expand');
                        doresize = true;
                    };
                    _hideContent(function() {
                        $.photogallery.open();
                    });

                    return false;
                });
            }

            $pp_pic_holder.find('.pp_previous, .pp_nav .pp_arrow_previous').bind('click', function() {
                $.photogallery.changePage('previous');
                $.photogallery.stopSlideshow();
                return false;
            });

            $pp_pic_holder.find('.pp_next, .pp_nav .pp_arrow_next').bind('click', function() {
                $.photogallery.changePage('next');
                $.photogallery.stopSlideshow();
                return false;
            });

            _center_overlay(); // Center it
        };

        if (!pp_alreadyInitialized && getHashtag()) {
            pp_alreadyInitialized = true;

            // Grab the rel index to trigger the click on the correct element
            hashIndex = getHashtag();
            hashRel = hashIndex;
            hashIndex = hashIndex.substring(hashIndex.indexOf('/') + 1, hashIndex.length - 1);
            hashRel = hashRel.substring(0, hashRel.indexOf('/'));

            // Little timeout to make sure all the photogallery initialize scripts has been run.
            // Useful in the event the page contain several init scripts.
            setTimeout(function() {
                $("a[" + pp_settings.hook + "^='" + hashRel + "']:eq(" + hashIndex + ")").trigger('click');
            }, 50);
        }
        return $(this).unbind('click.photogallery').bind('click.photogallery', $.photogallery.initialize); // Return the jQuery object for chaining. The unbind method is used to avoid click conflict when the plugin is called more than once
    };

    function getHashtag() {
        /*var url = location.href;
        hashtag = (url.indexOf('#photogallery') !== -1) ? decodeURI(url.substring(url.indexOf('#photogallery') + 1, url.length)) : false;

        return hashtag;*/
    };

    function setHashtag() {
        /*if (typeof theRel == 'undefined') return; // theRel is set on normal calls, it's impossible to deeplink using the API
        location.hash = theRel + '/' + rel_index + '/';*/
    };

    function clearHashtag() {
        /*if (location.href.indexOf('#photogallery') !== -1) location.hash = "photogallery";*/
    }

    function getParam(name, url) {
        name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
        var regexS = "[\\?&]" + name + "=([^&#]*)";
        var regex = new RegExp(regexS);
        var results = regex.exec(url);
        return (results == null) ? "" : results[1];
    }

})($ || jQuery);

var pp_alreadyInitialized = false; // Used for the deep linking to make sure not to call the same function several times.;;
/**
 *
 * @param
 * @author songjiawei
 *
 * @param[rowCount]: Int; //显示的下拉条数，多余的滚动，默认rowCount＝0，全部显示
 * @param[type]: String; //'list'
 */
(function($){
    var _SELECT_COUNTER = 0 ;
    $.fn.extend({
        mSelect: function(opts){
            opts = $.extend({           
                
            }, opts || {});
            return this.each(function(idx, it){
                var _this = this, o = $(this);
                if (o.attr("created")) 
                    return;
                o.attr("created", true);
                
                var noborder = o.hasClass("noborder");
                
                var w = o.width();
                o.hide();
                var selectId = ((this.name || this.id) + '__jQSelect' + idx || '__jQSelect' + idx) + (++_SELECT_COUNTER);
                selectId = selectId.replace(/\./g,"_");
                var container = $('<div id="' + selectId + '" class="dropdown" tabindex="0"></div>');
                var containerList = $('<div class="lc"><div id="' + selectId + '" class="dropdown" tabindex="0"></div></div>');
                if(opts.type == 'list'){
                    o.wrap(containerList);
                }else{
                    o.wrap(container);
                }
                if(_this.selectedIndex>=0){
                    var text = _this.options[_this.selectedIndex].text;
                }else{
                    var text = "";
                }
                var sel = $('<div class="dropselectbox" id="'+selectId+'"></div>');
                var h4 = $('<h4 title="' + text + (noborder ? '" class="noborder"' : '"') + '>' + text + '</h4>');
                h4.attr('reset',o.attr('reset'));
                sel.append(h4);
                // h4.width(w);
                o.after(sel);
                var ul = $("#ul" + selectId);
                //var iframe = $("<iframe class='select-iframe' style='max-height:115px;'></iframe>");
                var iframe = $("<iframe class='select-iframe'></iframe>"); //Edit by Janice
                var ulShadow = $("#ulShadow" + selectId);
                if(opts.type == 'list'){
                    sel.hover(function(){
                        $(this).addClass("hover");
                    },
                    function(){
                        if(ul.length == 0 || ul.css("display") == "none"){
                            $(this).removeClass("hover");
                        }
                    })
                }
                if (o.prop("disabled")) {
                    h4.addClass("disabled");
                    return;
                }
                h4.bind("click.mSelect", function(evt){
                    if($(this).hasClass("disabled")) {
                        return false;
                    }
                    if (evt) {
                        evt.stopPropagation();
                    }
                    else {
                        window.event.cancelBubble = true;
                    }
                    // $(".edit-select
                    // ul").hide();
                    if(opts.type == 'list'){
                        $(this).parent().addClass("hover");
                    }
                    if (ul.length > 0) {
                        if (ul.css("display") == "none") {
                            $("body").trigger("click.select");
                            ulShadow.show();
                            ulShadow.css({
                                "left" :sel.position().left+4, //+ 9,
                            //  "top" :sel.position().top + 24, //+ (isIE7 ? 75 : 77)
                                "top" :sel.position().top + sel.height(), //Edit by Janice
                                "z-index" : 11
                            });
                            ul.show();
                            iframe.height(ul.height() + 2);
                            iframe.show();
                            if(opts.type == 'list'){
                                ul.css({
                                    "left" : sel.position().left, //+ 9,
                                    "top" : sel.position().top + 19 //+ (isIE7 ? 75 : 77)
                                });
                            }else{
                                ul.css({
                                    "left" : sel.offset().left, //+ 9,
                                //"top" : sel.offset().top + 19 //+ (isIE7 ? 75 : 77)
                                    "top" : sel.offset().top + sel.height(), //Edit by Janice
                                });
                                iframe.css({
                                    "left" : sel.offset().left, 
                                //  "top" : sel.offset().top + 19
                                    "top" : sel.offset().top + sel.height(), //Edit by Janice
                                });
                            }
                            var minWidth = h4[0].offsetWidth - 4; // 4为ul的padding + borde所占宽度
                            if(ul.width() < minWidth || ($.browser.msie && $.browser.version == 6)){
                                if(opts.type != 'list'){
                                    ul.width(minWidth);
                                    iframe.width(minWidth + 4);
                                }
                            }else if($.browser.msie && $.browser.version == 7){
                                $('li',ul).width(ul.width()-20); // 20为li的padding right
                            }else if( (ul.offset().left + ul.width()) > $('body').width()){
                                ul.width($('body').width()-ul.offset().left);
                                iframe.width($('body').width()-ul.offset().left + 8);
                            }
                            h4.parent().addClass("hover");
                        }
                        else {
                            $("body").trigger("click.select");
                        }
                    }
                    else {
                        $("body").trigger("click.select");
                        if(opts.type == 'list'){
                            ul = $('<ul id="ul' + selectId + '"' + (noborder ? ' class="lc edit-select-box"' : ' class="lc edit-select-box noborder"') + '></ul>');
                            ulShadow = $('<div id="ulShadow' + selectId + '"' + (noborder ? ' class="shadow-mask"' : ' class="shadow-mask noborder"') + '></div>');
                            ul.width("135px");
                            ulShadow.width("139px");
                            ulShadow.height(22*_this.options.length + _this.options.length + 5);
                            sel.append(ul);
                            sel.append(ulShadow);
                            ul.css({
                                "left" : sel.position().left, //+ 9,
                                "top" : sel.position().top + 23, //+ (isIE7 ? 75 : 77)
                                "padding-bottom":"4px",
                                "background-color" :"#F1F1F1"
                            });
                            ulShadow.css({
                                "left" : sel.position().left+4, //+ 9,
                                "top" : sel.position().top + 24, //+ (isIE7 ? 75 : 77)
                                "z-index" : 11
                            });
                        }else{
                            //ul = $('<ul style="max-height:110px;" id="ul' + selectId + '"' + (noborder ? ' class="edit-select-box"' : ' class="edit-select-box noborder"') + '></ul>');
                            ul = $('<ul id="ul' + selectId + '"' + (noborder ? ' class="edit-select-box"' : ' class="edit-select-box noborder"') + '></ul>'); //Edit
                            //ul.width(h4.width() - (noborder ? 2 : 0) );
                            //ul.width(h4.width() - (noborder ? 2 : 0) );
                            $("body").append(ul);
                            $("body").append(iframe);
                            ul.css({
                                "left" : sel.offset().left, //+ 9,
                            //  "top" : sel.offset().top + 23 //+ (isIE7 ? 75 : 77)
                                "top" : sel.offset().top + sel.height(), //Edit by Janice
                            });
                            iframe.css({
                                "left" : sel.offset().left,
                            //  "top" : sel.offset().top + 19
                                "top" : sel.offset().top + sel.height(), //Edit by Janice
                            });
                        }
                        //if(isIE6 || isIE7){
                            
                            
                       // }
//                        else
//                          sel.append(ul);
                        
                        for (var i = 0; i < _this.options.length; i++) {
                            var li = $('<li idx="' +
                            i +
                            '">' +
                            _this.options[i].text +
                            '</li>');
                            li.hover(function(){
                                $(this).addClass("over");
                            }, function(){
                                $(this).removeClass("over");
                            });
                            li.bind("click.mSelect_li", function(e){
                                if (e) {
                                    e.stopPropagation();
                                }
                                else {
                                    window.event.cancelBubble = true;
                                }
                                if(opts.setValueCallBack) {
                                    opts.setValueCallBack($(this).text());
                                }
                                
                                _this.options[$(this).attr("idx")].selected = true;
                                h4.text($(this).text()).attr('title',$(this).text());
                                //console.log($(this).attr("value"));
                                //h4.attr("value",$(this).attr("value"));
                                h4.parent().removeClass("hover");
                                ul.hide();
                                iframe.hide();
                                ulShadow.hide();

                                //Edited: 当option里有设置参数params，则在运行change事件时，把params参数传到change事件处罚的方法中
                                //o.trigger("change");
                                if(_this.options[$(this).attr("idx")].getAttribute("params")){
                                    o.trigger("change",_this.options[$(this).attr("idx")].getAttribute("params"));
                                }
                                else{
                                    o.trigger("change");
                                }

                            });
                            ul.append(li);
                        }

                        //Added by Janice
                        if (opts.type == 'list') {
                        }
                        else{
                            // 如果rowCount大于0，则下拉列表只显示rowCount条，多余的按滚动条显示。否则为全部显示
                            if (opts.rowCount>0) {
                                ul.css({
                                    "max-height": $(".edit-select-box li").eq(0).height() * opts.rowCount+"px"
                                });
                            }
                        }
                        

                        ul.show(); 
                        iframe.height(ul.height() + 2);
                        iframe.width(ul.width());
                        iframe.show();
                        ulShadow.show(); 
                        //var minWidth = h4.width() - (noborder ? 2 : 0);
                        var minWidth = h4[0].offsetWidth - 4; // 4为ul的padding + borde所占宽度
                        if(ul.width() < minWidth || ($.browser.msie && $.browser.version == 6)){
                            if(opts.type != 'list'){
                                ul.width(minWidth);
                                iframe.width(minWidth + 4);
                            }
                        }else if($.browser.msie && $.browser.version == 7){
                            $('li',ul).width(ul.width()-20); // 20为li的padding right
                        }else if( (ul.offset().left + ul.width()) > $('body').width()){
                            ul.width($('body').width()-ul.offset().left);
                        }
                        if(($.browser.msie && $.browser.version == 6) && ul.height() > 180){
                            if(opts.type != 'list'){
                                ul.height(180);
                                iframe.height(182);
                            }
                        }  

                        $("body, .ui_title_bar, .bDiv a").bind("click.select", function(e){
                            ul.hide();
                            iframe.hide();
                            ulShadow.hide();
                            if(h4.parent().hasClass("hover")){
                                h4.parent().removeClass("hover")
                            }
                        });
                        $(window).resize(function(){ul.hide();iframe.hide();ulShadow.hide();});
                    }
                });
                
            });
        },
        //给非源生的select框动态赋值
        addOption: function(text,value,index){
            var _this = this[0];
            var y = document.createElement('option');
            y.text = text;
            y.value = value;
            if(index >= 0){
                var sel=_this.options[index]; 
                _this.add(y,sel);
            }else if(index == null || index == undefined || index == ''){
                try{
                    _this.add(y,null); // standards compliant
                }catch(ex){
                    _this.add(y); // IE only
                }
            }
            var selectId = ((_this.name || _this.id) + '__jQSelect'|| '__jQSelect');
            selectId = selectId.replace(/\./g,"_");
            var h4 = $('div.dropselectbox[id^="'+selectId+'"] h4');
            var ul = $('ul[id^="ul'+selectId+'"]:last');
            if(ul != null || ul != undefined || ul != ''){
                var len = ul.children().length;
                var li = $('<li idx="' + len + '">' + text + '</li>');
                li.hover(function(){
                    $(this).addClass("over");
                }, function(){
                    $(this).removeClass("over");
                });
                li.bind("click.addOption_li", function(e){
                    if (e) {
                        e.stopPropagation();
                    }else {
                        window.event.cancelBubble = true;
                    }
                    _this.options[$(this).attr("idx")].selected = true;
                    h4.text($(this).text()).attr('title',$(this).text());
                    h4.parent().removeClass("hover");
                    ul.hide();
                    ul.next('iframe').hide();
                    $(this).trigger("change");
                });
                ul.append(li);
            }
        },
        //动态删除非源生的select框的值
        removeOption: function(n){
            var _this = this[0];
            var len = _this.options.length;
            var selectId = ((_this.name || _this.id) + '__jQSelect'|| '__jQSelect');
            selectId = selectId.replace(/\./g,"_");
            var h4 = $('div.dropselectbox[id^="'+selectId+'"] h4');
            var ul = $('ul[id^="ul'+selectId+'"]:last');
            if(n === null || n === undefined || parseInt(n,10)===undefined){
                //删除所有option
                if (len > 0){
                    for(var i=0;i<len;i++){
                        _this.remove(0);
                        $('li:eq('+ 0 +')',ul).remove();
                    }               
                }
                h4.text('');
            }else{
                var n = parseInt(n,10);
                if(_this.selectedIndex == n){
                    h4.text('');
                }
                _this.remove(n);
                $('li:eq('+ n +')',ul).remove();
            }
            ul.next('iframe').height(ul.height() + 2);
        },
        //根据value值删除option
        delOption:function(val){
            $(this).removeOption($("option[value='"+ val +"']",this).index());
        },
        //给select动态赋值
        setValue: function(value){
            var _this = this[0];
            var selectId = ((_this.name || _this.id) + '__jQSelect'|| '__jQSelect');
            selectId = selectId.replace(/\./g,"_");
            var h4 = $('div.dropselectbox[id^="'+selectId+'"] h4');
            var options = _this.options;
            var len = options.length;
            var existFlag = false;
            for(var i=0;i<len;i++){
                var v = $(options[i]).attr("value");
                if( v === value){
                    existFlag = true;
                    var text = $(options[i]).text();
                    options[i].selected = true;
                    break;
                }
            }
            if(!existFlag) {
                h4.text("");
            }else{
                h4.text(text);
            }
        },
        
        disabledSelect : function() {
             var selectId = ((this[0].name || this[0].id) + '__jQSelect'|| '__jQSelect').replace(/\./g,"_");
             $('div.dropselectbox[id^="'+selectId+'"] h4').addClass("disabled");
        },
        
        unDisabledSelect : function() {
            var selectId = ((this[0].name || this[0].id) + '__jQSelect'|| '__jQSelect').replace(/\./g,"_");
            $('div.dropselectbox[id^="'+selectId+'"] h4').removeClass("disabled");
        },
        
        /**
         * 清空弹出区域
         */
        clearSelectMenu: function(selectId, selectZindex){
            if (selectId != undefined) {
                selectZindex = selectZindex || 'auto';
                $('*[id="' + selectId + '"] ul').empty().hide();
                $('*[id="' + selectId + '"] h4').removeClass("over").removeClass("current");
                $('*[id="' + selectId + '"]').css({
                    'z-index': selectZindex
                });
            }
        },
        /**
         * 给弹出层赋值
         */
        setSelectValue: function(sID){
            var content = [];
            $.each($('*[id="' + sID + '"] option'), function(i){
                content.push("<li class='FixSelectBrowser'>" +
                $(this).text() +
                "</li>");
            });
            content = content.join('');
            $('*[id="' + sID + '"] ul').html(content);
            $('*[id="' + sID + '"] h4').html($('*[id="' + sID + '"] option:selected').text());
            $('*[id="' + sID + '"] li').eq($('*[id="' + sID + '"] select')[0].selectedIndex).addClass("over").addClass("selectedli");
        },
        /**
         * 键盘选择
         */
        keyDown: function(sID, selectIndex){
            var $obj = $('*[id="' + sID + '"] select');
            $obj[0].selectedIndex = selectIndex;
            $obj.change();
            $('*[id="' + sID + '"] li:eq(' + selectIndex + ')').toggleClass("over");
            $('*[id="' + sID + '"] h4').html($('*[id="' + sID + '"] option:selected').text());
        }
    });
    var types = ['DOMMouseScroll', 'mousewheel'];
    $.event.special.mousewheel = {
        setup: function(){
            if (this.addEventListener) {
                for (var i = types.length; i;) 
                    this.addEventListener(types[--i], handler, false);
            }
            else {
                this.onmousewheel = handler;
            }
        },
        teardown: function(){
            if (this.removeEventListener) {
                for (var i = types.length; i;) 
                    this.removeEventListener(types[--i], handler, false);
            }
            else {
                this.onmousewheel = null;
            }
        }
    };
    $.fn.extend({
        mousewheel: function(fn){
            return fn ? this.bind("mousewheel", fn) : this.trigger("mousewheel");
        },
        
        unmousewheel: function(fn){
            return this.unbind("mousewheel", fn);
        }
    });
    
    /**
     * 不同浏览器的处理事件
     */
    function handler(event){
        var args = [].slice.call(arguments, 1), delta = 0, returnValue = true;
        event = $.event.fix(event || window.event);
        event.type = "mousewheel";
        // IE: event.wheelDelta,这个值，一旦你往上滚动一次鼠标，他就是120，如果你要是往下滚动一次，那么它的值就是-120。
        // FF: event.detail,这个值，一旦你往上滚动一次鼠标，他就是-3，如果你要是往下滚动一次，那么它的值就是3。
        if (event.wheelDelta) 
            delta = event.wheelDelta / 120; // IE或者Opera
        if (event.detail) 
            delta = -event.detail / 3; // 兼容Firfox
        args.unshift(event, delta);
        return $.event.handle.apply(this, args);
    }
    
    $(function(){
        $(".edit-select").mSelect();
    });
})(jQuery);

function selectbox(obj, event){
    stopBubble(event);
    var o = $(obj);
    var p = o.parent();
    var ul = $("ul", p.parent());
    if (ul.length > 0) {
        if (ul.css("display") == "none") {
            ul.show();
        }
        else{
            ul.hide();
        } 
    }
    else {
        ul = $('<ul></ul>');
        p.after(ul);
        var select = $("select", p);
        for (var i = 0; i < select[0].options.length; i++) {
            var li = $('<li idx="' + i + '">' + select[0].options[i].text +
            '</li>');
            if ($.browser.msie) {
                li.hover(function(){
                    $(this).addClass("over");
                }, function(){
                    $(this).removeClass("over");
                });
            }
            li.bind("click.mSelect_li", function(e){
                stopBubble(e);
                select[0].options[$(this).attr("idx")].selected = true;
                ul.hide();
                select.trigger("change");
            });
            ul.append(li);
            $("body").bind("click.select", function(e){
                ul.hide();
            });
        }
    }
};

;/*jslint  browser: true, white: true, plusplus: true */
/*global define, window, document, jQuery */

// Expose plugin as an AMD module if AMD loader is present:
(function (factory) {
    'use strict';
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['jquery'], factory);
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {
    'use strict';

    var
        utils = (function () {
            return {
                escapeRegExChars: function (value) {
                    return value.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
                },
                createNode: function (containerClass) {
                    var div = document.createElement('div');
                    div.className = containerClass;
                    div.style.position = 'absolute';
                    div.style.display = 'none';
                    return div;
                }
            };
        }()),

        keys = {
            ESC: 27,
            TAB: 9,
            RETURN: 13,
            LEFT: 37,
            UP: 38,
            RIGHT: 39,
            DOWN: 40
        };

    function Autocomplete(el, options) {
        var noop = function () { },
            that = this,
            defaults = {
                queryKey : "query",
                resultKey : "result",
                autoSelectFirst: false,
                appendTo: 'body',
                serviceUrl: null,
                lookup: null,
                onSelect: null,
                width: 'auto',
                minChars: 1,
                maxHeight: 300,
                deferRequestBy: 0,
                params: {},
                formatResult: Autocomplete.formatResult,
                delimiter: null,
                zIndex: 9999,
                type: 'GET',
                noCache: false,
                onSearchStart: noop,
                onSearchComplete: noop,
                onSearchError: noop,
                containerClass: 'autocomplete-suggestions',
                tabDisabled: false,
                dataType: 'text',
                currentRequest: null,
                triggerSelectOnValidInput: true,
                lookupFilter: function (suggestion, originalQuery, queryLowerCase) {
                    return suggestion.value.toLowerCase().indexOf(queryLowerCase) !== -1;
                },
                paramName: 'query',
                transformResult: function (response) {
                    return typeof response === 'string' ? $.parseJSON(response) : response;
                }
            };

        // Shared variables:
        that.element = el;
        that.el = $(el);
        that.suggestions = [];
        that.badQueries = [];
        that.selectedIndex = -1;
        that.currentValue = that.element.value;
        that.intervalId = 0;
        that.cachedResponse = {};
        that.onChangeInterval = null;
        that.onChange = null;
        that.isLocal = false;
        that.suggestionsContainer = null;
        that.options = $.extend({}, defaults, options);
        that.classes = {
            selected: 'autocomplete-selected',
            suggestion: 'autocomplete-suggestion'
        };
        that.hint = null;
        that.hintValue = '';
        that.selection = null;

        // Initialize and set options:
        that.initialize();
        that.setOptions(options);
    }

    Autocomplete.utils = utils;

    $.Autocomplete = Autocomplete;

    Autocomplete.formatResult = function (suggestion, currentValue) {
        var pattern = '(' + utils.escapeRegExChars(currentValue) + ')';

        return suggestion.value.replace(new RegExp(pattern, 'gi'), '<strong>$1<\/strong>');
    };

    Autocomplete.prototype = {

        killerFn: null,

        initialize: function () {
            var that = this,
                suggestionSelector = '.' + that.classes.suggestion,
                selected = that.classes.selected,
                options = that.options,
                container;

            // Remove autocomplete attribute to prevent native suggestions:
            that.element.setAttribute('autocomplete', 'off');

            that.killerFn = function (e) {
                if ($(e.target).closest('.' + that.options.containerClass).length === 0) {
                    that.killSuggestions();
                    that.disableKillerFn();
                }
            };

            that.suggestionsContainer = Autocomplete.utils.createNode(options.containerClass);

            container = $(that.suggestionsContainer);

            container.appendTo(options.appendTo);

            // Only set width if it was provided:
            if (options.width !== 'auto') {
                container.width(options.width);
            }

            // Listen for mouse over event on suggestions list:
            container.on('mouseover.autocomplete', suggestionSelector, function () {
                that.activate($(this).data('index'));
            });

            // Deselect active element when mouse leaves suggestions container:
            container.on('mouseout.autocomplete', function () {
                that.selectedIndex = -1;
                container.children('.' + selected).removeClass(selected);
            });

            // Listen for click event on suggestions list:
            container.on('click.autocomplete', suggestionSelector, function () {
                that.select($(this).data('index'));
            });

            that.fixPosition();

            that.fixPositionCapture = function () {
                if (that.visible) {
                    that.fixPosition();
                }
            };

            $(window).on('resize.autocomplete', that.fixPositionCapture);

            that.el.on('keydown.autocomplete', function (e) { that.onKeyPress(e); });
            that.el.on('keyup.autocomplete', function (e) { that.onKeyUp(e); });
            that.el.on('blur.autocomplete', function () { that.onBlur(); });
            that.el.on('focus.autocomplete', function () { that.onFocus(); });
            that.el.on('change.autocomplete', function (e) { that.onKeyUp(e); });
        },

        onFocus: function () {
            var that = this;
            that.fixPosition();
            if (that.options.minChars <= that.el.val().length) {
                that.onValueChange();
            }
        },

        onBlur: function () {
            this.enableKillerFn();
        },

        setOptions: function (suppliedOptions) {
            var that = this,
                options = that.options;

            $.extend(options, suppliedOptions);

            that.isLocal = $.isArray(options.lookup);

            if (that.isLocal) {
                options.lookup = that.verifySuggestionsFormat(options.lookup);
            }

            // Adjust height, width and z-index:
            $(that.suggestionsContainer).css({
                'max-height': options.maxHeight + 'px',
                'width': options.width + 'px',
                'z-index': options.zIndex
            });
        },

        clearCache: function () {
            this.cachedResponse = {};
            this.badQueries = [];
        },

        clear: function () {
            this.clearCache();
            this.currentValue = '';
            this.suggestions = [];
        },

        disable: function () {
            var that = this;
            that.disabled = true;
            if (that.currentRequest) {
                that.currentRequest.abort();
            }
        },

        enable: function () {
            this.disabled = false;
        },

        fixPosition: function () {
            var that = this,
                offset,
                styles;

            // Don't adjsut position if custom container has been specified:
            if (that.options.appendTo !== 'body') {
                return;
            }

            offset = that.el.offset();

            styles = {
                top: (offset.top + that.el.outerHeight()) + 'px',
                left: offset.left + 'px'
            };

            if (that.options.width === 'auto') {
                styles.width = (that.el.outerWidth() - 2) + 'px';
            }

            $(that.suggestionsContainer).css(styles);
        },

        enableKillerFn: function () {
            var that = this;
            $(document).on('click.autocomplete', that.killerFn);
        },

        disableKillerFn: function () {
            var that = this;
            $(document).off('click.autocomplete', that.killerFn);
        },

        killSuggestions: function () {
            var that = this;
            that.stopKillSuggestions();
            that.intervalId = window.setInterval(function () {
                that.hide();
                that.stopKillSuggestions();
            }, 50);
        },

        stopKillSuggestions: function () {
            window.clearInterval(this.intervalId);
        },

        isCursorAtEnd: function () {
            var that = this,
                valLength = that.el.val().length,
                selectionStart = that.element.selectionStart,
                range;

            if (typeof selectionStart === 'number') {
                return selectionStart === valLength;
            }
            if (document.selection) {
                range = document.selection.createRange();
                range.moveStart('character', -valLength);
                return valLength === range.text.length;
            }
            return true;
        },

        onKeyPress: function (e) {
            var that = this;

            // If suggestions are hidden and user presses arrow down, display suggestions:
            if (!that.disabled && !that.visible && e.which === keys.DOWN && that.currentValue) {
                that.suggest();
                return;
            }

            if (that.disabled || !that.visible) {
                return;
            }

            switch (e.which) {
                case keys.ESC:
                    that.el.val(that.currentValue);
                    that.hide();
                    break;
                case keys.RIGHT:
                    if (that.hint && that.options.onHint && that.isCursorAtEnd()) {
                        that.selectHint();
                        break;
                    }
                    return;
                case keys.TAB:
                    if (that.hint && that.options.onHint) {
                        that.selectHint();
                        return;
                    }
                    // Fall through to RETURN
                case keys.RETURN:
                    if (that.selectedIndex === -1) {
                        that.hide();
                        return;
                    }
                    that.select(that.selectedIndex);
                    if (e.which === keys.TAB && that.options.tabDisabled === false) {
                        return;
                    }
                    break;
                case keys.UP:
                    that.moveUp();
                    break;
                case keys.DOWN:
                    that.moveDown();
                    break;
                default:
                    return;
            }

            // Cancel event if function did not return:
            e.stopImmediatePropagation();
            e.preventDefault();
        },

        onKeyUp: function (e) {
            var that = this;

            if (that.disabled) {
                return;
            }

            switch (e.which) {
                case keys.UP:
                case keys.DOWN:
                    return;
            }

            clearInterval(that.onChangeInterval);

            if (that.currentValue !== that.el.val()) {
                that.findBestHint();
                if (that.options.deferRequestBy > 0) {
                    // Defer lookup in case when value changes very quickly:
                    that.onChangeInterval = setInterval(function () {
                        that.onValueChange();
                    }, that.options.deferRequestBy);
                } else {
                    that.onValueChange();
                }
            }
        },

        onValueChange: function () {
            var that = this,
                options = that.options,
                value = that.el.val(),
                query = that.getQuery(value),
                index;

            if (that.selection) {
                that.selection = null;
                (options.onInvalidateSelection || $.noop).call(that.element);
            }

            clearInterval(that.onChangeInterval);
            that.currentValue = value;
            that.selectedIndex = -1;

            // Check existing suggestion for the match before proceeding:
            if (options.triggerSelectOnValidInput) {
                index = that.findSuggestionIndex(query);
                if (index !== -1) {
                    that.select(index);
                    return;
                }
            }

            if (query.length < options.minChars) {
                that.hide();
            } else {
                that.getSuggestions(query);
            }
        },

        findSuggestionIndex: function (query) {
            var that = this,
                index = -1,
                queryLowerCase = query.toLowerCase();

            $.each(that.suggestions, function (i, suggestion) {
                if (suggestion.value.toLowerCase() === queryLowerCase) {
                    index = i;
                    return false;
                }
            });

            return index;
        },

        getQuery: function (value) {
            var delimiter = this.options.delimiter,
                parts;

            if (!delimiter) {
                return value;
            }
            parts = value.split(delimiter);
            return $.trim(parts[parts.length - 1]);
        },

        getSuggestionsLocal: function (query) {
            var that = this,
                options = that.options,
                queryLowerCase = query.toLowerCase(),
                filter = options.lookupFilter,
                limit = parseInt(options.lookupLimit, 10),
                data;

            data = {
                suggestions: $.grep(options.lookup, function (suggestion) {
                    return filter(suggestion, query, queryLowerCase);
                })
            };

            if (limit && data.suggestions.length > limit) {
                data.suggestions = data.suggestions.slice(0, limit);
            }

            return data;
        },

        getSuggestions: function (q) {
            var response,
                that = this,
                options = that.options,
                serviceUrl = options.serviceUrl,
                data,
                cacheKey;

            options.params[options.paramName] = q;
            data = options.ignoreParams ? null : options.params;

            if (that.isLocal) {
                response = that.getSuggestionsLocal(q);
            } else {
                if ($.isFunction(serviceUrl)) {
                    serviceUrl = serviceUrl.call(that.element, q);
                }
                cacheKey = serviceUrl + '?' + $.param(data || {});
                response = that.cachedResponse[cacheKey];
            }

            if (response && $.isArray(response.suggestions)) {
                that.suggestions = response.suggestions;
                that.suggest();
            } else if (!that.isBadQuery(q)) {
                if (options.onSearchStart.call(that.element, options.params) === false) {
                    return;
                }
                if (that.currentRequest) {
                    that.currentRequest.abort();
                }
                that.currentRequest = $.ajax({
                    url: serviceUrl,
                    data: data,
                    type: options.type,
                    dataType: options.dataType
                }).done(function (data) {
                    that.currentRequest = null;
                    that.processResponse(data, q, cacheKey);
                    options.onSearchComplete.call(that.element, q);
                }).fail(function (jqXHR, textStatus, errorThrown) {
                    options.onSearchError.call(that.element, q, jqXHR, textStatus, errorThrown);
                });
            }
        },

        isBadQuery: function (q) {
            var badQueries = this.badQueries,
                i = badQueries.length;

            while (i--) {
                if (q.indexOf(badQueries[i]) === 0) {
                    return true;
                }
            }

            return false;
        },

        hide: function () {
            var that = this;
            that.visible = false;
            that.selectedIndex = -1;
            $(that.suggestionsContainer).hide();
            that.signalHint(null);
        },

        suggest: function () {
            if (this.suggestions.length === 0) {
                this.hide();
                return;
            }

            var that = this,
                options = that.options,
                formatResult = options.formatResult,
                value = that.getQuery(that.currentValue),
                className = that.classes.suggestion,
                classSelected = that.classes.selected,
                container = $(that.suggestionsContainer),
                beforeRender = options.beforeRender,
                html = '',
                index,
                width;

            if (options.triggerSelectOnValidInput) {
                index = that.findSuggestionIndex(value);
                if (index !== -1) {
                    that.select(index);
                    return;
                }
            }

            // Build suggestions inner HTML:
            $.each(that.suggestions, function (i, suggestion) {
                html += '<div class="' + className + '" data-index="' + i + '">' + formatResult(suggestion, value) + '</div>';
            });

            // If width is auto, adjust width before displaying suggestions,
            // because if instance was created before input had width, it will be zero.
            // Also it adjusts if input width has changed.
            // -2px to account for suggestions border.
            if (options.width === 'auto') {
                width = that.el.outerWidth() - 2;
                container.width(width > 0 ? width : 300);
            }

            container.html(html);

            // Select first value by default:
            if (options.autoSelectFirst) {
                that.selectedIndex = 0;
                container.children().first().addClass(classSelected);
            }

            if ($.isFunction(beforeRender)) {
                beforeRender.call(that.element, container);
            }

            container.show();
            that.visible = true;

            that.findBestHint();
        },

        findBestHint: function () {
            var that = this,
                value = that.el.val().toLowerCase(),
                bestMatch = null;

            if (!value) {
                return;
            }

            $.each(that.suggestions, function (i, suggestion) {
                var foundMatch = suggestion.value.toLowerCase().indexOf(value) === 0;
                if (foundMatch) {
                    bestMatch = suggestion;
                }
                return !foundMatch;
            });

            that.signalHint(bestMatch);
        },

        signalHint: function (suggestion) {
            var hintValue = '',
                that = this;
            if (suggestion) {
                hintValue = that.currentValue + suggestion.value.substr(that.currentValue.length);
            }
            if (that.hintValue !== hintValue) {
                that.hintValue = hintValue;
                that.hint = suggestion;
                (this.options.onHint || $.noop)(hintValue);
            }
        },

        verifySuggestionsFormat: function (suggestions) {
            // If suggestions is string array, convert them to supported format:
            if (suggestions.length && typeof suggestions[0] === 'string') {
                return $.map(suggestions, function (value) {
                    return { value: value, data: null };
                });
            }

            if(suggestions.length){
                var _this = this;
                return $.map(suggestions, function (value) {
                    return { value: value[_this.options.returnKey], data: value[_this.options.resultKey] };
                });
            }

            return suggestions;
        },

        processResponse: function (response, originalQuery, cacheKey) {
            var that = this,
                options = that.options,
                result = options.transformResult(response, originalQuery);

            result.suggestions = that.verifySuggestionsFormat(result[this.options.resultKey]);

            // Cache results if cache is not disabled:
            if (!options.noCache) {
                that.cachedResponse[cacheKey] = result;
                if (result.suggestions.length === 0) {
                    that.badQueries.push(cacheKey);
                }
            }

            // Return if originalQuery is not matching current query:
            if (originalQuery !== that.getQuery(that.currentValue)) {
                return;
            }

            that.suggestions = result.suggestions;
            that.suggest();
        },

        activate: function (index) {
            var that = this,
                activeItem,
                selected = that.classes.selected,
                container = $(that.suggestionsContainer),
                children = container.children();

            container.children('.' + selected).removeClass(selected);

            that.selectedIndex = index;

            if (that.selectedIndex !== -1 && children.length > that.selectedIndex) {
                activeItem = children.get(that.selectedIndex);
                $(activeItem).addClass(selected);
                return activeItem;
            }

            return null;
        },

        selectHint: function () {
            var that = this,
                i = $.inArray(that.hint, that.suggestions);

            that.select(i);
        },

        select: function (i) {
            var that = this;
            that.hide();
            that.onSelect(i);
        },

        moveUp: function () {
            var that = this;

            if (that.selectedIndex === -1) {
                return;
            }

            if (that.selectedIndex === 0) {
                $(that.suggestionsContainer).children().first().removeClass(that.classes.selected);
                that.selectedIndex = -1;
                that.el.val(that.currentValue);
                that.findBestHint();
                return;
            }

            that.adjustScroll(that.selectedIndex - 1);
        },

        moveDown: function () {
            var that = this;

            if (that.selectedIndex === (that.suggestions.length - 1)) {
                return;
            }

            that.adjustScroll(that.selectedIndex + 1);
        },

        adjustScroll: function (index) {
            var that = this,
                activeItem = that.activate(index),
                offsetTop,
                upperBound,
                lowerBound,
                heightDelta = 25;

            if (!activeItem) {
                return;
            }

            offsetTop = activeItem.offsetTop;
            upperBound = $(that.suggestionsContainer).scrollTop();
            lowerBound = upperBound + that.options.maxHeight - heightDelta;

            if (offsetTop < upperBound) {
                $(that.suggestionsContainer).scrollTop(offsetTop);
            } else if (offsetTop > lowerBound) {
                $(that.suggestionsContainer).scrollTop(offsetTop - that.options.maxHeight + heightDelta);
            }

            that.el.val(that.getValue(that.suggestions[index].value));
            that.signalHint(null);
        },

        onSelect: function (index) {
            var that = this,
                onSelectCallback = that.options.onSelect,
                suggestion = that.suggestions[index];

            that.currentValue = that.getValue(suggestion.value);
            that.el.val(that.currentValue);
            that.signalHint(null);
            that.suggestions = [];
            that.selection = suggestion;

            if ($.isFunction(onSelectCallback)) {
                onSelectCallback.call(that.element, suggestion);
            }
        },

        getValue: function (value) {
            var that = this,
                delimiter = that.options.delimiter,
                currentValue,
                parts;

            if (!delimiter) {
                return value;
            }

            currentValue = that.currentValue;
            parts = currentValue.split(delimiter);

            if (parts.length === 1) {
                return value;
            }

            return currentValue.substr(0, currentValue.length - parts[parts.length - 1].length) + value;
        },

        dispose: function () {
            var that = this;
            that.el.off('.autocomplete').removeData('autocomplete');
            that.disableKillerFn();
            $(window).off('resize.autocomplete', that.fixPositionCapture);
            $(that.suggestionsContainer).remove();
        }
    };

    // Create chainable jQuery plugin:
    $.fn.autocomplete = function (options, args) {
        var resultKey = 'autocomplete';
        // If function invoked without argument return
        // instance of the first matched element:
        if (arguments.length === 0) {
            return this.first().data(resultKey);
        }

        return this.each(function () {
            var inputElement = $(this),
                instance = inputElement.data(resultKey);

            if (typeof options === 'string') {
                if (instance && typeof instance[options] === 'function') {
                    instance[options](args);
                }
            } else {
                // If instance already exists, destroy it:
                if (instance && instance.dispose) {
                    instance.dispose();
                }
                instance = new Autocomplete(this, options);
                inputElement.data(resultKey, instance);
            }
        });
    };
}));
;/*!
 * jQuery Form Plugin
 * version: 3.37.0-2013.07.11
 * @requires jQuery v1.5 or later
 * Copyright (c) 2013 M. Alsup
 * Examples and documentation at: http://malsup.com/jquery/form/
 * Project repository: https://github.com/malsup/form
 * Dual licensed under the MIT and GPL licenses.
 * https://github.com/malsup/form#copyright-and-license
 */
/*global ActiveXObject */
;(function($) {
"use strict";

/*
    Usage Note:
    -----------
    Do not use both ajaxSubmit and ajaxForm on the same form.  These
    functions are mutually exclusive.  Use ajaxSubmit if you want
    to bind your own submit handler to the form.  For example,

    $(document).ready(function() {
        $('#myForm').on('submit', function(e) {
            e.preventDefault(); // <-- important
            $(this).ajaxSubmit({
                target: '#output'
            });
        });
    });

    Use ajaxForm when you want the plugin to manage all the event binding
    for you.  For example,

    $(document).ready(function() {
        $('#myForm').ajaxForm({
            target: '#output'
        });
    });

    You can also use ajaxForm with delegation (requires jQuery v1.7+), so the
    form does not have to exist when you invoke ajaxForm:

    $('#myForm').ajaxForm({
        delegation: true,
        target: '#output'
    });

    When using ajaxForm, the ajaxSubmit function will be invoked for you
    at the appropriate time.
*/

/**
 * Feature detection
 */
var feature = {};
feature.fileapi = $("<input type='file'/>").get(0).files !== undefined;
feature.formdata = window.FormData !== undefined;

var hasProp = !!$.fn.prop;

// attr2 uses prop when it can but checks the return type for
// an expected string.  this accounts for the case where a form 
// contains inputs with names like "action" or "method"; in those
// cases "prop" returns the element
$.fn.attr2 = function() {
    if ( ! hasProp )
        return this.attr.apply(this, arguments);
    var val = this.prop.apply(this, arguments);
    if ( ( val && val.jquery ) || typeof val === 'string' )
        return val;
    return this.attr.apply(this, arguments);
};

/**
 * ajaxSubmit() provides a mechanism for immediately submitting
 * an HTML form using AJAX.
 */
$.fn.ajaxSubmit = function(options) {
    /*jshint scripturl:true */

    // fast fail if nothing selected (http://dev.jquery.com/ticket/2752)
    if (!this.length) {
        log('ajaxSubmit: skipping submit process - no element selected');
        return this;
    }

    var method, action, url, $form = this;

    if (typeof options == 'function') {
        options = { success: options };
    }
    else if ( options === undefined ) {
        options = {};
    }

    method = options.type || this.attr2('method');
    action = options.url  || this.attr2('action');

    url = (typeof action === 'string') ? $.trim(action) : '';
    url = url || window.location.href || '';
    if (url) {
        // clean url (don't include hash vaue)
        url = (url.match(/^([^#]+)/)||[])[1];
    }

    options = $.extend(true, {
        url:  url,
        success: $.ajaxSettings.success,
        type: method || 'GET',
        iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank'
    }, options);

    // hook for manipulating the form data before it is extracted;
    // convenient for use with rich editors like tinyMCE or FCKEditor
    var veto = {};
    this.trigger('form-pre-serialize', [this, options, veto]);
    if (veto.veto) {
        log('ajaxSubmit: submit vetoed via form-pre-serialize trigger');
        return this;
    }

    // provide opportunity to alter form data before it is serialized
    if (options.beforeSerialize && options.beforeSerialize(this, options) === false) {
        log('ajaxSubmit: submit aborted via beforeSerialize callback');
        return this;
    }

    var traditional = options.traditional;
    if ( traditional === undefined ) {
        traditional = $.ajaxSettings.traditional;
    }

    var elements = [];
    var qx, a = this.formToArray(options.semantic, elements);
    if (options.data) {
        options.extraData = options.data;
        qx = $.param(options.data, traditional);
    }

    // give pre-submit callback an opportunity to abort the submit
    if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) {
        log('ajaxSubmit: submit aborted via beforeSubmit callback');
        return this;
    }

    // fire vetoable 'validate' event
    this.trigger('form-submit-validate', [a, this, options, veto]);
    if (veto.veto) {
        log('ajaxSubmit: submit vetoed via form-submit-validate trigger');
        return this;
    }

    var q = $.param(a, traditional);
    if (qx) {
        q = ( q ? (q + '&' + qx) : qx );
    }
    if (options.type.toUpperCase() == 'GET') {
        options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q;
        options.data = null;  // data is null for 'get'
    }
    else {
        options.data = q; // data is the query string for 'post'
    }

    var callbacks = [];
    if (options.resetForm) {
        callbacks.push(function() { $form.resetForm(); });
    }
    if (options.clearForm) {
        callbacks.push(function() { $form.clearForm(options.includeHidden); });
    }

    // perform a load on the target only if dataType is not provided
    if (!options.dataType && options.target) {
        var oldSuccess = options.success || function(){};
        callbacks.push(function(data) {
            var fn = options.replaceTarget ? 'replaceWith' : 'html';
            $(options.target)[fn](data).each(oldSuccess, arguments);
        });
    }
    else if (options.success) {
        callbacks.push(options.success);
    }

    options.success = function(data, status, xhr) { // jQuery 1.4+ passes xhr as 3rd arg
        var context = options.context || this ;    // jQuery 1.4+ supports scope context
        for (var i=0, max=callbacks.length; i < max; i++) {
            callbacks[i].apply(context, [data, status, xhr || $form, $form]);
        }
    };

    if (options.error) {
        var oldError = options.error;
        options.error = function(xhr, status, error) {
            var context = options.context || this;
            oldError.apply(context, [xhr, status, error, $form]);
        };
    }

     if (options.complete) {
        var oldComplete = options.complete;
        options.complete = function(xhr, status) {
            var context = options.context || this;
            oldComplete.apply(context, [xhr, status, $form]);
        };
    }

    // are there files to upload?

    // [value] (issue #113), also see comment:
    // https://github.com/malsup/form/commit/588306aedba1de01388032d5f42a60159eea9228#commitcomment-2180219
    var fileInputs = $('input[type=file]:enabled[value!=""]', this);

    var hasFileInputs = fileInputs.length > 0;
    var mp = 'multipart/form-data';
    var multipart = ($form.attr('enctype') == mp || $form.attr('encoding') == mp);

    var fileAPI = feature.fileapi && feature.formdata;
    log("fileAPI :" + fileAPI);
    var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI;

    var jqxhr;

    // options.iframe allows user to force iframe mode
    // 06-NOV-09: now defaulting to iframe mode if file input is detected
    if (options.iframe !== false && (options.iframe || shouldUseFrame)) {
        // hack to fix Safari hang (thanks to Tim Molendijk for this)
        // see:  http://groups.google.com/group/jquery-dev/browse_thread/thread/36395b7ab510dd5d
        if (options.closeKeepAlive) {
            $.get(options.closeKeepAlive, function() {
                jqxhr = fileUploadIframe(a);
            });
        }
        else {
            jqxhr = fileUploadIframe(a);
        }
    }
    else if ((hasFileInputs || multipart) && fileAPI) {
        jqxhr = fileUploadXhr(a);
    }
    else {
        jqxhr = $.ajax(options);
    }

    $form.removeData('jqxhr').data('jqxhr', jqxhr);

    // clear element array
    for (var k=0; k < elements.length; k++)
        elements[k] = null;

    // fire 'notify' event
    this.trigger('form-submit-notify', [this, options]);
    return this;

    // utility fn for deep serialization
    function deepSerialize(extraData){
        var serialized = $.param(extraData, options.traditional).split('&');
        var len = serialized.length;
        var result = [];
        var i, part;
        for (i=0; i < len; i++) {
            // #252; undo param space replacement
            serialized[i] = serialized[i].replace(/\+/g,' ');
            part = serialized[i].split('=');
            // #278; use array instead of object storage, favoring array serializations
            result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]);
        }
        return result;
    }

     // XMLHttpRequest Level 2 file uploads (big hat tip to francois2metz)
    function fileUploadXhr(a) {
        var formdata = new FormData();

        for (var i=0; i < a.length; i++) {
            formdata.append(a[i].name, a[i].value);
        }

        if (options.extraData) {
            var serializedData = deepSerialize(options.extraData);
            for (i=0; i < serializedData.length; i++)
                if (serializedData[i])
                    formdata.append(serializedData[i][0], serializedData[i][1]);
        }

        options.data = null;

        var s = $.extend(true, {}, $.ajaxSettings, options, {
            contentType: false,
            processData: false,
            cache: false,
            type: method || 'POST'
        });

        if (options.uploadProgress) {
            // workaround because jqXHR does not expose upload property
            s.xhr = function() {
                var xhr = $.ajaxSettings.xhr();
                if (xhr.upload) {
                    xhr.upload.addEventListener('progress', function(event) {
                        var percent = 0;
                        var position = event.loaded || event.position; /*event.position is deprecated*/
                        var total = event.total;
                        if (event.lengthComputable) {
                            percent = Math.ceil(position / total * 100);
                        }
                        options.uploadProgress(event, position, total, percent);
                    }, false);
                }
                return xhr;
            };
        }

        s.data = null;
            var beforeSend = s.beforeSend;
            s.beforeSend = function(xhr, o) {
                o.data = formdata;
                if(beforeSend)
                    beforeSend.call(this, xhr, o);
        };
        return $.ajax(s);
    }

    // private function for handling file uploads (hat tip to YAHOO!)
    function fileUploadIframe(a) {
        var form = $form[0], el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle;
        var deferred = $.Deferred();

        if (a) {
            // ensure that every serialized input is still enabled
            for (i=0; i < elements.length; i++) {
                el = $(elements[i]);
                if ( hasProp )
                    el.prop('disabled', false);
                else
                    el.removeAttr('disabled');
            }
        }

        s = $.extend(true, {}, $.ajaxSettings, options);
        s.context = s.context || s;
        id = 'jqFormIO' + (new Date().getTime());
        if (s.iframeTarget) {
            $io = $(s.iframeTarget);
            n = $io.attr2('name');
            if (!n)
                 $io.attr2('name', id);
            else
                id = n;
        }
        else {
            $io = $('<iframe name="' + id + '" src="'+ s.iframeSrc +'" />');
            $io.css({ position: 'absolute', top: '-1000px', left: '-1000px' });
        }
        io = $io[0];


        xhr = { // mock object
            aborted: 0,
            responseText: null,
            responseXML: null,
            status: 0,
            statusText: 'n/a',
            getAllResponseHeaders: function() {},
            getResponseHeader: function() {},
            setRequestHeader: function() {},
            abort: function(status) {
                var e = (status === 'timeout' ? 'timeout' : 'aborted');
                log('aborting upload... ' + e);
                this.aborted = 1;

                try { // #214, #257
                    if (io.contentWindow.document.execCommand) {
                        io.contentWindow.document.execCommand('Stop');
                    }
                }
                catch(ignore) {}

                $io.attr('src', s.iframeSrc); // abort op in progress
                xhr.error = e;
                if (s.error)
                    s.error.call(s.context, xhr, e, status);
                if (g)
                    $.event.trigger("ajaxError", [xhr, s, e]);
                if (s.complete)
                    s.complete.call(s.context, xhr, e);
            }
        };

        g = s.global;
        // trigger ajax global events so that activity/block indicators work like normal
        if (g && 0 === $.active++) {
            $.event.trigger("ajaxStart");
        }
        if (g) {
            $.event.trigger("ajaxSend", [xhr, s]);
        }

        if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) {
            if (s.global) {
                $.active--;
            }
            deferred.reject();
            return deferred;
        }
        if (xhr.aborted) {
            deferred.reject();
            return deferred;
        }

        // add submitting element to data if we know it
        sub = form.clk;
        if (sub) {
            n = sub.name;
            if (n && !sub.disabled) {
                s.extraData = s.extraData || {};
                s.extraData[n] = sub.value;
                if (sub.type == "image") {
                    s.extraData[n+'.x'] = form.clk_x;
                    s.extraData[n+'.y'] = form.clk_y;
                }
            }
        }

        var CLIENT_TIMEOUT_ABORT = 1;
        var SERVER_ABORT = 2;
                
        function getDoc(frame) {
            /* it looks like contentWindow or contentDocument do not
             * carry the protocol property in ie8, when running under ssl
             * frame.document is the only valid response document, since
             * the protocol is know but not on the other two objects. strange?
             * "Same origin policy" http://en.wikipedia.org/wiki/Same_origin_policy
             */
            
            var doc = null;
            
            // IE8 cascading access check
            try {
                if (frame.contentWindow) {
                    doc = frame.contentWindow.document;
                }
            } catch(err) {
                // IE8 access denied under ssl & missing protocol
                log('cannot get iframe.contentWindow document: ' + err);
            }

            if (doc) { // successful getting content
                return doc;
            }

            try { // simply checking may throw in ie8 under ssl or mismatched protocol
                doc = frame.contentDocument ? frame.contentDocument : frame.document;
            } catch(err) {
                // last attempt
                log('cannot get iframe.contentDocument: ' + err);
                doc = frame.document;
            }
            return doc;
        }

        // Rails CSRF hack (thanks to Yvan Barthelemy)
        var csrf_token = $('meta[name=csrf-token]').attr('content');
        var csrf_param = $('meta[name=csrf-param]').attr('content');
        if (csrf_param && csrf_token) {
            s.extraData = s.extraData || {};
            s.extraData[csrf_param] = csrf_token;
        }

        // take a breath so that pending repaints get some cpu time before the upload starts
        function doSubmit() {
            // make sure form attrs are set
            var t = $form.attr2('target'), a = $form.attr2('action');

            // update form attrs in IE friendly way
            form.setAttribute('target',id);
            if (!method) {
                form.setAttribute('method', 'POST');
            }
            if (a != s.url) {
                form.setAttribute('action', s.url);
            }

            // ie borks in some cases when setting encoding
            if (! s.skipEncodingOverride && (!method || /post/i.test(method))) {
                $form.attr({
                    encoding: 'multipart/form-data',
                    enctype:  'multipart/form-data'
                });
            }

            // support timout
            if (s.timeout) {
                timeoutHandle = setTimeout(function() { timedOut = true; cb(CLIENT_TIMEOUT_ABORT); }, s.timeout);
            }

            // look for server aborts
            function checkState() {
                try {
                    var state = getDoc(io).readyState;
                    log('state = ' + state);
                    if (state && state.toLowerCase() == 'uninitialized')
                        setTimeout(checkState,50);
                }
                catch(e) {
                    log('Server abort: ' , e, ' (', e.name, ')');
                    cb(SERVER_ABORT);
                    if (timeoutHandle)
                        clearTimeout(timeoutHandle);
                    timeoutHandle = undefined;
                }
            }

            // add "extra" data to form if provided in options
            var extraInputs = [];
            try {
                if (s.extraData) {
                    for (var n in s.extraData) {
                        if (s.extraData.hasOwnProperty(n)) {
                           // if using the $.param format that allows for multiple values with the same name
                           if($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty('name') && s.extraData[n].hasOwnProperty('value')) {
                               extraInputs.push(
                               $('<input type="hidden" name="'+s.extraData[n].name+'">').val(s.extraData[n].value)
                                   .appendTo(form)[0]);
                           } else {
                               extraInputs.push(
                               $('<input type="hidden" name="'+n+'">').val(s.extraData[n])
                                   .appendTo(form)[0]);
                           }
                        }
                    }
                }

                if (!s.iframeTarget) {
                    // add iframe to doc and submit the form
                    $io.appendTo('body');
                    if (io.attachEvent)
                        io.attachEvent('onload', cb);
                    else
                        io.addEventListener('load', cb, false);
                }
                setTimeout(checkState,15);

                try {
                    form.submit();
                } catch(err) {
                    // just in case form has element with name/id of 'submit'
                    var submitFn = document.createElement('form').submit;
                    submitFn.apply(form);
                }
            }
            finally {
                // reset attrs and remove "extra" input elements
                form.setAttribute('action',a);
                if(t) {
                    form.setAttribute('target', t);
                } else {
                    $form.removeAttr('target');
                }
                $(extraInputs).remove();
            }
        }

        if (s.forceSync) {
            doSubmit();
        }
        else {
            setTimeout(doSubmit, 10); // this lets dom updates render
        }

        var data, doc, domCheckCount = 50, callbackProcessed;

        function cb(e) {
            if (xhr.aborted || callbackProcessed) {
                return;
            }
            
            doc = getDoc(io);
            if(!doc) {
                log('cannot access response document');
                e = SERVER_ABORT;
            }
            if (e === CLIENT_TIMEOUT_ABORT && xhr) {
                xhr.abort('timeout');
                deferred.reject(xhr, 'timeout');
                return;
            }
            else if (e == SERVER_ABORT && xhr) {
                xhr.abort('server abort');
                deferred.reject(xhr, 'error', 'server abort');
                return;
            }

            if (!doc || doc.location.href == s.iframeSrc) {
                // response not received yet
                if (!timedOut)
                    return;
            }
            if (io.detachEvent)
                io.detachEvent('onload', cb);
            else
                io.removeEventListener('load', cb, false);

            var status = 'success', errMsg;
            try {
                if (timedOut) {
                    throw 'timeout';
                }

                var isXml = s.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc);
                log('isXml='+isXml);
                if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) {
                    if (--domCheckCount) {
                        // in some browsers (Opera) the iframe DOM is not always traversable when
                        // the onload callback fires, so we loop a bit to accommodate
                        log('requeing onLoad callback, DOM not available');
                        setTimeout(cb, 250);
                        return;
                    }
                    // let this fall through because server response could be an empty document
                    //log('Could not access iframe DOM after mutiple tries.');
                    //throw 'DOMException: not available';
                }

                //log('response detected');
                var docRoot = doc.body ? doc.body : doc.documentElement;
                xhr.responseText = docRoot ? docRoot.innerHTML : null;
                xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc;
                if (isXml)
                    s.dataType = 'xml';
                xhr.getResponseHeader = function(header){
                    var headers = {'content-type': s.dataType};
                    return headers[header];
                };
                // support for XHR 'status' & 'statusText' emulation :
                if (docRoot) {
                    xhr.status = Number( docRoot.getAttribute('status') ) || xhr.status;
                    xhr.statusText = docRoot.getAttribute('statusText') || xhr.statusText;
                }

                var dt = (s.dataType || '').toLowerCase();
                var scr = /(json|script|text)/.test(dt);
                if (scr || s.textarea) {
                    // see if user embedded response in textarea
                    var ta = doc.getElementsByTagName('textarea')[0];
                    if (ta) {
                        xhr.responseText = ta.value;
                        // support for XHR 'status' & 'statusText' emulation :
                        xhr.status = Number( ta.getAttribute('status') ) || xhr.status;
                        xhr.statusText = ta.getAttribute('statusText') || xhr.statusText;
                    }
                    else if (scr) {
                        // account for browsers injecting pre around json response
                        var pre = doc.getElementsByTagName('pre')[0];
                        var b = doc.getElementsByTagName('body')[0];
                        if (pre) {
                            xhr.responseText = pre.textContent ? pre.textContent : pre.innerText;
                        }
                        else if (b) {
                            xhr.responseText = b.textContent ? b.textContent : b.innerText;
                        }
                    }
                }
                else if (dt == 'xml' && !xhr.responseXML && xhr.responseText) {
                    xhr.responseXML = toXml(xhr.responseText);
                }

                try {
                    data = httpData(xhr, dt, s);
                }
                catch (err) {
                    status = 'parsererror';
                    xhr.error = errMsg = (err || status);
                }
            }
            catch (err) {
                log('error caught: ',err);
                status = 'error';
                xhr.error = errMsg = (err || status);
            }

            if (xhr.aborted) {
                log('upload aborted');
                status = null;
            }

            if (xhr.status) { // we've set xhr.status
                status = (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) ? 'success' : 'error';
            }

            // ordering of these callbacks/triggers is odd, but that's how $.ajax does it
            if (status === 'success') {
                if (s.success)
                    s.success.call(s.context, data, 'success', xhr);
                deferred.resolve(xhr.responseText, 'success', xhr);
                if (g)
                    $.event.trigger("ajaxSuccess", [xhr, s]);
            }
            else if (status) {
                if (errMsg === undefined)
                    errMsg = xhr.statusText;
                if (s.error)
                    s.error.call(s.context, xhr, status, errMsg);
                deferred.reject(xhr, 'error', errMsg);
                if (g)
                    $.event.trigger("ajaxError", [xhr, s, errMsg]);
            }

            if (g)
                $.event.trigger("ajaxComplete", [xhr, s]);

            if (g && ! --$.active) {
                $.event.trigger("ajaxStop");
            }

            if (s.complete)
                s.complete.call(s.context, xhr, status);

            callbackProcessed = true;
            if (s.timeout)
                clearTimeout(timeoutHandle);

            // clean up
            setTimeout(function() {
                if (!s.iframeTarget)
                    $io.remove();
                xhr.responseXML = null;
            }, 100);
        }

        var toXml = $.parseXML || function(s, doc) { // use parseXML if available (jQuery 1.5+)
            if (window.ActiveXObject) {
                doc = new ActiveXObject('Microsoft.XMLDOM');
                doc.async = 'false';
                doc.loadXML(s);
            }
            else {
                doc = (new DOMParser()).parseFromString(s, 'text/xml');
            }
            return (doc && doc.documentElement && doc.documentElement.nodeName != 'parsererror') ? doc : null;
        };
        var parseJSON = $.parseJSON || function(s) {
            /*jslint evil:true */
            return window['eval']('(' + s + ')');
        };

        var httpData = function( xhr, type, s ) { // mostly lifted from jq1.4.4

            var ct = xhr.getResponseHeader('content-type') || '',
                xml = type === 'xml' || !type && ct.indexOf('xml') >= 0,
                data = xml ? xhr.responseXML : xhr.responseText;

            if (xml && data.documentElement.nodeName === 'parsererror') {
                if ($.error)
                    $.error('parsererror');
            }
            if (s && s.dataFilter) {
                data = s.dataFilter(data, type);
            }
            if (typeof data === 'string') {
                if (type === 'json' || !type && ct.indexOf('json') >= 0) {
                    data = parseJSON(data);
                } else if (type === "script" || !type && ct.indexOf("javascript") >= 0) {
                    $.globalEval(data);
                }
            }
            return data;
        };

        return deferred;
    }
};

/**
 * ajaxForm() provides a mechanism for fully automating form submission.
 *
 * The advantages of using this method instead of ajaxSubmit() are:
 *
 * 1: This method will include coordinates for <input type="image" /> elements (if the element
 *    is used to submit the form).
 * 2. This method will include the submit element's name/value data (for the element that was
 *    used to submit the form).
 * 3. This method binds the submit() method to the form for you.
 *
 * The options argument for ajaxForm works exactly as it does for ajaxSubmit.  ajaxForm merely
 * passes the options argument along after properly binding events for submit elements and
 * the form itself.
 */
$.fn.ajaxForm = function(options) {
    options = options || {};
    options.delegation = options.delegation && $.isFunction($.fn.on);

    // in jQuery 1.3+ we can fix mistakes with the ready state
    if (!options.delegation && this.length === 0) {
        var o = { s: this.selector, c: this.context };
        if (!$.isReady && o.s) {
            log('DOM not ready, queuing ajaxForm');
            $(function() {
                $(o.s,o.c).ajaxForm(options);
            });
            return this;
        }
        // is your DOM ready?  http://docs.jquery.com/Tutorials:Introducing_$(document).ready()
        log('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)'));
        return this;
    }

    if ( options.delegation ) {
        $(document)
            .off('submit.form-plugin', this.selector, doAjaxSubmit)
            .off('click.form-plugin', this.selector, captureSubmittingElement)
            .on('submit.form-plugin', this.selector, options, doAjaxSubmit)
            .on('click.form-plugin', this.selector, options, captureSubmittingElement);
        return this;
    }

    return this.ajaxFormUnbind()
        .bind('submit.form-plugin', options, doAjaxSubmit)
        .bind('click.form-plugin', options, captureSubmittingElement);
};

// private event handlers
function doAjaxSubmit(e) {
    /*jshint validthis:true */
    var options = e.data;
    if (!e.isDefaultPrevented()) { // if event has been canceled, don't proceed
        e.preventDefault();
        $(this).ajaxSubmit(options);
    }
}

function captureSubmittingElement(e) {
    /*jshint validthis:true */
    var target = e.target;
    var $el = $(target);
    if (!($el.is("[type=submit],[type=image]"))) {
        // is this a child element of the submit el?  (ex: a span within a button)
        var t = $el.closest('[type=submit]');
        if (t.length === 0) {
            return;
        }
        target = t[0];
    }
    var form = this;
    form.clk = target;
    if (target.type == 'image') {
        if (e.offsetX !== undefined) {
            form.clk_x = e.offsetX;
            form.clk_y = e.offsetY;
        } else if (typeof $.fn.offset == 'function') {
            var offset = $el.offset();
            form.clk_x = e.pageX - offset.left;
            form.clk_y = e.pageY - offset.top;
        } else {
            form.clk_x = e.pageX - target.offsetLeft;
            form.clk_y = e.pageY - target.offsetTop;
        }
    }
    // clear form vars
    setTimeout(function() { form.clk = form.clk_x = form.clk_y = null; }, 100);
}


// ajaxFormUnbind unbinds the event handlers that were bound by ajaxForm
$.fn.ajaxFormUnbind = function() {
    return this.unbind('submit.form-plugin click.form-plugin');
};

/**
 * formToArray() gathers form element data into an array of objects that can
 * be passed to any of the following ajax functions: $.get, $.post, or load.
 * Each object in the array has both a 'name' and 'value' property.  An example of
 * an array for a simple login form might be:
 *
 * [ { name: 'username', value: 'jresig' }, { name: 'password', value: 'secret' } ]
 *
 * It is this array that is passed to pre-submit callback functions provided to the
 * ajaxSubmit() and ajaxForm() methods.
 */
$.fn.formToArray = function(semantic, elements) {
    var a = [];
    if (this.length === 0) {
        return a;
    }

    var form = this[0];
    var els = semantic ? form.getElementsByTagName('*') : form.elements;
    if (!els) {
        return a;
    }

    var i,j,n,v,el,max,jmax;
    for(i=0, max=els.length; i < max; i++) {
        el = els[i];
        n = el.name;
        if (!n || el.disabled) {
            continue;
        }

        if (semantic && form.clk && el.type == "image") {
            // handle image inputs on the fly when semantic == true
            if(form.clk == el) {
                a.push({name: n, value: $(el).val(), type: el.type });
                a.push({name: n+'.x', value: form.clk_x}, {name: n+'.y', value: form.clk_y});
            }
            continue;
        }

        v = $.fieldValue(el, true);
        if (v && v.constructor == Array) {
            if (elements)
                elements.push(el);
            for(j=0, jmax=v.length; j < jmax; j++) {
                a.push({name: n, value: v[j]});
            }
        }
        else if (feature.fileapi && el.type == 'file') {
            if (elements)
                elements.push(el);
            var files = el.files;
            if (files.length) {
                for (j=0; j < files.length; j++) {
                    a.push({name: n, value: files[j], type: el.type});
                }
            }
            else {
                // #180
                a.push({ name: n, value: '', type: el.type });
            }
        }
        else if (v !== null && typeof v != 'undefined') {
            if (elements)
                elements.push(el);
            a.push({name: n, value: v, type: el.type, required: el.required});
        }
    }

    if (!semantic && form.clk) {
        // input type=='image' are not found in elements array! handle it here
        var $input = $(form.clk), input = $input[0];
        n = input.name;
        if (n && !input.disabled && input.type == 'image') {
            a.push({name: n, value: $input.val()});
            a.push({name: n+'.x', value: form.clk_x}, {name: n+'.y', value: form.clk_y});
        }
    }
    return a;
};

/**
 * Serializes form data into a 'submittable' string. This method will return a string
 * in the format: name1=value1&amp;name2=value2
 */
$.fn.formSerialize = function(semantic) {
    //hand off to jQuery.param for proper encoding
    return $.param(this.formToArray(semantic));
};

/**
 * Serializes all field elements in the jQuery object into a query string.
 * This method will return a string in the format: name1=value1&amp;name2=value2
 */
$.fn.fieldSerialize = function(successful) {
    var a = [];
    this.each(function() {
        var n = this.name;
        if (!n) {
            return;
        }
        var v = $.fieldValue(this, successful);
        if (v && v.constructor == Array) {
            for (var i=0,max=v.length; i < max; i++) {
                a.push({name: n, value: v[i]});
            }
        }
        else if (v !== null && typeof v != 'undefined') {
            a.push({name: this.name, value: v});
        }
    });
    //hand off to jQuery.param for proper encoding
    return $.param(a);
};

/**
 * Returns the value(s) of the element in the matched set.  For example, consider the following form:
 *
 *  <form><fieldset>
 *      <input name="A" type="text" />
 *      <input name="A" type="text" />
 *      <input name="B" type="checkbox" value="B1" />
 *      <input name="B" type="checkbox" value="B2"/>
 *      <input name="C" type="radio" value="C1" />
 *      <input name="C" type="radio" value="C2" />
 *  </fieldset></form>
 *
 *  var v = $('input[type=text]').fieldValue();
 *  // if no values are entered into the text inputs
 *  v == ['','']
 *  // if values entered into the text inputs are 'foo' and 'bar'
 *  v == ['foo','bar']
 *
 *  var v = $('input[type=checkbox]').fieldValue();
 *  // if neither checkbox is checked
 *  v === undefined
 *  // if both checkboxes are checked
 *  v == ['B1', 'B2']
 *
 *  var v = $('input[type=radio]').fieldValue();
 *  // if neither radio is checked
 *  v === undefined
 *  // if first radio is checked
 *  v == ['C1']
 *
 * The successful argument controls whether or not the field element must be 'successful'
 * (per http://www.w3.org/TR/html4/interact/forms.html#successful-controls).
 * The default value of the successful argument is true.  If this value is false the value(s)
 * for each element is returned.
 *
 * Note: This method *always* returns an array.  If no valid value can be determined the
 *    array will be empty, otherwise it will contain one or more values.
 */
$.fn.fieldValue = function(successful) {
    for (var val=[], i=0, max=this.length; i < max; i++) {
        var el = this[i];
        var v = $.fieldValue(el, successful);
        if (v === null || typeof v == 'undefined' || (v.constructor == Array && !v.length)) {
            continue;
        }
        if (v.constructor == Array)
            $.merge(val, v);
        else
            val.push(v);
    }
    return val;
};

/**
 * Returns the value of the field element.
 */
$.fieldValue = function(el, successful) {
    var n = el.name, t = el.type, tag = el.tagName.toLowerCase();
    if (successful === undefined) {
        successful = true;
    }

    if (successful && (!n || el.disabled || t == 'reset' || t == 'button' ||
        (t == 'checkbox' || t == 'radio') && !el.checked ||
        (t == 'submit' || t == 'image') && el.form && el.form.clk != el ||
        tag == 'select' && el.selectedIndex == -1)) {
            return null;
    }

    if (tag == 'select') {
        var index = el.selectedIndex;
        if (index < 0) {
            return null;
        }
        var a = [], ops = el.options;
        var one = (t == 'select-one');
        var max = (one ? index+1 : ops.length);
        for(var i=(one ? index : 0); i < max; i++) {
            var op = ops[i];
            if (op.selected) {
                var v = op.value;
                if (!v) { // extra pain for IE...
                    v = (op.attributes && op.attributes['value'] && !(op.attributes['value'].specified)) ? op.text : op.value;
                }
                if (one) {
                    return v;
                }
                a.push(v);
            }
        }
        return a;
    }
    return $(el).val();
};

/**
 * Clears the form data.  Takes the following actions on the form's input fields:
 *  - input text fields will have their 'value' property set to the empty string
 *  - select elements will have their 'selectedIndex' property set to -1
 *  - checkbox and radio inputs will have their 'checked' property set to false
 *  - inputs of type submit, button, reset, and hidden will *not* be effected
 *  - button elements will *not* be effected
 */
$.fn.clearForm = function(includeHidden) {
    return this.each(function() {
        $('input,select,textarea', this).clearFields(includeHidden);
    });
};

/**
 * Clears the selected form elements.
 */
$.fn.clearFields = $.fn.clearInputs = function(includeHidden) {
    var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; // 'hidden' is not in this list
    return this.each(function() {
        var t = this.type, tag = this.tagName.toLowerCase();
        if (re.test(t) || tag == 'textarea') {
            this.value = '';
        }
        else if (t == 'checkbox' || t == 'radio') {
            this.checked = false;
        }
        else if (tag == 'select') {
            this.selectedIndex = -1;
        }
		else if (t == "file") {
			if (/MSIE/.test(navigator.userAgent)) {
				$(this).replaceWith($(this).clone(true));
			} else {
				$(this).val('');
			}
		}
        else if (includeHidden) {
            // includeHidden can be the value true, or it can be a selector string
            // indicating a special test; for example:
            //  $('#myForm').clearForm('.special:hidden')
            // the above would clean hidden inputs that have the class of 'special'
            if ( (includeHidden === true && /hidden/.test(t)) ||
                 (typeof includeHidden == 'string' && $(this).is(includeHidden)) )
                this.value = '';
        }
    });
};

/**
 * Resets the form data.  Causes all form elements to be reset to their original value.
 */
$.fn.resetForm = function() {
    return this.each(function() {
        // guard against an input with the name of 'reset'
        // note that IE reports the reset function as an 'object'
        if (typeof this.reset == 'function' || (typeof this.reset == 'object' && !this.reset.nodeType)) {
            this.reset();
        }
    });
};

/**
 * Enables or disables any matching elements.
 */
$.fn.enable = function(b) {
    if (b === undefined) {
        b = true;
    }
    return this.each(function() {
        this.disabled = !b;
    });
};

/**
 * Checks/unchecks any matching checkboxes or radio buttons and
 * selects/deselects and matching option elements.
 */
$.fn.selected = function(select) {
    if (select === undefined) {
        select = true;
    }
    return this.each(function() {
        var t = this.type;
        if (t == 'checkbox' || t == 'radio') {
            this.checked = select;
        }
        else if (this.tagName.toLowerCase() == 'option') {
            var $sel = $(this).parent('select');
            if (select && $sel[0] && $sel[0].type == 'select-one') {
                // deselect all other options
                $sel.find('option').selected(false);
            }
            this.selected = select;
        }
    });
};

// expose debug var
$.fn.ajaxSubmit.debug = false;

// helper fn for console logging
function log() {
    if (!$.fn.ajaxSubmit.debug)
        return;
    var msg = '[jquery.form] ' + Array.prototype.join.call(arguments,'');
    if (window.console && window.console.log) {
        window.console.log(msg);
    }
    else if (window.opera && window.opera.postError) {
        window.opera.postError(msg);
    }
}

})($ || jQuery);
;/*! jQuery UI - v1.10.3 - 2013-10-23
* http://jqueryui.com
* Includes: jquery.ui.core.js, jquery.ui.widget.js, jquery.ui.mouse.js, jquery.ui.draggable.js, jquery.ui.resizable.js, jquery.ui.sortable.js, jquery.ui.button.js, jquery.ui.spinner.js
* Copyright 2013 jQuery Foundation and other contributors; Licensed MIT */

(function( $, undefined ) {

var uuid = 0,
	runiqueId = /^ui-id-\d+$/;

// $.ui might exist from components with no dependencies, e.g., $.ui.position
$.ui = $.ui || {};

$.extend( $.ui, {
	version: "1.10.3",

	keyCode: {
		BACKSPACE: 8,
		COMMA: 188,
		DELETE: 46,
		DOWN: 40,
		END: 35,
		ENTER: 13,
		ESCAPE: 27,
		HOME: 36,
		LEFT: 37,
		NUMPAD_ADD: 107,
		NUMPAD_DECIMAL: 110,
		NUMPAD_DIVIDE: 111,
		NUMPAD_ENTER: 108,
		NUMPAD_MULTIPLY: 106,
		NUMPAD_SUBTRACT: 109,
		PAGE_DOWN: 34,
		PAGE_UP: 33,
		PERIOD: 190,
		RIGHT: 39,
		SPACE: 32,
		TAB: 9,
		UP: 38
	}
});

// plugins
$.fn.extend({
	focus: (function( orig ) {
		return function( delay, fn ) {
			return typeof delay === "number" ?
				this.each(function() {
					var elem = this;
					setTimeout(function() {
						$( elem ).focus();
						if ( fn ) {
							fn.call( elem );
						}
					}, delay );
				}) :
				orig.apply( this, arguments );
		};
	})( $.fn.focus ),

	scrollParent: function() {
		var scrollParent;
		if (($.ui.ie && (/(static|relative)/).test(this.css("position"))) || (/absolute/).test(this.css("position"))) {
			scrollParent = this.parents().filter(function() {
				return (/(relative|absolute|fixed)/).test($.css(this,"position")) && (/(auto|scroll)/).test($.css(this,"overflow")+$.css(this,"overflow-y")+$.css(this,"overflow-x"));
			}).eq(0);
		} else {
			scrollParent = this.parents().filter(function() {
				return (/(auto|scroll)/).test($.css(this,"overflow")+$.css(this,"overflow-y")+$.css(this,"overflow-x"));
			}).eq(0);
		}

		return (/fixed/).test(this.css("position")) || !scrollParent.length ? $(document) : scrollParent;
	},

	zIndex: function( zIndex ) {
		if ( zIndex !== undefined ) {
			return this.css( "zIndex", zIndex );
		}

		if ( this.length ) {
			var elem = $( this[ 0 ] ), position, value;
			while ( elem.length && elem[ 0 ] !== document ) {
				// Ignore z-index if position is set to a value where z-index is ignored by the browser
				// This makes behavior of this function consistent across browsers
				// WebKit always returns auto if the element is positioned
				position = elem.css( "position" );
				if ( position === "absolute" || position === "relative" || position === "fixed" ) {
					// IE returns 0 when zIndex is not specified
					// other browsers return a string
					// we ignore the case of nested elements with an explicit value of 0
					// <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
					value = parseInt( elem.css( "zIndex" ), 10 );
					if ( !isNaN( value ) && value !== 0 ) {
						return value;
					}
				}
				elem = elem.parent();
			}
		}

		return 0;
	},

	uniqueId: function() {
		return this.each(function() {
			if ( !this.id ) {
				this.id = "ui-id-" + (++uuid);
			}
		});
	},

	removeUniqueId: function() {
		return this.each(function() {
			if ( runiqueId.test( this.id ) ) {
				$( this ).removeAttr( "id" );
			}
		});
	}
});

// selectors
function focusable( element, isTabIndexNotNaN ) {
	var map, mapName, img,
		nodeName = element.nodeName.toLowerCase();
	if ( "area" === nodeName ) {
		map = element.parentNode;
		mapName = map.name;
		if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
			return false;
		}
		img = $( "img[usemap=#" + mapName + "]" )[0];
		return !!img && visible( img );
	}
	return ( /input|select|textarea|button|object/.test( nodeName ) ?
		!element.disabled :
		"a" === nodeName ?
			element.href || isTabIndexNotNaN :
			isTabIndexNotNaN) &&
		// the element and all of its ancestors must be visible
		visible( element );
}

function visible( element ) {
	return $.expr.filters.visible( element ) &&
		!$( element ).parents().addBack().filter(function() {
			return $.css( this, "visibility" ) === "hidden";
		}).length;
}

$.extend( $.expr[ ":" ], {
	data: $.expr.createPseudo ?
		$.expr.createPseudo(function( dataName ) {
			return function( elem ) {
				return !!$.data( elem, dataName );
			};
		}) :
		// support: jQuery <1.8
		function( elem, i, match ) {
			return !!$.data( elem, match[ 3 ] );
		},

	focusable: function( element ) {
		return focusable( element, !isNaN( $.attr( element, "tabindex" ) ) );
	},

	tabbable: function( element ) {
		var tabIndex = $.attr( element, "tabindex" ),
			isTabIndexNaN = isNaN( tabIndex );
		return ( isTabIndexNaN || tabIndex >= 0 ) && focusable( element, !isTabIndexNaN );
	}
});

// support: jQuery <1.8
if ( !$( "<a>" ).outerWidth( 1 ).jquery ) {
	$.each( [ "Width", "Height" ], function( i, name ) {
		var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],
			type = name.toLowerCase(),
			orig = {
				innerWidth: $.fn.innerWidth,
				innerHeight: $.fn.innerHeight,
				outerWidth: $.fn.outerWidth,
				outerHeight: $.fn.outerHeight
			};

		function reduce( elem, size, border, margin ) {
			$.each( side, function() {
				size -= parseFloat( $.css( elem, "padding" + this ) ) || 0;
				if ( border ) {
					size -= parseFloat( $.css( elem, "border" + this + "Width" ) ) || 0;
				}
				if ( margin ) {
					size -= parseFloat( $.css( elem, "margin" + this ) ) || 0;
				}
			});
			return size;
		}

		$.fn[ "inner" + name ] = function( size ) {
			if ( size === undefined ) {
				return orig[ "inner" + name ].call( this );
			}

			return this.each(function() {
				$( this ).css( type, reduce( this, size ) + "px" );
			});
		};

		$.fn[ "outer" + name] = function( size, margin ) {
			if ( typeof size !== "number" ) {
				return orig[ "outer" + name ].call( this, size );
			}

			return this.each(function() {
				$( this).css( type, reduce( this, size, true, margin ) + "px" );
			});
		};
	});
}

// support: jQuery <1.8
if ( !$.fn.addBack ) {
	$.fn.addBack = function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	};
}

// support: jQuery 1.6.1, 1.6.2 (http://bugs.jquery.com/ticket/9413)
if ( $( "<a>" ).data( "a-b", "a" ).removeData( "a-b" ).data( "a-b" ) ) {
	$.fn.removeData = (function( removeData ) {
		return function( key ) {
			if ( arguments.length ) {
				return removeData.call( this, $.camelCase( key ) );
			} else {
				return removeData.call( this );
			}
		};
	})( $.fn.removeData );
}





// deprecated
$.ui.ie = !!/msie [\w.]+/.exec( navigator.userAgent.toLowerCase() );

$.support.selectstart = "onselectstart" in document.createElement( "div" );
$.fn.extend({
	disableSelection: function() {
		return this.bind( ( $.support.selectstart ? "selectstart" : "mousedown" ) +
			".ui-disableSelection", function( event ) {
				event.preventDefault();
			});
	},

	enableSelection: function() {
		return this.unbind( ".ui-disableSelection" );
	}
});

$.extend( $.ui, {
	// $.ui.plugin is deprecated. Use $.widget() extensions instead.
	plugin: {
		add: function( module, option, set ) {
			var i,
				proto = $.ui[ module ].prototype;
			for ( i in set ) {
				proto.plugins[ i ] = proto.plugins[ i ] || [];
				proto.plugins[ i ].push( [ option, set[ i ] ] );
			}
		},
		call: function( instance, name, args ) {
			var i,
				set = instance.plugins[ name ];
			if ( !set || !instance.element[ 0 ].parentNode || instance.element[ 0 ].parentNode.nodeType === 11 ) {
				return;
			}

			for ( i = 0; i < set.length; i++ ) {
				if ( instance.options[ set[ i ][ 0 ] ] ) {
					set[ i ][ 1 ].apply( instance.element, args );
				}
			}
		}
	},

	// only used by resizable
	hasScroll: function( el, a ) {

		//If overflow is hidden, the element might have extra content, but the user wants to hide it
		if ( $( el ).css( "overflow" ) === "hidden") {
			return false;
		}

		var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",
			has = false;

		if ( el[ scroll ] > 0 ) {
			return true;
		}

		// TODO: determine which cases actually cause this to happen
		// if the element doesn't have the scroll set, see if it's possible to
		// set the scroll
		el[ scroll ] = 1;
		has = ( el[ scroll ] > 0 );
		el[ scroll ] = 0;
		return has;
	}
});

})( jQuery );
(function( $, undefined ) {

var uuid = 0,
	slice = Array.prototype.slice,
	_cleanData = $.cleanData;
$.cleanData = function( elems ) {
	for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
		try {
			$( elem ).triggerHandler( "remove" );
		// http://bugs.jquery.com/ticket/8235
		} catch( e ) {}
	}
	_cleanData( elems );
};

$.widget = function( name, base, prototype ) {
	var fullName, existingConstructor, constructor, basePrototype,
		// proxiedPrototype allows the provided prototype to remain unmodified
		// so that it can be used as a mixin for multiple widgets (#8876)
		proxiedPrototype = {},
		namespace = name.split( "." )[ 0 ];

	name = name.split( "." )[ 1 ];
	fullName = namespace + "-" + name;

	if ( !prototype ) {
		prototype = base;
		base = $.Widget;
	}

	// create selector for plugin
	$.expr[ ":" ][ fullName.toLowerCase() ] = function( elem ) {
		return !!$.data( elem, fullName );
	};

	$[ namespace ] = $[ namespace ] || {};
	existingConstructor = $[ namespace ][ name ];
	constructor = $[ namespace ][ name ] = function( options, element ) {
		// allow instantiation without "new" keyword
		if ( !this._createWidget ) {
			return new constructor( options, element );
		}

		// allow instantiation without initializing for simple inheritance
		// must use "new" keyword (the code above always passes args)
		if ( arguments.length ) {
			this._createWidget( options, element );
		}
	};
	// extend with the existing constructor to carry over any static properties
	$.extend( constructor, existingConstructor, {
		version: prototype.version,
		// copy the object used to create the prototype in case we need to
		// redefine the widget later
		_proto: $.extend( {}, prototype ),
		// track widgets that inherit from this widget in case this widget is
		// redefined after a widget inherits from it
		_childConstructors: []
	});

	basePrototype = new base();
	// we need to make the options hash a property directly on the new instance
	// otherwise we'll modify the options hash on the prototype that we're
	// inheriting from
	basePrototype.options = $.widget.extend( {}, basePrototype.options );
	$.each( prototype, function( prop, value ) {
		if ( !$.isFunction( value ) ) {
			proxiedPrototype[ prop ] = value;
			return;
		}
		proxiedPrototype[ prop ] = (function() {
			var _super = function() {
					return base.prototype[ prop ].apply( this, arguments );
				},
				_superApply = function( args ) {
					return base.prototype[ prop ].apply( this, args );
				};
			return function() {
				var __super = this._super,
					__superApply = this._superApply,
					returnValue;

				this._super = _super;
				this._superApply = _superApply;

				returnValue = value.apply( this, arguments );

				this._super = __super;
				this._superApply = __superApply;

				return returnValue;
			};
		})();
	});
	constructor.prototype = $.widget.extend( basePrototype, {
		// TODO: remove support for widgetEventPrefix
		// always use the name + a colon as the prefix, e.g., draggable:start
		// don't prefix for widgets that aren't DOM-based
		widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix : name
	}, proxiedPrototype, {
		constructor: constructor,
		namespace: namespace,
		widgetName: name,
		widgetFullName: fullName
	});

	// If this widget is being redefined then we need to find all widgets that
	// are inheriting from it and redefine all of them so that they inherit from
	// the new version of this widget. We're essentially trying to replace one
	// level in the prototype chain.
	if ( existingConstructor ) {
		$.each( existingConstructor._childConstructors, function( i, child ) {
			var childPrototype = child.prototype;

			// redefine the child widget using the same prototype that was
			// originally used, but inherit from the new version of the base
			$.widget( childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto );
		});
		// remove the list of existing child constructors from the old constructor
		// so the old child constructors can be garbage collected
		delete existingConstructor._childConstructors;
	} else {
		base._childConstructors.push( constructor );
	}

	$.widget.bridge( name, constructor );
};

$.widget.extend = function( target ) {
	var input = slice.call( arguments, 1 ),
		inputIndex = 0,
		inputLength = input.length,
		key,
		value;
	for ( ; inputIndex < inputLength; inputIndex++ ) {
		for ( key in input[ inputIndex ] ) {
			value = input[ inputIndex ][ key ];
			if ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {
				// Clone objects
				if ( $.isPlainObject( value ) ) {
					target[ key ] = $.isPlainObject( target[ key ] ) ?
						$.widget.extend( {}, target[ key ], value ) :
						// Don't extend strings, arrays, etc. with objects
						$.widget.extend( {}, value );
				// Copy everything else by reference
				} else {
					target[ key ] = value;
				}
			}
		}
	}
	return target;
};

$.widget.bridge = function( name, object ) {
	var fullName = object.prototype.widgetFullName || name;
	$.fn[ name ] = function( options ) {
		var isMethodCall = typeof options === "string",
			args = slice.call( arguments, 1 ),
			returnValue = this;

		// allow multiple hashes to be passed on init
		options = !isMethodCall && args.length ?
			$.widget.extend.apply( null, [ options ].concat(args) ) :
			options;

		if ( isMethodCall ) {
			this.each(function() {
				var methodValue,
					instance = $.data( this, fullName );
				if ( !instance ) {
					return $.error( "cannot call methods on " + name + " prior to initialization; " +
						"attempted to call method '" + options + "'" );
				}
				if ( !$.isFunction( instance[options] ) || options.charAt( 0 ) === "_" ) {
					return $.error( "no such method '" + options + "' for " + name + " widget instance" );
				}
				methodValue = instance[ options ].apply( instance, args );
				if ( methodValue !== instance && methodValue !== undefined ) {
					returnValue = methodValue && methodValue.jquery ?
						returnValue.pushStack( methodValue.get() ) :
						methodValue;
					return false;
				}
			});
		} else {
			this.each(function() {
				var instance = $.data( this, fullName );
				if ( instance ) {
					instance.option( options || {} )._init();
				} else {
					$.data( this, fullName, new object( options, this ) );
				}
			});
		}

		return returnValue;
	};
};

$.Widget = function( /* options, element */ ) {};
$.Widget._childConstructors = [];

$.Widget.prototype = {
	widgetName: "widget",
	widgetEventPrefix: "",
	defaultElement: "<div>",
	options: {
		disabled: false,

		// callbacks
		create: null
	},
	_createWidget: function( options, element ) {
		element = $( element || this.defaultElement || this )[ 0 ];
		this.element = $( element );
		this.uuid = uuid++;
		this.eventNamespace = "." + this.widgetName + this.uuid;
		this.options = $.widget.extend( {},
			this.options,
			this._getCreateOptions(),
			options );

		this.bindings = $();
		this.hoverable = $();
		this.focusable = $();

		if ( element !== this ) {
			$.data( element, this.widgetFullName, this );
			this._on( true, this.element, {
				remove: function( event ) {
					if ( event.target === element ) {
						this.destroy();
					}
				}
			});
			this.document = $( element.style ?
				// element within the document
				element.ownerDocument :
				// element is window or document
				element.document || element );
			this.window = $( this.document[0].defaultView || this.document[0].parentWindow );
		}

		this._create();
		this._trigger( "create", null, this._getCreateEventData() );
		this._init();
	},
	_getCreateOptions: $.noop,
	_getCreateEventData: $.noop,
	_create: $.noop,
	_init: $.noop,

	destroy: function() {
		this._destroy();
		// we can probably remove the unbind calls in 2.0
		// all event bindings should go through this._on()
		this.element
			.unbind( this.eventNamespace )
			// 1.9 BC for #7810
			// TODO remove dual storage
			.removeData( this.widgetName )
			.removeData( this.widgetFullName )
			// support: jquery <1.6.3
			// http://bugs.jquery.com/ticket/9413
			.removeData( $.camelCase( this.widgetFullName ) );
		this.widget()
			.unbind( this.eventNamespace )
			.removeAttr( "aria-disabled" )
			.removeClass(
				this.widgetFullName + "-disabled " +
				"ui-state-disabled" );

		// clean up events and states
		this.bindings.unbind( this.eventNamespace );
		this.hoverable.removeClass( "ui-state-hover" );
		this.focusable.removeClass( "ui-state-focus" );
	},
	_destroy: $.noop,

	widget: function() {
		return this.element;
	},

	option: function( key, value ) {
		var options = key,
			parts,
			curOption,
			i;

		if ( arguments.length === 0 ) {
			// don't return a reference to the internal hash
			return $.widget.extend( {}, this.options );
		}

		if ( typeof key === "string" ) {
			// handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
			options = {};
			parts = key.split( "." );
			key = parts.shift();
			if ( parts.length ) {
				curOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );
				for ( i = 0; i < parts.length - 1; i++ ) {
					curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};
					curOption = curOption[ parts[ i ] ];
				}
				key = parts.pop();
				if ( value === undefined ) {
					return curOption[ key ] === undefined ? null : curOption[ key ];
				}
				curOption[ key ] = value;
			} else {
				if ( value === undefined ) {
					return this.options[ key ] === undefined ? null : this.options[ key ];
				}
				options[ key ] = value;
			}
		}

		this._setOptions( options );

		return this;
	},
	_setOptions: function( options ) {
		var key;

		for ( key in options ) {
			this._setOption( key, options[ key ] );
		}

		return this;
	},
	_setOption: function( key, value ) {
		this.options[ key ] = value;

		if ( key === "disabled" ) {
			this.widget()
				.toggleClass( this.widgetFullName + "-disabled ui-state-disabled", !!value )
				.attr( "aria-disabled", value );
			this.hoverable.removeClass( "ui-state-hover" );
			this.focusable.removeClass( "ui-state-focus" );
		}

		return this;
	},

	enable: function() {
		return this._setOption( "disabled", false );
	},
	disable: function() {
		return this._setOption( "disabled", true );
	},

	_on: function( suppressDisabledCheck, element, handlers ) {
		var delegateElement,
			instance = this;

		// no suppressDisabledCheck flag, shuffle arguments
		if ( typeof suppressDisabledCheck !== "boolean" ) {
			handlers = element;
			element = suppressDisabledCheck;
			suppressDisabledCheck = false;
		}

		// no element argument, shuffle and use this.element
		if ( !handlers ) {
			handlers = element;
			element = this.element;
			delegateElement = this.widget();
		} else {
			// accept selectors, DOM elements
			element = delegateElement = $( element );
			this.bindings = this.bindings.add( element );
		}

		$.each( handlers, function( event, handler ) {
			function handlerProxy() {
				// allow widgets to customize the disabled handling
				// - disabled as an array instead of boolean
				// - disabled class as method for disabling individual parts
				if ( !suppressDisabledCheck &&
						( instance.options.disabled === true ||
							$( this ).hasClass( "ui-state-disabled" ) ) ) {
					return;
				}
				return ( typeof handler === "string" ? instance[ handler ] : handler )
					.apply( instance, arguments );
			}

			// copy the guid so direct unbinding works
			if ( typeof handler !== "string" ) {
				handlerProxy.guid = handler.guid =
					handler.guid || handlerProxy.guid || $.guid++;
			}

			var match = event.match( /^(\w+)\s*(.*)$/ ),
				eventName = match[1] + instance.eventNamespace,
				selector = match[2];
			if ( selector ) {
				delegateElement.delegate( selector, eventName, handlerProxy );
			} else {
				element.bind( eventName, handlerProxy );
			}
		});
	},

	_off: function( element, eventName ) {
		eventName = (eventName || "").split( " " ).join( this.eventNamespace + " " ) + this.eventNamespace;
		element.unbind( eventName ).undelegate( eventName );
	},

	_delay: function( handler, delay ) {
		function handlerProxy() {
			return ( typeof handler === "string" ? instance[ handler ] : handler )
				.apply( instance, arguments );
		}
		var instance = this;
		return setTimeout( handlerProxy, delay || 0 );
	},

	_hoverable: function( element ) {
		this.hoverable = this.hoverable.add( element );
		this._on( element, {
			mouseenter: function( event ) {
				$( event.currentTarget ).addClass( "ui-state-hover" );
			},
			mouseleave: function( event ) {
				$( event.currentTarget ).removeClass( "ui-state-hover" );
			}
		});
	},

	_focusable: function( element ) {
		this.focusable = this.focusable.add( element );
		this._on( element, {
			focusin: function( event ) {
				$( event.currentTarget ).addClass( "ui-state-focus" );
			},
			focusout: function( event ) {
				$( event.currentTarget ).removeClass( "ui-state-focus" );
			}
		});
	},

	_trigger: function( type, event, data ) {
		var prop, orig,
			callback = this.options[ type ];

		data = data || {};
		event = $.Event( event );
		event.type = ( type === this.widgetEventPrefix ?
			type :
			this.widgetEventPrefix + type ).toLowerCase();
		// the original event may come from any element
		// so we need to reset the target on the new event
		event.target = this.element[ 0 ];

		// copy original event properties over to the new event
		orig = event.originalEvent;
		if ( orig ) {
			for ( prop in orig ) {
				if ( !( prop in event ) ) {
					event[ prop ] = orig[ prop ];
				}
			}
		}

		this.element.trigger( event, data );
		return !( $.isFunction( callback ) &&
			callback.apply( this.element[0], [ event ].concat( data ) ) === false ||
			event.isDefaultPrevented() );
	}
};

$.each( { show: "fadeIn", hide: "fadeOut" }, function( method, defaultEffect ) {
	$.Widget.prototype[ "_" + method ] = function( element, options, callback ) {
		if ( typeof options === "string" ) {
			options = { effect: options };
		}
		var hasOptions,
			effectName = !options ?
				method :
				options === true || typeof options === "number" ?
					defaultEffect :
					options.effect || defaultEffect;
		options = options || {};
		if ( typeof options === "number" ) {
			options = { duration: options };
		}
		hasOptions = !$.isEmptyObject( options );
		options.complete = callback;
		if ( options.delay ) {
			element.delay( options.delay );
		}
		if ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {
			element[ method ]( options );
		} else if ( effectName !== method && element[ effectName ] ) {
			element[ effectName ]( options.duration, options.easing, callback );
		} else {
			element.queue(function( next ) {
				$( this )[ method ]();
				if ( callback ) {
					callback.call( element[ 0 ] );
				}
				next();
			});
		}
	};
});

})( jQuery );
(function( $, undefined ) {

var mouseHandled = false;
$( document ).mouseup( function() {
	mouseHandled = false;
});

$.widget("ui.mouse", {
	version: "1.10.3",
	options: {
		cancel: "input,textarea,button,select,option",
		distance: 1,
		delay: 0
	},
	_mouseInit: function() {
		var that = this;

		this.element
			.bind("mousedown."+this.widgetName, function(event) {
				return that._mouseDown(event);
			})
			.bind("click."+this.widgetName, function(event) {
				if (true === $.data(event.target, that.widgetName + ".preventClickEvent")) {
					$.removeData(event.target, that.widgetName + ".preventClickEvent");
					event.stopImmediatePropagation();
					return false;
				}
			});

		this.started = false;
	},

	// TODO: make sure destroying one instance of mouse doesn't mess with
	// other instances of mouse
	_mouseDestroy: function() {
		this.element.unbind("."+this.widgetName);
		if ( this._mouseMoveDelegate ) {
			$(document)
				.unbind("mousemove."+this.widgetName, this._mouseMoveDelegate)
				.unbind("mouseup."+this.widgetName, this._mouseUpDelegate);
		}
	},

	_mouseDown: function(event) {
		// don't let more than one widget handle mouseStart
		if( mouseHandled ) { return; }

		// we may have missed mouseup (out of window)
		(this._mouseStarted && this._mouseUp(event));

		this._mouseDownEvent = event;

		var that = this,
			btnIsLeft = (event.which === 1),
			// event.target.nodeName works around a bug in IE 8 with
			// disabled inputs (#7620)
			elIsCancel = (typeof this.options.cancel === "string" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false);
		if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
			return true;
		}

		this.mouseDelayMet = !this.options.delay;
		if (!this.mouseDelayMet) {
			this._mouseDelayTimer = setTimeout(function() {
				that.mouseDelayMet = true;
			}, this.options.delay);
		}

		if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
			this._mouseStarted = (this._mouseStart(event) !== false);
			if (!this._mouseStarted) {
				event.preventDefault();
				return true;
			}
		}

		// Click event may never have fired (Gecko & Opera)
		if (true === $.data(event.target, this.widgetName + ".preventClickEvent")) {
			$.removeData(event.target, this.widgetName + ".preventClickEvent");
		}

		// these delegates are required to keep context
		this._mouseMoveDelegate = function(event) {
			return that._mouseMove(event);
		};
		this._mouseUpDelegate = function(event) {
			return that._mouseUp(event);
		};
		$(document)
			.bind("mousemove."+this.widgetName, this._mouseMoveDelegate)
			.bind("mouseup."+this.widgetName, this._mouseUpDelegate);

		event.preventDefault();

		mouseHandled = true;
		return true;
	},

	_mouseMove: function(event) {
		// IE mouseup check - mouseup happened when mouse was out of window
		if ($.ui.ie && ( !document.documentMode || document.documentMode < 9 ) && !event.button) {
			return this._mouseUp(event);
		}

		if (this._mouseStarted) {
			this._mouseDrag(event);
			return event.preventDefault();
		}

		if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
			this._mouseStarted =
				(this._mouseStart(this._mouseDownEvent, event) !== false);
			(this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event));
		}

		return !this._mouseStarted;
	},

	_mouseUp: function(event) {
		$(document)
			.unbind("mousemove."+this.widgetName, this._mouseMoveDelegate)
			.unbind("mouseup."+this.widgetName, this._mouseUpDelegate);

		if (this._mouseStarted) {
			this._mouseStarted = false;

			if (event.target === this._mouseDownEvent.target) {
				$.data(event.target, this.widgetName + ".preventClickEvent", true);
			}

			this._mouseStop(event);
		}

		return false;
	},

	_mouseDistanceMet: function(event) {
		return (Math.max(
				Math.abs(this._mouseDownEvent.pageX - event.pageX),
				Math.abs(this._mouseDownEvent.pageY - event.pageY)
			) >= this.options.distance
		);
	},

	_mouseDelayMet: function(/* event */) {
		return this.mouseDelayMet;
	},

	// These are placeholder methods, to be overriden by extending plugin
	_mouseStart: function(/* event */) {},
	_mouseDrag: function(/* event */) {},
	_mouseStop: function(/* event */) {},
	_mouseCapture: function(/* event */) { return true; }
});

})(jQuery);
(function( $, undefined ) {

$.widget("ui.draggable", $.ui.mouse, {
	version: "1.10.3",
	widgetEventPrefix: "drag",
	options: {
		addClasses: true,
		appendTo: "parent",
		axis: false,
		connectToSortable: false,
		containment: false,
		cursor: "auto",
		cursorAt: false,
		grid: false,
		handle: false,
		helper: "original",
		iframeFix: false,
		opacity: false,
		refreshPositions: false,
		revert: false,
		revertDuration: 500,
		scope: "default",
		scroll: true,
		scrollSensitivity: 20,
		scrollSpeed: 20,
		snap: false,
		snapMode: "both",
		snapTolerance: 20,
		stack: false,
		zIndex: false,

		// callbacks
		drag: null,
		start: null,
		stop: null
	},
	_create: function() {

		if (this.options.helper === "original" && !(/^(?:r|a|f)/).test(this.element.css("position"))) {
			this.element[0].style.position = "relative";
		}
		if (this.options.addClasses){
			this.element.addClass("ui-draggable");
		}
		if (this.options.disabled){
			this.element.addClass("ui-draggable-disabled");
		}

		this._mouseInit();

	},

	_destroy: function() {
		this.element.removeClass( "ui-draggable ui-draggable-dragging ui-draggable-disabled" );
		this._mouseDestroy();
	},

	_mouseCapture: function(event) {

		var o = this.options;

		// among others, prevent a drag on a resizable-handle
		if (this.helper || o.disabled || $(event.target).closest(".ui-resizable-handle").length > 0) {
			return false;
		}

		//Quit if we're not on a valid handle
		this.handle = this._getHandle(event);
		if (!this.handle) {
			return false;
		}

		$(o.iframeFix === true ? "iframe" : o.iframeFix).each(function() {
			$("<div class='ui-draggable-iframeFix' style='background: #fff;'></div>")
			.css({
				width: this.offsetWidth+"px", height: this.offsetHeight+"px",
				position: "absolute", opacity: "0.001", zIndex: 1000
			})
			.css($(this).offset())
			.appendTo("body");
		});

		return true;

	},

	_mouseStart: function(event) {

		var o = this.options;

		//Create and append the visible helper
		this.helper = this._createHelper(event);

		this.helper.addClass("ui-draggable-dragging");

		//Cache the helper size
		this._cacheHelperProportions();

		//If ddmanager is used for droppables, set the global draggable
		if($.ui.ddmanager) {
			$.ui.ddmanager.current = this;
		}

		/*
		 * - Position generation -
		 * This block generates everything position related - it's the core of draggables.
		 */

		//Cache the margins of the original element
		this._cacheMargins();

		//Store the helper's css position
		this.cssPosition = this.helper.css( "position" );
		this.scrollParent = this.helper.scrollParent();
		this.offsetParent = this.helper.offsetParent();
		this.offsetParentCssPosition = this.offsetParent.css( "position" );

		//The element's absolute position on the page minus margins
		this.offset = this.positionAbs = this.element.offset();
		this.offset = {
			top: this.offset.top - this.margins.top,
			left: this.offset.left - this.margins.left
		};

		//Reset scroll cache
		this.offset.scroll = false;

		$.extend(this.offset, {
			click: { //Where the click happened, relative to the element
				left: event.pageX - this.offset.left,
				top: event.pageY - this.offset.top
			},
			parent: this._getParentOffset(),
			relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
		});

		//Generate the original position
		this.originalPosition = this.position = this._generatePosition(event);
		this.originalPageX = event.pageX;
		this.originalPageY = event.pageY;

		//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
		(o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));

		//Set a containment if given in the options
		this._setContainment();

		//Trigger event + callbacks
		if(this._trigger("start", event) === false) {
			this._clear();
			return false;
		}

		//Recache the helper size
		this._cacheHelperProportions();

		//Prepare the droppable offsets
		if ($.ui.ddmanager && !o.dropBehaviour) {
			$.ui.ddmanager.prepareOffsets(this, event);
		}


		this._mouseDrag(event, true); //Execute the drag once - this causes the helper not to be visible before getting its correct position

		//If the ddmanager is used for droppables, inform the manager that dragging has started (see #5003)
		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.dragStart(this, event);
		}

		return true;
	},

	_mouseDrag: function(event, noPropagation) {
		// reset any necessary cached properties (see #5009)
		if ( this.offsetParentCssPosition === "fixed" ) {
			this.offset.parent = this._getParentOffset();
		}

		//Compute the helpers position
		this.position = this._generatePosition(event);
		this.positionAbs = this._convertPositionTo("absolute");

		//Call plugins and callbacks and use the resulting position if something is returned
		if (!noPropagation) {
			var ui = this._uiHash();
			if(this._trigger("drag", event, ui) === false) {
				this._mouseUp({});
				return false;
			}
			this.position = ui.position;
		}

		if(!this.options.axis || this.options.axis !== "y") {
			this.helper[0].style.left = this.position.left+"px";
		}
		if(!this.options.axis || this.options.axis !== "x") {
			this.helper[0].style.top = this.position.top+"px";
		}
		if($.ui.ddmanager) {
			$.ui.ddmanager.drag(this, event);
		}

		return false;
	},

	_mouseStop: function(event) {

		//If we are using droppables, inform the manager about the drop
		var that = this,
			dropped = false;
		if ($.ui.ddmanager && !this.options.dropBehaviour) {
			dropped = $.ui.ddmanager.drop(this, event);
		}

		//if a drop comes from outside (a sortable)
		if(this.dropped) {
			dropped = this.dropped;
			this.dropped = false;
		}

		//if the original element is no longer in the DOM don't bother to continue (see #8269)
		if ( this.options.helper === "original" && !$.contains( this.element[ 0 ].ownerDocument, this.element[ 0 ] ) ) {
			return false;
		}

		if((this.options.revert === "invalid" && !dropped) || (this.options.revert === "valid" && dropped) || this.options.revert === true || ($.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped))) {
			$(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {
				if(that._trigger("stop", event) !== false) {
					that._clear();
				}
			});
		} else {
			if(this._trigger("stop", event) !== false) {
				this._clear();
			}
		}

		return false;
	},

	_mouseUp: function(event) {
		//Remove frame helpers
		$("div.ui-draggable-iframeFix").each(function() {
			this.parentNode.removeChild(this);
		});

		//If the ddmanager is used for droppables, inform the manager that dragging has stopped (see #5003)
		if( $.ui.ddmanager ) {
			$.ui.ddmanager.dragStop(this, event);
		}

		return $.ui.mouse.prototype._mouseUp.call(this, event);
	},

	cancel: function() {

		if(this.helper.is(".ui-draggable-dragging")) {
			this._mouseUp({});
		} else {
			this._clear();
		}

		return this;

	},

	_getHandle: function(event) {
		return this.options.handle ?
			!!$( event.target ).closest( this.element.find( this.options.handle ) ).length :
			true;
	},

	_createHelper: function(event) {

		var o = this.options,
			helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event])) : (o.helper === "clone" ? this.element.clone().removeAttr("id") : this.element);

		if(!helper.parents("body").length) {
			helper.appendTo((o.appendTo === "parent" ? this.element[0].parentNode : o.appendTo));
		}

		if(helper[0] !== this.element[0] && !(/(fixed|absolute)/).test(helper.css("position"))) {
			helper.css("position", "absolute");
		}

		return helper;

	},

	_adjustOffsetFromHelper: function(obj) {
		if (typeof obj === "string") {
			obj = obj.split(" ");
		}
		if ($.isArray(obj)) {
			obj = {left: +obj[0], top: +obj[1] || 0};
		}
		if ("left" in obj) {
			this.offset.click.left = obj.left + this.margins.left;
		}
		if ("right" in obj) {
			this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
		}
		if ("top" in obj) {
			this.offset.click.top = obj.top + this.margins.top;
		}
		if ("bottom" in obj) {
			this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
		}
	},

	_getParentOffset: function() {

		//Get the offsetParent and cache its position
		var po = this.offsetParent.offset();

		// This is a special case where we need to modify a offset calculated on start, since the following happened:
		// 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
		// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
		//    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
		if(this.cssPosition === "absolute" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
			po.left += this.scrollParent.scrollLeft();
			po.top += this.scrollParent.scrollTop();
		}

		//This needs to be actually done for all browsers, since pageX/pageY includes this information
		//Ugly IE fix
		if((this.offsetParent[0] === document.body) ||
			(this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === "html" && $.ui.ie)) {
			po = { top: 0, left: 0 };
		}

		return {
			top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"),10) || 0),
			left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"),10) || 0)
		};

	},

	_getRelativeOffset: function() {

		if(this.cssPosition === "relative") {
			var p = this.element.position();
			return {
				top: p.top - (parseInt(this.helper.css("top"),10) || 0) + this.scrollParent.scrollTop(),
				left: p.left - (parseInt(this.helper.css("left"),10) || 0) + this.scrollParent.scrollLeft()
			};
		} else {
			return { top: 0, left: 0 };
		}

	},

	_cacheMargins: function() {
		this.margins = {
			left: (parseInt(this.element.css("marginLeft"),10) || 0),
			top: (parseInt(this.element.css("marginTop"),10) || 0),
			right: (parseInt(this.element.css("marginRight"),10) || 0),
			bottom: (parseInt(this.element.css("marginBottom"),10) || 0)
		};
	},

	_cacheHelperProportions: function() {
		this.helperProportions = {
			width: this.helper.outerWidth(),
			height: this.helper.outerHeight()
		};
	},

	_setContainment: function() {

		var over, c, ce,
			o = this.options;

		if ( !o.containment ) {
			this.containment = null;
			return;
		}

		if ( o.containment === "window" ) {
			this.containment = [
				$( window ).scrollLeft() - this.offset.relative.left - this.offset.parent.left,
				$( window ).scrollTop() - this.offset.relative.top - this.offset.parent.top,
				$( window ).scrollLeft() + $( window ).width() - this.helperProportions.width - this.margins.left,
				$( window ).scrollTop() + ( $( window ).height() || document.body.parentNode.scrollHeight ) - this.helperProportions.height - this.margins.top
			];
			return;
		}

		if ( o.containment === "document") {
			this.containment = [
				0,
				0,
				$( document ).width() - this.helperProportions.width - this.margins.left,
				( $( document ).height() || document.body.parentNode.scrollHeight ) - this.helperProportions.height - this.margins.top
			];
			return;
		}

		if ( o.containment.constructor === Array ) {
			this.containment = o.containment;
			return;
		}

		if ( o.containment === "parent" ) {
			o.containment = this.helper[ 0 ].parentNode;
		}

		c = $( o.containment );
		ce = c[ 0 ];

		if( !ce ) {
			return;
		}

		over = c.css( "overflow" ) !== "hidden";

		this.containment = [
			( parseInt( c.css( "borderLeftWidth" ), 10 ) || 0 ) + ( parseInt( c.css( "paddingLeft" ), 10 ) || 0 ),
			( parseInt( c.css( "borderTopWidth" ), 10 ) || 0 ) + ( parseInt( c.css( "paddingTop" ), 10 ) || 0 ) ,
			( over ? Math.max( ce.scrollWidth, ce.offsetWidth ) : ce.offsetWidth ) - ( parseInt( c.css( "borderRightWidth" ), 10 ) || 0 ) - ( parseInt( c.css( "paddingRight" ), 10 ) || 0 ) - this.helperProportions.width - this.margins.left - this.margins.right,
			( over ? Math.max( ce.scrollHeight, ce.offsetHeight ) : ce.offsetHeight ) - ( parseInt( c.css( "borderBottomWidth" ), 10 ) || 0 ) - ( parseInt( c.css( "paddingBottom" ), 10 ) || 0 ) - this.helperProportions.height - this.margins.top  - this.margins.bottom
		];
		this.relative_container = c;
	},

	_convertPositionTo: function(d, pos) {

		if(!pos) {
			pos = this.position;
		}

		var mod = d === "absolute" ? 1 : -1,
			scroll = this.cssPosition === "absolute" && !( this.scrollParent[ 0 ] !== document && $.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) ? this.offsetParent : this.scrollParent;

		//Cache the scroll
		if (!this.offset.scroll) {
			this.offset.scroll = {top : scroll.scrollTop(), left : scroll.scrollLeft()};
		}

		return {
			top: (
				pos.top	+																// The absolute mouse position
				this.offset.relative.top * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.top * mod -										// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : this.offset.scroll.top ) * mod )
			),
			left: (
				pos.left +																// The absolute mouse position
				this.offset.relative.left * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.left * mod	-										// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : this.offset.scroll.left ) * mod )
			)
		};

	},

	_generatePosition: function(event) {

		var containment, co, top, left,
			o = this.options,
			scroll = this.cssPosition === "absolute" && !( this.scrollParent[ 0 ] !== document && $.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) ? this.offsetParent : this.scrollParent,
			pageX = event.pageX,
			pageY = event.pageY;

		//Cache the scroll
		if (!this.offset.scroll) {
			this.offset.scroll = {top : scroll.scrollTop(), left : scroll.scrollLeft()};
		}

		/*
		 * - Position constraining -
		 * Constrain the position to a mix of grid, containment.
		 */

		// If we are not dragging yet, we won't check for options
		if ( this.originalPosition ) {
			if ( this.containment ) {
				if ( this.relative_container ){
					co = this.relative_container.offset();
					containment = [
						this.containment[ 0 ] + co.left,
						this.containment[ 1 ] + co.top,
						this.containment[ 2 ] + co.left,
						this.containment[ 3 ] + co.top
					];
				}
				else {
					containment = this.containment;
				}

				if(event.pageX - this.offset.click.left < containment[0]) {
					pageX = containment[0] + this.offset.click.left;
				}
				if(event.pageY - this.offset.click.top < containment[1]) {
					pageY = containment[1] + this.offset.click.top;
				}
				if(event.pageX - this.offset.click.left > containment[2]) {
					pageX = containment[2] + this.offset.click.left;
				}
				if(event.pageY - this.offset.click.top > containment[3]) {
					pageY = containment[3] + this.offset.click.top;
				}
			}

			if(o.grid) {
				//Check for grid elements set to 0 to prevent divide by 0 error causing invalid argument errors in IE (see ticket #6950)
				top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;
				pageY = containment ? ((top - this.offset.click.top >= containment[1] || top - this.offset.click.top > containment[3]) ? top : ((top - this.offset.click.top >= containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;

				left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;
				pageX = containment ? ((left - this.offset.click.left >= containment[0] || left - this.offset.click.left > containment[2]) ? left : ((left - this.offset.click.left >= containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
			}

		}

		return {
			top: (
				pageY -																	// The absolute mouse position
				this.offset.click.top	-												// Click offset (relative to the element)
				this.offset.relative.top -												// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.top +												// The offsetParent's offset without borders (offset + border)
				( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : this.offset.scroll.top )
			),
			left: (
				pageX -																	// The absolute mouse position
				this.offset.click.left -												// Click offset (relative to the element)
				this.offset.relative.left -												// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.left +												// The offsetParent's offset without borders (offset + border)
				( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : this.offset.scroll.left )
			)
		};

	},

	_clear: function() {
		this.helper.removeClass("ui-draggable-dragging");
		if(this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) {
			this.helper.remove();
		}
		this.helper = null;
		this.cancelHelperRemoval = false;
	},

	// From now on bulk stuff - mainly helpers

	_trigger: function(type, event, ui) {
		ui = ui || this._uiHash();
		$.ui.plugin.call(this, type, [event, ui]);
		//The absolute position has to be recalculated after plugins
		if(type === "drag") {
			this.positionAbs = this._convertPositionTo("absolute");
		}
		return $.Widget.prototype._trigger.call(this, type, event, ui);
	},

	plugins: {},

	_uiHash: function() {
		return {
			helper: this.helper,
			position: this.position,
			originalPosition: this.originalPosition,
			offset: this.positionAbs
		};
	}

});

$.ui.plugin.add("draggable", "connectToSortable", {
	start: function(event, ui) {

		var inst = $(this).data("ui-draggable"), o = inst.options,
			uiSortable = $.extend({}, ui, { item: inst.element });
		inst.sortables = [];
		$(o.connectToSortable).each(function() {
			var sortable = $.data(this, "ui-sortable");
			if (sortable && !sortable.options.disabled) {
				inst.sortables.push({
					instance: sortable,
					shouldRevert: sortable.options.revert
				});
				sortable.refreshPositions();	// Call the sortable's refreshPositions at drag start to refresh the containerCache since the sortable container cache is used in drag and needs to be up to date (this will ensure it's initialised as well as being kept in step with any changes that might have happened on the page).
				sortable._trigger("activate", event, uiSortable);
			}
		});

	},
	stop: function(event, ui) {

		//If we are still over the sortable, we fake the stop event of the sortable, but also remove helper
		var inst = $(this).data("ui-draggable"),
			uiSortable = $.extend({}, ui, { item: inst.element });

		$.each(inst.sortables, function() {
			if(this.instance.isOver) {

				this.instance.isOver = 0;

				inst.cancelHelperRemoval = true; //Don't remove the helper in the draggable instance
				this.instance.cancelHelperRemoval = false; //Remove it in the sortable instance (so sortable plugins like revert still work)

				//The sortable revert is supported, and we have to set a temporary dropped variable on the draggable to support revert: "valid/invalid"
				if(this.shouldRevert) {
					this.instance.options.revert = this.shouldRevert;
				}

				//Trigger the stop of the sortable
				this.instance._mouseStop(event);

				this.instance.options.helper = this.instance.options._helper;

				//If the helper has been the original item, restore properties in the sortable
				if(inst.options.helper === "original") {
					this.instance.currentItem.css({ top: "auto", left: "auto" });
				}

			} else {
				this.instance.cancelHelperRemoval = false; //Remove the helper in the sortable instance
				this.instance._trigger("deactivate", event, uiSortable);
			}

		});

	},
	drag: function(event, ui) {

		var inst = $(this).data("ui-draggable"), that = this;

		$.each(inst.sortables, function() {

			var innermostIntersecting = false,
				thisSortable = this;

			//Copy over some variables to allow calling the sortable's native _intersectsWith
			this.instance.positionAbs = inst.positionAbs;
			this.instance.helperProportions = inst.helperProportions;
			this.instance.offset.click = inst.offset.click;

			if(this.instance._intersectsWith(this.instance.containerCache)) {
				innermostIntersecting = true;
				$.each(inst.sortables, function () {
					this.instance.positionAbs = inst.positionAbs;
					this.instance.helperProportions = inst.helperProportions;
					this.instance.offset.click = inst.offset.click;
					if (this !== thisSortable &&
						this.instance._intersectsWith(this.instance.containerCache) &&
						$.contains(thisSortable.instance.element[0], this.instance.element[0])
					) {
						innermostIntersecting = false;
					}
					return innermostIntersecting;
				});
			}


			if(innermostIntersecting) {
				//If it intersects, we use a little isOver variable and set it once, so our move-in stuff gets fired only once
				if(!this.instance.isOver) {

					this.instance.isOver = 1;
					//Now we fake the start of dragging for the sortable instance,
					//by cloning the list group item, appending it to the sortable and using it as inst.currentItem
					//We can then fire the start event of the sortable with our passed browser event, and our own helper (so it doesn't create a new one)
					this.instance.currentItem = $(that).clone().removeAttr("id").appendTo(this.instance.element).data("ui-sortable-item", true);
					this.instance.options._helper = this.instance.options.helper; //Store helper option to later restore it
					this.instance.options.helper = function() { return ui.helper[0]; };

					event.target = this.instance.currentItem[0];
					this.instance._mouseCapture(event, true);
					this.instance._mouseStart(event, true, true);

					//Because the browser event is way off the new appended portlet, we modify a couple of variables to reflect the changes
					this.instance.offset.click.top = inst.offset.click.top;
					this.instance.offset.click.left = inst.offset.click.left;
					this.instance.offset.parent.left -= inst.offset.parent.left - this.instance.offset.parent.left;
					this.instance.offset.parent.top -= inst.offset.parent.top - this.instance.offset.parent.top;

					inst._trigger("toSortable", event);
					inst.dropped = this.instance.element; //draggable revert needs that
					//hack so receive/update callbacks work (mostly)
					inst.currentItem = inst.element;
					this.instance.fromOutside = inst;

				}

				//Provided we did all the previous steps, we can fire the drag event of the sortable on every draggable drag, when it intersects with the sortable
				if(this.instance.currentItem) {
					this.instance._mouseDrag(event);
				}

			} else {

				//If it doesn't intersect with the sortable, and it intersected before,
				//we fake the drag stop of the sortable, but make sure it doesn't remove the helper by using cancelHelperRemoval
				if(this.instance.isOver) {

					this.instance.isOver = 0;
					this.instance.cancelHelperRemoval = true;

					//Prevent reverting on this forced stop
					this.instance.options.revert = false;

					// The out event needs to be triggered independently
					this.instance._trigger("out", event, this.instance._uiHash(this.instance));

					this.instance._mouseStop(event, true);
					this.instance.options.helper = this.instance.options._helper;

					//Now we remove our currentItem, the list group clone again, and the placeholder, and animate the helper back to it's original size
					this.instance.currentItem.remove();
					if(this.instance.placeholder) {
						this.instance.placeholder.remove();
					}

					inst._trigger("fromSortable", event);
					inst.dropped = false; //draggable revert needs that
				}

			}

		});

	}
});

$.ui.plugin.add("draggable", "cursor", {
	start: function() {
		var t = $("body"), o = $(this).data("ui-draggable").options;
		if (t.css("cursor")) {
			o._cursor = t.css("cursor");
		}
		t.css("cursor", o.cursor);
	},
	stop: function() {
		var o = $(this).data("ui-draggable").options;
		if (o._cursor) {
			$("body").css("cursor", o._cursor);
		}
	}
});

$.ui.plugin.add("draggable", "opacity", {
	start: function(event, ui) {
		var t = $(ui.helper), o = $(this).data("ui-draggable").options;
		if(t.css("opacity")) {
			o._opacity = t.css("opacity");
		}
		t.css("opacity", o.opacity);
	},
	stop: function(event, ui) {
		var o = $(this).data("ui-draggable").options;
		if(o._opacity) {
			$(ui.helper).css("opacity", o._opacity);
		}
	}
});

$.ui.plugin.add("draggable", "scroll", {
	start: function() {
		var i = $(this).data("ui-draggable");
		if(i.scrollParent[0] !== document && i.scrollParent[0].tagName !== "HTML") {
			i.overflowOffset = i.scrollParent.offset();
		}
	},
	drag: function( event ) {

		var i = $(this).data("ui-draggable"), o = i.options, scrolled = false;

		if(i.scrollParent[0] !== document && i.scrollParent[0].tagName !== "HTML") {

			if(!o.axis || o.axis !== "x") {
				if((i.overflowOffset.top + i.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity) {
					i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop + o.scrollSpeed;
				} else if(event.pageY - i.overflowOffset.top < o.scrollSensitivity) {
					i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop - o.scrollSpeed;
				}
			}

			if(!o.axis || o.axis !== "y") {
				if((i.overflowOffset.left + i.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity) {
					i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft + o.scrollSpeed;
				} else if(event.pageX - i.overflowOffset.left < o.scrollSensitivity) {
					i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft - o.scrollSpeed;
				}
			}

		} else {

			if(!o.axis || o.axis !== "x") {
				if(event.pageY - $(document).scrollTop() < o.scrollSensitivity) {
					scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
				} else if($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {
					scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
				}
			}

			if(!o.axis || o.axis !== "y") {
				if(event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {
					scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
				} else if($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {
					scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
				}
			}

		}

		if(scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {
			$.ui.ddmanager.prepareOffsets(i, event);
		}

	}
});

$.ui.plugin.add("draggable", "snap", {
	start: function() {

		var i = $(this).data("ui-draggable"),
			o = i.options;

		i.snapElements = [];

		$(o.snap.constructor !== String ? ( o.snap.items || ":data(ui-draggable)" ) : o.snap).each(function() {
			var $t = $(this),
				$o = $t.offset();
			if(this !== i.element[0]) {
				i.snapElements.push({
					item: this,
					width: $t.outerWidth(), height: $t.outerHeight(),
					top: $o.top, left: $o.left
				});
			}
		});

	},
	drag: function(event, ui) {

		var ts, bs, ls, rs, l, r, t, b, i, first,
			inst = $(this).data("ui-draggable"),
			o = inst.options,
			d = o.snapTolerance,
			x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width,
			y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;

		for (i = inst.snapElements.length - 1; i >= 0; i--){

			l = inst.snapElements[i].left;
			r = l + inst.snapElements[i].width;
			t = inst.snapElements[i].top;
			b = t + inst.snapElements[i].height;

			if ( x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d || !$.contains( inst.snapElements[ i ].item.ownerDocument, inst.snapElements[ i ].item ) ) {
				if(inst.snapElements[i].snapping) {
					(inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
				}
				inst.snapElements[i].snapping = false;
				continue;
			}

			if(o.snapMode !== "inner") {
				ts = Math.abs(t - y2) <= d;
				bs = Math.abs(b - y1) <= d;
				ls = Math.abs(l - x2) <= d;
				rs = Math.abs(r - x1) <= d;
				if(ts) {
					ui.position.top = inst._convertPositionTo("relative", { top: t - inst.helperProportions.height, left: 0 }).top - inst.margins.top;
				}
				if(bs) {
					ui.position.top = inst._convertPositionTo("relative", { top: b, left: 0 }).top - inst.margins.top;
				}
				if(ls) {
					ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l - inst.helperProportions.width }).left - inst.margins.left;
				}
				if(rs) {
					ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r }).left - inst.margins.left;
				}
			}

			first = (ts || bs || ls || rs);

			if(o.snapMode !== "outer") {
				ts = Math.abs(t - y1) <= d;
				bs = Math.abs(b - y2) <= d;
				ls = Math.abs(l - x1) <= d;
				rs = Math.abs(r - x2) <= d;
				if(ts) {
					ui.position.top = inst._convertPositionTo("relative", { top: t, left: 0 }).top - inst.margins.top;
				}
				if(bs) {
					ui.position.top = inst._convertPositionTo("relative", { top: b - inst.helperProportions.height, left: 0 }).top - inst.margins.top;
				}
				if(ls) {
					ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l }).left - inst.margins.left;
				}
				if(rs) {
					ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r - inst.helperProportions.width }).left - inst.margins.left;
				}
			}

			if(!inst.snapElements[i].snapping && (ts || bs || ls || rs || first)) {
				(inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
			}
			inst.snapElements[i].snapping = (ts || bs || ls || rs || first);

		}

	}
});

$.ui.plugin.add("draggable", "stack", {
	start: function() {
		var min,
			o = this.data("ui-draggable").options,
			group = $.makeArray($(o.stack)).sort(function(a,b) {
				return (parseInt($(a).css("zIndex"),10) || 0) - (parseInt($(b).css("zIndex"),10) || 0);
			});

		if (!group.length) { return; }

		min = parseInt($(group[0]).css("zIndex"), 10) || 0;
		$(group).each(function(i) {
			$(this).css("zIndex", min + i);
		});
		this.css("zIndex", (min + group.length));
	}
});

$.ui.plugin.add("draggable", "zIndex", {
	start: function(event, ui) {
		var t = $(ui.helper), o = $(this).data("ui-draggable").options;
		if(t.css("zIndex")) {
			o._zIndex = t.css("zIndex");
		}
		t.css("zIndex", o.zIndex);
	},
	stop: function(event, ui) {
		var o = $(this).data("ui-draggable").options;
		if(o._zIndex) {
			$(ui.helper).css("zIndex", o._zIndex);
		}
	}
});

})(jQuery);
(function( $, undefined ) {

function num(v) {
	return parseInt(v, 10) || 0;
}

function isNumber(value) {
	return !isNaN(parseInt(value, 10));
}

$.widget("ui.resizable", $.ui.mouse, {
	version: "1.10.3",
	widgetEventPrefix: "resize",
	options: {
		alsoResize: false,
		animate: false,
		animateDuration: "slow",
		animateEasing: "swing",
		aspectRatio: false,
		autoHide: false,
		containment: false,
		ghost: false,
		grid: false,
		handles: "e,s,se",
		helper: false,
		maxHeight: null,
		maxWidth: null,
		minHeight: 10,
		minWidth: 10,
		// See #7960
		zIndex: 90,

		// callbacks
		resize: null,
		start: null,
		stop: null
	},
	_create: function() {

		var n, i, handle, axis, hname,
			that = this,
			o = this.options;
		this.element.addClass("ui-resizable");

		$.extend(this, {
			_aspectRatio: !!(o.aspectRatio),
			aspectRatio: o.aspectRatio,
			originalElement: this.element,
			_proportionallyResizeElements: [],
			_helper: o.helper || o.ghost || o.animate ? o.helper || "ui-resizable-helper" : null
		});

		//Wrap the element if it cannot hold child nodes
		if(this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)) {

			//Create a wrapper element and set the wrapper to the new current internal element
			this.element.wrap(
				$("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({
					position: this.element.css("position"),
					width: this.element.outerWidth(),
					height: this.element.outerHeight(),
					top: this.element.css("top"),
					left: this.element.css("left")
				})
			);

			//Overwrite the original this.element
			this.element = this.element.parent().data(
				"ui-resizable", this.element.data("ui-resizable")
			);

			this.elementIsWrapper = true;

			//Move margins to the wrapper
			this.element.css({ marginLeft: this.originalElement.css("marginLeft"), marginTop: this.originalElement.css("marginTop"), marginRight: this.originalElement.css("marginRight"), marginBottom: this.originalElement.css("marginBottom") });
			this.originalElement.css({ marginLeft: 0, marginTop: 0, marginRight: 0, marginBottom: 0});

			//Prevent Safari textarea resize
			this.originalResizeStyle = this.originalElement.css("resize");
			this.originalElement.css("resize", "none");

			//Push the actual element to our proportionallyResize internal array
			this._proportionallyResizeElements.push(this.originalElement.css({ position: "static", zoom: 1, display: "block" }));

			// avoid IE jump (hard set the margin)
			this.originalElement.css({ margin: this.originalElement.css("margin") });

			// fix handlers offset
			this._proportionallyResize();

		}

		this.handles = o.handles || (!$(".ui-resizable-handle", this.element).length ? "e,s,se" : { n: ".ui-resizable-n", e: ".ui-resizable-e", s: ".ui-resizable-s", w: ".ui-resizable-w", se: ".ui-resizable-se", sw: ".ui-resizable-sw", ne: ".ui-resizable-ne", nw: ".ui-resizable-nw" });
		if(this.handles.constructor === String) {

			if ( this.handles === "all") {
				this.handles = "n,e,s,w,se,sw,ne,nw";
			}

			n = this.handles.split(",");
			this.handles = {};

			for(i = 0; i < n.length; i++) {

				handle = $.trim(n[i]);
				hname = "ui-resizable-"+handle;
				axis = $("<div class='ui-resizable-handle " + hname + "'></div>");

				// Apply zIndex to all handles - see #7960
				axis.css({ zIndex: o.zIndex });

				//TODO : What's going on here?
				if ("se" === handle) {
					axis.addClass("ui-icon ui-icon-gripsmall-diagonal-se");
				}

				//Insert into internal handles object and append to element
				this.handles[handle] = ".ui-resizable-"+handle;
				this.element.append(axis);
			}

		}

		this._renderAxis = function(target) {

			var i, axis, padPos, padWrapper;

			target = target || this.element;

			for(i in this.handles) {

				if(this.handles[i].constructor === String) {
					this.handles[i] = $(this.handles[i], this.element).show();
				}

				//Apply pad to wrapper element, needed to fix axis position (textarea, inputs, scrolls)
				if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) {

					axis = $(this.handles[i], this.element);

					//Checking the correct pad and border
					padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();

					//The padding type i have to apply...
					padPos = [ "padding",
						/ne|nw|n/.test(i) ? "Top" :
						/se|sw|s/.test(i) ? "Bottom" :
						/^e$/.test(i) ? "Right" : "Left" ].join("");

					target.css(padPos, padWrapper);

					this._proportionallyResize();

				}

				//TODO: What's that good for? There's not anything to be executed left
				if(!$(this.handles[i]).length) {
					continue;
				}
			}
		};

		//TODO: make renderAxis a prototype function
		this._renderAxis(this.element);

		this._handles = $(".ui-resizable-handle", this.element)
			.disableSelection();

		//Matching axis name
		this._handles.mouseover(function() {
			if (!that.resizing) {
				if (this.className) {
					axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);
				}
				//Axis, default = se
				that.axis = axis && axis[1] ? axis[1] : "se";
			}
		});

		//If we want to auto hide the elements
		if (o.autoHide) {
			this._handles.hide();
			$(this.element)
				.addClass("ui-resizable-autohide")
				.mouseenter(function() {
					if (o.disabled) {
						return;
					}
					$(this).removeClass("ui-resizable-autohide");
					that._handles.show();
				})
				.mouseleave(function(){
					if (o.disabled) {
						return;
					}
					if (!that.resizing) {
						$(this).addClass("ui-resizable-autohide");
						that._handles.hide();
					}
				});
		}

		//Initialize the mouse interaction
		this._mouseInit();

	},

	_destroy: function() {

		this._mouseDestroy();

		var wrapper,
			_destroy = function(exp) {
				$(exp).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing")
					.removeData("resizable").removeData("ui-resizable").unbind(".resizable").find(".ui-resizable-handle").remove();
			};

		//TODO: Unwrap at same DOM position
		if (this.elementIsWrapper) {
			_destroy(this.element);
			wrapper = this.element;
			this.originalElement.css({
				position: wrapper.css("position"),
				width: wrapper.outerWidth(),
				height: wrapper.outerHeight(),
				top: wrapper.css("top"),
				left: wrapper.css("left")
			}).insertAfter( wrapper );
			wrapper.remove();
		}

		this.originalElement.css("resize", this.originalResizeStyle);
		_destroy(this.originalElement);

		return this;
	},

	_mouseCapture: function(event) {
		var i, handle,
			capture = false;

		for (i in this.handles) {
			handle = $(this.handles[i])[0];
			if (handle === event.target || $.contains(handle, event.target)) {
				capture = true;
			}
		}

		return !this.options.disabled && capture;
	},

	_mouseStart: function(event) {

		var curleft, curtop, cursor,
			o = this.options,
			iniPos = this.element.position(),
			el = this.element;

		this.resizing = true;

		// bugfix for http://dev.jquery.com/ticket/1749
		if ( (/absolute/).test( el.css("position") ) ) {
			el.css({ position: "absolute", top: el.css("top"), left: el.css("left") });
		} else if (el.is(".ui-draggable")) {
			el.css({ position: "absolute", top: iniPos.top, left: iniPos.left });
		}

		this._renderProxy();

		curleft = num(this.helper.css("left"));
		curtop = num(this.helper.css("top"));

		if (o.containment) {
			curleft += $(o.containment).scrollLeft() || 0;
			curtop += $(o.containment).scrollTop() || 0;
		}

		//Store needed variables
		this.offset = this.helper.offset();
		this.position = { left: curleft, top: curtop };
		this.size = this._helper ? { width: el.outerWidth(), height: el.outerHeight() } : { width: el.width(), height: el.height() };
		this.originalSize = this._helper ? { width: el.outerWidth(), height: el.outerHeight() } : { width: el.width(), height: el.height() };
		this.originalPosition = { left: curleft, top: curtop };
		this.sizeDiff = { width: el.outerWidth() - el.width(), height: el.outerHeight() - el.height() };
		this.originalMousePosition = { left: event.pageX, top: event.pageY };

		//Aspect Ratio
		this.aspectRatio = (typeof o.aspectRatio === "number") ? o.aspectRatio : ((this.originalSize.width / this.originalSize.height) || 1);

		cursor = $(".ui-resizable-" + this.axis).css("cursor");
		$("body").css("cursor", cursor === "auto" ? this.axis + "-resize" : cursor);

		el.addClass("ui-resizable-resizing");
		this._propagate("start", event);
		return true;
	},

	_mouseDrag: function(event) {

		//Increase performance, avoid regex
		var data,
			el = this.helper, props = {},
			smp = this.originalMousePosition,
			a = this.axis,
			prevTop = this.position.top,
			prevLeft = this.position.left,
			prevWidth = this.size.width,
			prevHeight = this.size.height,
			dx = (event.pageX-smp.left)||0,
			dy = (event.pageY-smp.top)||0,
			trigger = this._change[a];

		if (!trigger) {
			return false;
		}

		// Calculate the attrs that will be change
		data = trigger.apply(this, [event, dx, dy]);

		// Put this in the mouseDrag handler since the user can start pressing shift while resizing
		this._updateVirtualBoundaries(event.shiftKey);
		if (this._aspectRatio || event.shiftKey) {
			data = this._updateRatio(data, event);
		}

		data = this._respectSize(data, event);

		this._updateCache(data);

		// plugins callbacks need to be called first
		this._propagate("resize", event);

		if (this.position.top !== prevTop) {
			props.top = this.position.top + "px";
		}
		if (this.position.left !== prevLeft) {
			props.left = this.position.left + "px";
		}
		if (this.size.width !== prevWidth) {
			props.width = this.size.width + "px";
		}
		if (this.size.height !== prevHeight) {
			props.height = this.size.height + "px";
		}
		el.css(props);

		if (!this._helper && this._proportionallyResizeElements.length) {
			this._proportionallyResize();
		}

		// Call the user callback if the element was resized
		if ( ! $.isEmptyObject(props) ) {
			this._trigger("resize", event, this.ui());
		}

		return false;
	},

	_mouseStop: function(event) {

		this.resizing = false;
		var pr, ista, soffseth, soffsetw, s, left, top,
			o = this.options, that = this;

		if(this._helper) {

			pr = this._proportionallyResizeElements;
			ista = pr.length && (/textarea/i).test(pr[0].nodeName);
			soffseth = ista && $.ui.hasScroll(pr[0], "left") /* TODO - jump height */ ? 0 : that.sizeDiff.height;
			soffsetw = ista ? 0 : that.sizeDiff.width;

			s = { width: (that.helper.width()  - soffsetw), height: (that.helper.height() - soffseth) };
			left = (parseInt(that.element.css("left"), 10) + (that.position.left - that.originalPosition.left)) || null;
			top = (parseInt(that.element.css("top"), 10) + (that.position.top - that.originalPosition.top)) || null;

			if (!o.animate) {
				this.element.css($.extend(s, { top: top, left: left }));
			}

			that.helper.height(that.size.height);
			that.helper.width(that.size.width);

			if (this._helper && !o.animate) {
				this._proportionallyResize();
			}
		}

		$("body").css("cursor", "auto");

		this.element.removeClass("ui-resizable-resizing");

		this._propagate("stop", event);

		if (this._helper) {
			this.helper.remove();
		}

		return false;

	},

	_updateVirtualBoundaries: function(forceAspectRatio) {
		var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b,
			o = this.options;

		b = {
			minWidth: isNumber(o.minWidth) ? o.minWidth : 0,
			maxWidth: isNumber(o.maxWidth) ? o.maxWidth : Infinity,
			minHeight: isNumber(o.minHeight) ? o.minHeight : 0,
			maxHeight: isNumber(o.maxHeight) ? o.maxHeight : Infinity
		};

		if(this._aspectRatio || forceAspectRatio) {
			// We want to create an enclosing box whose aspect ration is the requested one
			// First, compute the "projected" size for each dimension based on the aspect ratio and other dimension
			pMinWidth = b.minHeight * this.aspectRatio;
			pMinHeight = b.minWidth / this.aspectRatio;
			pMaxWidth = b.maxHeight * this.aspectRatio;
			pMaxHeight = b.maxWidth / this.aspectRatio;

			if(pMinWidth > b.minWidth) {
				b.minWidth = pMinWidth;
			}
			if(pMinHeight > b.minHeight) {
				b.minHeight = pMinHeight;
			}
			if(pMaxWidth < b.maxWidth) {
				b.maxWidth = pMaxWidth;
			}
			if(pMaxHeight < b.maxHeight) {
				b.maxHeight = pMaxHeight;
			}
		}
		this._vBoundaries = b;
	},

	_updateCache: function(data) {
		this.offset = this.helper.offset();
		if (isNumber(data.left)) {
			this.position.left = data.left;
		}
		if (isNumber(data.top)) {
			this.position.top = data.top;
		}
		if (isNumber(data.height)) {
			this.size.height = data.height;
		}
		if (isNumber(data.width)) {
			this.size.width = data.width;
		}
	},

	_updateRatio: function( data ) {

		var cpos = this.position,
			csize = this.size,
			a = this.axis;

		if (isNumber(data.height)) {
			data.width = (data.height * this.aspectRatio);
		} else if (isNumber(data.width)) {
			data.height = (data.width / this.aspectRatio);
		}

		if (a === "sw") {
			data.left = cpos.left + (csize.width - data.width);
			data.top = null;
		}
		if (a === "nw") {
			data.top = cpos.top + (csize.height - data.height);
			data.left = cpos.left + (csize.width - data.width);
		}

		return data;
	},

	_respectSize: function( data ) {

		var o = this._vBoundaries,
			a = this.axis,
			ismaxw = isNumber(data.width) && o.maxWidth && (o.maxWidth < data.width), ismaxh = isNumber(data.height) && o.maxHeight && (o.maxHeight < data.height),
			isminw = isNumber(data.width) && o.minWidth && (o.minWidth > data.width), isminh = isNumber(data.height) && o.minHeight && (o.minHeight > data.height),
			dw = this.originalPosition.left + this.originalSize.width,
			dh = this.position.top + this.size.height,
			cw = /sw|nw|w/.test(a), ch = /nw|ne|n/.test(a);
		if (isminw) {
			data.width = o.minWidth;
		}
		if (isminh) {
			data.height = o.minHeight;
		}
		if (ismaxw) {
			data.width = o.maxWidth;
		}
		if (ismaxh) {
			data.height = o.maxHeight;
		}

		if (isminw && cw) {
			data.left = dw - o.minWidth;
		}
		if (ismaxw && cw) {
			data.left = dw - o.maxWidth;
		}
		if (isminh && ch) {
			data.top = dh - o.minHeight;
		}
		if (ismaxh && ch) {
			data.top = dh - o.maxHeight;
		}

		// fixing jump error on top/left - bug #2330
		if (!data.width && !data.height && !data.left && data.top) {
			data.top = null;
		} else if (!data.width && !data.height && !data.top && data.left) {
			data.left = null;
		}

		return data;
	},

	_proportionallyResize: function() {

		if (!this._proportionallyResizeElements.length) {
			return;
		}

		var i, j, borders, paddings, prel,
			element = this.helper || this.element;

		for ( i=0; i < this._proportionallyResizeElements.length; i++) {

			prel = this._proportionallyResizeElements[i];

			if (!this.borderDif) {
				this.borderDif = [];
				borders = [prel.css("borderTopWidth"), prel.css("borderRightWidth"), prel.css("borderBottomWidth"), prel.css("borderLeftWidth")];
				paddings = [prel.css("paddingTop"), prel.css("paddingRight"), prel.css("paddingBottom"), prel.css("paddingLeft")];

				for ( j = 0; j < borders.length; j++ ) {
					this.borderDif[ j ] = ( parseInt( borders[ j ], 10 ) || 0 ) + ( parseInt( paddings[ j ], 10 ) || 0 );
				}
			}

			prel.css({
				height: (element.height() - this.borderDif[0] - this.borderDif[2]) || 0,
				width: (element.width() - this.borderDif[1] - this.borderDif[3]) || 0
			});

		}

	},

	_renderProxy: function() {

		var el = this.element, o = this.options;
		this.elementOffset = el.offset();

		if(this._helper) {

			this.helper = this.helper || $("<div style='overflow:hidden;'></div>");

			this.helper.addClass(this._helper).css({
				width: this.element.outerWidth() - 1,
				height: this.element.outerHeight() - 1,
				position: "absolute",
				left: this.elementOffset.left +"px",
				top: this.elementOffset.top +"px",
				zIndex: ++o.zIndex //TODO: Don't modify option
			});

			this.helper
				.appendTo("body")
				.disableSelection();

		} else {
			this.helper = this.element;
		}

	},

	_change: {
		e: function(event, dx) {
			return { width: this.originalSize.width + dx };
		},
		w: function(event, dx) {
			var cs = this.originalSize, sp = this.originalPosition;
			return { left: sp.left + dx, width: cs.width - dx };
		},
		n: function(event, dx, dy) {
			var cs = this.originalSize, sp = this.originalPosition;
			return { top: sp.top + dy, height: cs.height - dy };
		},
		s: function(event, dx, dy) {
			return { height: this.originalSize.height + dy };
		},
		se: function(event, dx, dy) {
			return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
		},
		sw: function(event, dx, dy) {
			return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
		},
		ne: function(event, dx, dy) {
			return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
		},
		nw: function(event, dx, dy) {
			return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
		}
	},

	_propagate: function(n, event) {
		$.ui.plugin.call(this, n, [event, this.ui()]);
		(n !== "resize" && this._trigger(n, event, this.ui()));
	},

	plugins: {},

	ui: function() {
		return {
			originalElement: this.originalElement,
			element: this.element,
			helper: this.helper,
			position: this.position,
			size: this.size,
			originalSize: this.originalSize,
			originalPosition: this.originalPosition
		};
	}

});

/*
 * Resizable Extensions
 */

$.ui.plugin.add("resizable", "animate", {

	stop: function( event ) {
		var that = $(this).data("ui-resizable"),
			o = that.options,
			pr = that._proportionallyResizeElements,
			ista = pr.length && (/textarea/i).test(pr[0].nodeName),
			soffseth = ista && $.ui.hasScroll(pr[0], "left") /* TODO - jump height */ ? 0 : that.sizeDiff.height,
			soffsetw = ista ? 0 : that.sizeDiff.width,
			style = { width: (that.size.width - soffsetw), height: (that.size.height - soffseth) },
			left = (parseInt(that.element.css("left"), 10) + (that.position.left - that.originalPosition.left)) || null,
			top = (parseInt(that.element.css("top"), 10) + (that.position.top - that.originalPosition.top)) || null;

		that.element.animate(
			$.extend(style, top && left ? { top: top, left: left } : {}), {
				duration: o.animateDuration,
				easing: o.animateEasing,
				step: function() {

					var data = {
						width: parseInt(that.element.css("width"), 10),
						height: parseInt(that.element.css("height"), 10),
						top: parseInt(that.element.css("top"), 10),
						left: parseInt(that.element.css("left"), 10)
					};

					if (pr && pr.length) {
						$(pr[0]).css({ width: data.width, height: data.height });
					}

					// propagating resize, and updating values for each animation step
					that._updateCache(data);
					that._propagate("resize", event);

				}
			}
		);
	}

});

$.ui.plugin.add("resizable", "containment", {

	start: function() {
		var element, p, co, ch, cw, width, height,
			that = $(this).data("ui-resizable"),
			o = that.options,
			el = that.element,
			oc = o.containment,
			ce = (oc instanceof $) ? oc.get(0) : (/parent/.test(oc)) ? el.parent().get(0) : oc;

		if (!ce) {
			return;
		}

		that.containerElement = $(ce);

		if (/document/.test(oc) || oc === document) {
			that.containerOffset = { left: 0, top: 0 };
			that.containerPosition = { left: 0, top: 0 };

			that.parentData = {
				element: $(document), left: 0, top: 0,
				width: $(document).width(), height: $(document).height() || document.body.parentNode.scrollHeight
			};
		}

		// i'm a node, so compute top, left, right, bottom
		else {
			element = $(ce);
			p = [];
			$([ "Top", "Right", "Left", "Bottom" ]).each(function(i, name) { p[i] = num(element.css("padding" + name)); });

			that.containerOffset = element.offset();
			that.containerPosition = element.position();
			that.containerSize = { height: (element.innerHeight() - p[3]), width: (element.innerWidth() - p[1]) };

			co = that.containerOffset;
			ch = that.containerSize.height;
			cw = that.containerSize.width;
			width = ($.ui.hasScroll(ce, "left") ? ce.scrollWidth : cw );
			height = ($.ui.hasScroll(ce) ? ce.scrollHeight : ch);

			that.parentData = {
				element: ce, left: co.left, top: co.top, width: width, height: height
			};
		}
	},

	resize: function( event ) {
		var woset, hoset, isParent, isOffsetRelative,
			that = $(this).data("ui-resizable"),
			o = that.options,
			co = that.containerOffset, cp = that.position,
			pRatio = that._aspectRatio || event.shiftKey,
			cop = { top:0, left:0 }, ce = that.containerElement;

		if (ce[0] !== document && (/static/).test(ce.css("position"))) {
			cop = co;
		}

		if (cp.left < (that._helper ? co.left : 0)) {
			that.size.width = that.size.width + (that._helper ? (that.position.left - co.left) : (that.position.left - cop.left));
			if (pRatio) {
				that.size.height = that.size.width / that.aspectRatio;
			}
			that.position.left = o.helper ? co.left : 0;
		}

		if (cp.top < (that._helper ? co.top : 0)) {
			that.size.height = that.size.height + (that._helper ? (that.position.top - co.top) : that.position.top);
			if (pRatio) {
				that.size.width = that.size.height * that.aspectRatio;
			}
			that.position.top = that._helper ? co.top : 0;
		}

		that.offset.left = that.parentData.left+that.position.left;
		that.offset.top = that.parentData.top+that.position.top;

		woset = Math.abs( (that._helper ? that.offset.left - cop.left : (that.offset.left - cop.left)) + that.sizeDiff.width );
		hoset = Math.abs( (that._helper ? that.offset.top - cop.top : (that.offset.top - co.top)) + that.sizeDiff.height );

		isParent = that.containerElement.get(0) === that.element.parent().get(0);
		isOffsetRelative = /relative|absolute/.test(that.containerElement.css("position"));

		if(isParent && isOffsetRelative) {
			woset -= that.parentData.left;
		}

		if (woset + that.size.width >= that.parentData.width) {
			that.size.width = that.parentData.width - woset;
			if (pRatio) {
				that.size.height = that.size.width / that.aspectRatio;
			}
		}

		if (hoset + that.size.height >= that.parentData.height) {
			that.size.height = that.parentData.height - hoset;
			if (pRatio) {
				that.size.width = that.size.height * that.aspectRatio;
			}
		}
	},

	stop: function(){
		var that = $(this).data("ui-resizable"),
			o = that.options,
			co = that.containerOffset,
			cop = that.containerPosition,
			ce = that.containerElement,
			helper = $(that.helper),
			ho = helper.offset(),
			w = helper.outerWidth() - that.sizeDiff.width,
			h = helper.outerHeight() - that.sizeDiff.height;

		if (that._helper && !o.animate && (/relative/).test(ce.css("position"))) {
			$(this).css({ left: ho.left - cop.left - co.left, width: w, height: h });
		}

		if (that._helper && !o.animate && (/static/).test(ce.css("position"))) {
			$(this).css({ left: ho.left - cop.left - co.left, width: w, height: h });
		}

	}
});

$.ui.plugin.add("resizable", "alsoResize", {

	start: function () {
		var that = $(this).data("ui-resizable"),
			o = that.options,
			_store = function (exp) {
				$(exp).each(function() {
					var el = $(this);
					el.data("ui-resizable-alsoresize", {
						width: parseInt(el.width(), 10), height: parseInt(el.height(), 10),
						left: parseInt(el.css("left"), 10), top: parseInt(el.css("top"), 10)
					});
				});
			};

		if (typeof(o.alsoResize) === "object" && !o.alsoResize.parentNode) {
			if (o.alsoResize.length) { o.alsoResize = o.alsoResize[0]; _store(o.alsoResize); }
			else { $.each(o.alsoResize, function (exp) { _store(exp); }); }
		}else{
			_store(o.alsoResize);
		}
	},

	resize: function (event, ui) {
		var that = $(this).data("ui-resizable"),
			o = that.options,
			os = that.originalSize,
			op = that.originalPosition,
			delta = {
				height: (that.size.height - os.height) || 0, width: (that.size.width - os.width) || 0,
				top: (that.position.top - op.top) || 0, left: (that.position.left - op.left) || 0
			},

			_alsoResize = function (exp, c) {
				$(exp).each(function() {
					var el = $(this), start = $(this).data("ui-resizable-alsoresize"), style = {},
						css = c && c.length ? c : el.parents(ui.originalElement[0]).length ? ["width", "height"] : ["width", "height", "top", "left"];

					$.each(css, function (i, prop) {
						var sum = (start[prop]||0) + (delta[prop]||0);
						if (sum && sum >= 0) {
							style[prop] = sum || null;
						}
					});

					el.css(style);
				});
			};

		if (typeof(o.alsoResize) === "object" && !o.alsoResize.nodeType) {
			$.each(o.alsoResize, function (exp, c) { _alsoResize(exp, c); });
		}else{
			_alsoResize(o.alsoResize);
		}
	},

	stop: function () {
		$(this).removeData("resizable-alsoresize");
	}
});

$.ui.plugin.add("resizable", "ghost", {

	start: function() {

		var that = $(this).data("ui-resizable"), o = that.options, cs = that.size;

		that.ghost = that.originalElement.clone();
		that.ghost
			.css({ opacity: 0.25, display: "block", position: "relative", height: cs.height, width: cs.width, margin: 0, left: 0, top: 0 })
			.addClass("ui-resizable-ghost")
			.addClass(typeof o.ghost === "string" ? o.ghost : "");

		that.ghost.appendTo(that.helper);

	},

	resize: function(){
		var that = $(this).data("ui-resizable");
		if (that.ghost) {
			that.ghost.css({ position: "relative", height: that.size.height, width: that.size.width });
		}
	},

	stop: function() {
		var that = $(this).data("ui-resizable");
		if (that.ghost && that.helper) {
			that.helper.get(0).removeChild(that.ghost.get(0));
		}
	}

});

$.ui.plugin.add("resizable", "grid", {

	resize: function() {
		var that = $(this).data("ui-resizable"),
			o = that.options,
			cs = that.size,
			os = that.originalSize,
			op = that.originalPosition,
			a = that.axis,
			grid = typeof o.grid === "number" ? [o.grid, o.grid] : o.grid,
			gridX = (grid[0]||1),
			gridY = (grid[1]||1),
			ox = Math.round((cs.width - os.width) / gridX) * gridX,
			oy = Math.round((cs.height - os.height) / gridY) * gridY,
			newWidth = os.width + ox,
			newHeight = os.height + oy,
			isMaxWidth = o.maxWidth && (o.maxWidth < newWidth),
			isMaxHeight = o.maxHeight && (o.maxHeight < newHeight),
			isMinWidth = o.minWidth && (o.minWidth > newWidth),
			isMinHeight = o.minHeight && (o.minHeight > newHeight);

		o.grid = grid;

		if (isMinWidth) {
			newWidth = newWidth + gridX;
		}
		if (isMinHeight) {
			newHeight = newHeight + gridY;
		}
		if (isMaxWidth) {
			newWidth = newWidth - gridX;
		}
		if (isMaxHeight) {
			newHeight = newHeight - gridY;
		}

		if (/^(se|s|e)$/.test(a)) {
			that.size.width = newWidth;
			that.size.height = newHeight;
		} else if (/^(ne)$/.test(a)) {
			that.size.width = newWidth;
			that.size.height = newHeight;
			that.position.top = op.top - oy;
		} else if (/^(sw)$/.test(a)) {
			that.size.width = newWidth;
			that.size.height = newHeight;
			that.position.left = op.left - ox;
		} else {
			that.size.width = newWidth;
			that.size.height = newHeight;
			that.position.top = op.top - oy;
			that.position.left = op.left - ox;
		}
	}

});

})(jQuery);




/*!
 * jQuery UI Sortable @VERSION
 * http://jqueryui.com
 *
 * Copyright 2013 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/sortable/
 */
(function( $, undefined ) {

$.widget("ui.sortable", $.ui.mouse, {
	version: "@VERSION",
	widgetEventPrefix: "sort",
	ready: false,
	options: {
		appendTo: "parent",
		axis: false,
		connectWith: false,
		containment: false,
		cursor: "auto",
		cursorAt: false,
		dropOnEmpty: true,
		forcePlaceholderSize: false,
		forceHelperSize: false,
		grid: false,
		handle: false,
		helper: "original",
		items: "> *",
		opacity: false,
		placeholder: false,
		revert: false,
		scroll: true,
		scrollSensitivity: 20,
		scrollSpeed: 20,
		scope: "default",
		tolerance: "intersect",
		zIndex: 1000,

		// callbacks
		activate: null,
		beforeStop: null,
		change: null,
		deactivate: null,
		out: null,
		over: null,
		receive: null,
		remove: null,
		sort: null,
		start: null,
		stop: null,
		update: null
	},

	_isOverAxis: function( x, reference, size ) {
		return ( x >= reference ) && ( x < ( reference + size ) );
	},

	_isFloating: function( item ) {
		return (/left|right/).test(item.css("float")) || (/inline|table-cell/).test(item.css("display"));
	},

	_create: function() {

		var o = this.options;
		this.containerCache = {};
		this.element.addClass("ui-sortable");

		//Get the items
		this.refresh();

		//Let's determine if the items are being displayed horizontally
		this.floating = this.items.length ? o.axis === "x" || this._isFloating(this.items[0].item) : false;

		//Let's determine the parent's offset
		this.offset = this.element.offset();

		//Initialize mouse events for interaction
		this._mouseInit();

		//We're ready to go
		this.ready = true;

	},

	_destroy: function() {
		this.element
			.removeClass("ui-sortable ui-sortable-disabled");
		this._mouseDestroy();

		for ( var i = this.items.length - 1; i >= 0; i-- ) {
			this.items[i].item.removeData(this.widgetName + "-item");
		}

		return this;
	},

	_mouseCapture: function(event, overrideHandle) {
		var currentItem = null,
			validHandle = false,
			that = this;

		if (this.reverting) {
			return false;
		}

		if(this.options.disabled || this.options.type === "static") {
			return false;
		}

		//We have to refresh the items data once first
		this._refreshItems(event);

		//Find out if the clicked node (or one of its parents) is a actual item in this.items
		$(event.target).parents().each(function() {
			if($.data(this, that.widgetName + "-item") === that) {
				currentItem = $(this);
				return false;
			}
		});
		if($.data(event.target, that.widgetName + "-item") === that) {
			currentItem = $(event.target);
		}

		if(!currentItem) {
			return false;
		}
		if(this.options.handle && !overrideHandle) {
			$(this.options.handle, currentItem).find("*").addBack().each(function() {
				if(this === event.target) {
					validHandle = true;
				}
			});
			if(!validHandle) {
				return false;
			}
		}

		this.currentItem = currentItem;
		this._removeCurrentsFromItems();
		return true;

	},

	_mouseStart: function(event, overrideHandle, noActivation) {

		var i, body,
			o = this.options;

		this.currentContainer = this;

		//We only need to call refreshPositions, because the refreshItems call has been moved to mouseCapture
		this.refreshPositions();

		//Create and append the visible helper
		this.helper = this._createHelper(event);

		//Cache the helper size
		this._cacheHelperProportions();

		/*
		 * - Position generation -
		 * This block generates everything position related - it's the core of draggables.
		 */

		//Cache the margins of the original element
		this._cacheMargins();

		//Get the next scrolling parent
		this.scrollParent = this.helper.scrollParent();

		//The element's absolute position on the page minus margins
		this.offset = this.currentItem.offset();
		this.offset = {
			top: this.offset.top - this.margins.top,
			left: this.offset.left - this.margins.left
		};

		$.extend(this.offset, {
			click: { //Where the click happened, relative to the element
				left: event.pageX - this.offset.left,
				top: event.pageY - this.offset.top
			},
			parent: this._getParentOffset(),
			relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
		});

		// Only after we got the offset, we can change the helper's position to absolute
		// TODO: Still need to figure out a way to make relative sorting possible
		this.helper.css("position", "absolute");
		this.cssPosition = this.helper.css("position");

		//Generate the original position
		this.originalPosition = this._generatePosition(event);
		this.originalPageX = event.pageX;
		this.originalPageY = event.pageY;

		//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
		(o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));

		//Cache the former DOM position
		this.domPosition = { prev: this.currentItem.prev()[0], parent: this.currentItem.parent()[0] };

		//If the helper is not the original, hide the original so it's not playing any role during the drag, won't cause anything bad this way
		if(this.helper[0] !== this.currentItem[0]) {
			this.currentItem.hide();
		}

		//Create the placeholder
		this._createPlaceholder();

		//Set a containment if given in the options
		if(o.containment) {
			this._setContainment();
		}

		if( o.cursor && o.cursor !== "auto" ) { // cursor option
			body = this.document.find( "body" );

			// support: IE
			this.storedCursor = body.css( "cursor" );
			body.css( "cursor", o.cursor );

			this.storedStylesheet = $( "<style>*{ cursor: "+o.cursor+" !important; }</style>" ).appendTo( body );
		}

		if(o.opacity) { // opacity option
			if (this.helper.css("opacity")) {
				this._storedOpacity = this.helper.css("opacity");
			}
			this.helper.css("opacity", o.opacity);
		}

		if(o.zIndex) { // zIndex option
			if (this.helper.css("zIndex")) {
				this._storedZIndex = this.helper.css("zIndex");
			}
			this.helper.css("zIndex", o.zIndex);
		}

		//Prepare scrolling
		if(this.scrollParent[0] !== document && this.scrollParent[0].tagName !== "HTML") {
			this.overflowOffset = this.scrollParent.offset();
		}

		//Call callbacks
		this._trigger("start", event, this._uiHash());

		//Recache the helper size
		if(!this._preserveHelperProportions) {
			this._cacheHelperProportions();
		}


		//Post "activate" events to possible containers
		if( !noActivation ) {
			for ( i = this.containers.length - 1; i >= 0; i-- ) {
				this.containers[ i ]._trigger( "activate", event, this._uiHash( this ) );
			}
		}

		//Prepare possible droppables
		if($.ui.ddmanager) {
			$.ui.ddmanager.current = this;
		}

		if ($.ui.ddmanager && !o.dropBehaviour) {
			$.ui.ddmanager.prepareOffsets(this, event);
		}

		this.dragging = true;

		this.helper.addClass("ui-sortable-helper");
		this._mouseDrag(event); //Execute the drag once - this causes the helper not to be visible before getting its correct position
		return true;

	},

	_mouseDrag: function(event) {
		var i, item, itemElement, intersection,
			o = this.options,
			scrolled = false;

		//Compute the helpers position
		this.position = this._generatePosition(event);
		this.positionAbs = this._convertPositionTo("absolute");

		if (!this.lastPositionAbs) {
			this.lastPositionAbs = this.positionAbs;
		}

		//Do scrolling
		if(this.options.scroll) {
			if(this.scrollParent[0] !== document && this.scrollParent[0].tagName !== "HTML") {

				if((this.overflowOffset.top + this.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity) {
					this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed;
				} else if(event.pageY - this.overflowOffset.top < o.scrollSensitivity) {
					this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;
				}

				if((this.overflowOffset.left + this.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity) {
					this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed;
				} else if(event.pageX - this.overflowOffset.left < o.scrollSensitivity) {
					this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;
				}

			} else {

				if(event.pageY - $(document).scrollTop() < o.scrollSensitivity) {
					scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
				} else if($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {
					scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
				}

				if(event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {
					scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
				} else if($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {
					scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
				}

			}

			if(scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {
				$.ui.ddmanager.prepareOffsets(this, event);
			}
		}

		//Regenerate the absolute position used for position checks
		this.positionAbs = this._convertPositionTo("absolute");

		//Set the helper position
		if(!this.options.axis || this.options.axis !== "y") {
			this.helper[0].style.left = this.position.left+"px";
		}
		if(!this.options.axis || this.options.axis !== "x") {
			this.helper[0].style.top = this.position.top+"px";
		}

		//Rearrange
		for (i = this.items.length - 1; i >= 0; i--) {

			//Cache variables and intersection, continue if no intersection
			item = this.items[i];
			itemElement = item.item[0];
			intersection = this._intersectsWithPointer(item);
			if (!intersection) {
				continue;
			}

			// Only put the placeholder inside the current Container, skip all
			// items from other containers. This works because when moving
			// an item from one container to another the
			// currentContainer is switched before the placeholder is moved.
			//
			// Without this, moving items in "sub-sortables" can cause
			// the placeholder to jitter beetween the outer and inner container.
			if (item.instance !== this.currentContainer) {
				continue;
			}

			// cannot intersect with itself
			// no useless actions that have been done before
			// no action if the item moved is the parent of the item checked
			if (itemElement !== this.currentItem[0] &&
				this.placeholder[intersection === 1 ? "next" : "prev"]()[0] !== itemElement &&
				!$.contains(this.placeholder[0], itemElement) &&
				(this.options.type === "semi-dynamic" ? !$.contains(this.element[0], itemElement) : true)
			) {

				this.direction = intersection === 1 ? "down" : "up";

				if (this.options.tolerance === "pointer" || this._intersectsWithSides(item)) {
					this._rearrange(event, item);
				} else {
					break;
				}

				this._trigger("change", event, this._uiHash());
				break;
			}
		}

		//Post events to containers
		this._contactContainers(event);

		//Interconnect with droppables
		if($.ui.ddmanager) {
			$.ui.ddmanager.drag(this, event);
		}

		//Call callbacks
		this._trigger("sort", event, this._uiHash());

		this.lastPositionAbs = this.positionAbs;
		return false;

	},

	_mouseStop: function(event, noPropagation) {

		if(!event) {
			return;
		}

		//If we are using droppables, inform the manager about the drop
		if ($.ui.ddmanager && !this.options.dropBehaviour) {
			$.ui.ddmanager.drop(this, event);
		}

		if(this.options.revert) {
			var that = this,
				cur = this.placeholder.offset(),
				axis = this.options.axis,
				animation = {};

			if ( !axis || axis === "x" ) {
				animation.left = cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollLeft);
			}
			if ( !axis || axis === "y" ) {
				animation.top = cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollTop);
			}
			this.reverting = true;
			$(this.helper).animate( animation, parseInt(this.options.revert, 10) || 500, function() {
				that._clear(event);
			});
		} else {
			this._clear(event, noPropagation);
		}

		return false;

	},

	cancel: function() {

		if(this.dragging) {

			this._mouseUp({ target: null });

			if(this.options.helper === "original") {
				this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
			} else {
				this.currentItem.show();
			}

			//Post deactivating events to containers
			for (var i = this.containers.length - 1; i >= 0; i--){
				this.containers[i]._trigger("deactivate", null, this._uiHash(this));
				if(this.containers[i].containerCache.over) {
					this.containers[i]._trigger("out", null, this._uiHash(this));
					this.containers[i].containerCache.over = 0;
				}
			}

		}

		if (this.placeholder) {
			//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
			if(this.placeholder[0].parentNode) {
				this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
			}
			if(this.options.helper !== "original" && this.helper && this.helper[0].parentNode) {
				this.helper.remove();
			}

			$.extend(this, {
				helper: null,
				dragging: false,
				reverting: false,
				_noFinalSort: null
			});

			if(this.domPosition.prev) {
				$(this.domPosition.prev).after(this.currentItem);
			} else {
				$(this.domPosition.parent).prepend(this.currentItem);
			}
		}

		return this;

	},

	serialize: function(o) {

		var items = this._getItemsAsjQuery(o && o.connected),
			str = [];
		o = o || {};

		$(items).each(function() {
			var res = ($(o.item || this).attr(o.attribute || "id") || "").match(o.expression || (/(.+)[\-=_](.+)/));
			if (res) {
				str.push((o.key || res[1]+"[]")+"="+(o.key && o.expression ? res[1] : res[2]));
			}
		});

		if(!str.length && o.key) {
			str.push(o.key + "=");
		}

		return str.join("&");

	},

	toArray: function(o) {

		var items = this._getItemsAsjQuery(o && o.connected),
			ret = [];

		o = o || {};

		items.each(function() { ret.push($(o.item || this).attr(o.attribute || "id") || ""); });
		return ret;

	},

	/* Be careful with the following core functions */
	_intersectsWith: function(item) {

		var x1 = this.positionAbs.left,
			x2 = x1 + this.helperProportions.width,
			y1 = this.positionAbs.top,
			y2 = y1 + this.helperProportions.height,
			l = item.left,
			r = l + item.width,
			t = item.top,
			b = t + item.height,
			dyClick = this.offset.click.top,
			dxClick = this.offset.click.left,
			isOverElementHeight = ( this.options.axis === "x" ) || ( ( y1 + dyClick ) > t && ( y1 + dyClick ) < b ),
			isOverElementWidth = ( this.options.axis === "y" ) || ( ( x1 + dxClick ) > l && ( x1 + dxClick ) < r ),
			isOverElement = isOverElementHeight && isOverElementWidth;

		if ( this.options.tolerance === "pointer" ||
			this.options.forcePointerForContainers ||
			(this.options.tolerance !== "pointer" && this.helperProportions[this.floating ? "width" : "height"] > item[this.floating ? "width" : "height"])
		) {
			return isOverElement;
		} else {

			return (l < x1 + (this.helperProportions.width / 2) && // Right Half
				x2 - (this.helperProportions.width / 2) < r && // Left Half
				t < y1 + (this.helperProportions.height / 2) && // Bottom Half
				y2 - (this.helperProportions.height / 2) < b ); // Top Half

		}
	},

	_intersectsWithPointer: function(item) {

		var isOverElementHeight = (this.options.axis === "x") || this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height),
			isOverElementWidth = (this.options.axis === "y") || this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width),
			isOverElement = isOverElementHeight && isOverElementWidth,
			verticalDirection = this._getDragVerticalDirection(),
			horizontalDirection = this._getDragHorizontalDirection();

		if (!isOverElement) {
			return false;
		}

		return this.floating ?
			( ((horizontalDirection && horizontalDirection === "right") || verticalDirection === "down") ? 2 : 1 )
			: ( verticalDirection && (verticalDirection === "down" ? 2 : 1) );

	},

	_intersectsWithSides: function(item) {

		var isOverBottomHalf = this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + (item.height/2), item.height),
			isOverRightHalf = this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + (item.width/2), item.width),
			verticalDirection = this._getDragVerticalDirection(),
			horizontalDirection = this._getDragHorizontalDirection();

		if (this.floating && horizontalDirection) {
			return ((horizontalDirection === "right" && isOverRightHalf) || (horizontalDirection === "left" && !isOverRightHalf));
		} else {
			return verticalDirection && ((verticalDirection === "down" && isOverBottomHalf) || (verticalDirection === "up" && !isOverBottomHalf));
		}

	},

	_getDragVerticalDirection: function() {
		var delta = this.positionAbs.top - this.lastPositionAbs.top;
		return delta !== 0 && (delta > 0 ? "down" : "up");
	},

	_getDragHorizontalDirection: function() {
		var delta = this.positionAbs.left - this.lastPositionAbs.left;
		return delta !== 0 && (delta > 0 ? "right" : "left");
	},

	refresh: function(event) {
		this._refreshItems(event);
		this.refreshPositions();
		return this;
	},

	_connectWith: function() {
		var options = this.options;
		return options.connectWith.constructor === String ? [options.connectWith] : options.connectWith;
	},

	_getItemsAsjQuery: function(connected) {

		var i, j, cur, inst,
			items = [],
			queries = [],
			connectWith = this._connectWith();

		if(connectWith && connected) {
			for (i = connectWith.length - 1; i >= 0; i--){
				cur = $(connectWith[i]);
				for ( j = cur.length - 1; j >= 0; j--){
					inst = $.data(cur[j], this.widgetFullName);
					if(inst && inst !== this && !inst.options.disabled) {
						queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), inst]);
					}
				}
			}
		}

		queries.push([$.isFunction(this.options.items) ? this.options.items.call(this.element, null, { options: this.options, item: this.currentItem }) : $(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this]);

		function addItems() {
			items.push( this );
		}
		for (i = queries.length - 1; i >= 0; i--){
			queries[i][0].each( addItems );
		}

		return $(items);

	},

	_removeCurrentsFromItems: function() {

		var list = this.currentItem.find(":data(" + this.widgetName + "-item)");

		this.items = $.grep(this.items, function (item) {
			for (var j=0; j < list.length; j++) {
				if(list[j] === item.item[0]) {
					return false;
				}
			}
			return true;
		});

	},

	_refreshItems: function(event) {

		this.items = [];
		this.containers = [this];

		var i, j, cur, inst, targetData, _queries, item, queriesLength,
			items = this.items,
			queries = [[$.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, { item: this.currentItem }) : $(this.options.items, this.element), this]],
			connectWith = this._connectWith();

		if(connectWith && this.ready) { //Shouldn't be run the first time through due to massive slow-down
			for (i = connectWith.length - 1; i >= 0; i--){
				cur = $(connectWith[i]);
				for (j = cur.length - 1; j >= 0; j--){
					inst = $.data(cur[j], this.widgetFullName);
					if(inst && inst !== this && !inst.options.disabled) {
						queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, { item: this.currentItem }) : $(inst.options.items, inst.element), inst]);
						this.containers.push(inst);
					}
				}
			}
		}

		for (i = queries.length - 1; i >= 0; i--) {
			targetData = queries[i][1];
			_queries = queries[i][0];

			for (j=0, queriesLength = _queries.length; j < queriesLength; j++) {
				item = $(_queries[j]);

				item.data(this.widgetName + "-item", targetData); // Data for target checking (mouse manager)

				items.push({
					item: item,
					instance: targetData,
					width: 0, height: 0,
					left: 0, top: 0
				});
			}
		}

	},

	refreshPositions: function(fast) {

		//This has to be redone because due to the item being moved out/into the offsetParent, the offsetParent's position will change
		if(this.offsetParent && this.helper) {
			this.offset.parent = this._getParentOffset();
		}

		var i, item, t, p;

		for (i = this.items.length - 1; i >= 0; i--){
			item = this.items[i];

			//We ignore calculating positions of all connected containers when we're not over them
			if(item.instance !== this.currentContainer && this.currentContainer && item.item[0] !== this.currentItem[0]) {
				continue;
			}

			t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;

			if (!fast) {
				item.width = t.outerWidth();
				item.height = t.outerHeight();
			}

			p = t.offset();
			item.left = p.left;
			item.top = p.top;
		}

		if(this.options.custom && this.options.custom.refreshContainers) {
			this.options.custom.refreshContainers.call(this);
		} else {
			for (i = this.containers.length - 1; i >= 0; i--){
				p = this.containers[i].element.offset();
				this.containers[i].containerCache.left = p.left;
				this.containers[i].containerCache.top = p.top;
				this.containers[i].containerCache.width	= this.containers[i].element.outerWidth();
				this.containers[i].containerCache.height = this.containers[i].element.outerHeight();
			}
		}

		return this;
	},

	_createPlaceholder: function(that) {
		that = that || this;
		var className,
			o = that.options;

		if(!o.placeholder || o.placeholder.constructor === String) {
			className = o.placeholder;
			o.placeholder = {
				element: function() {

					var nodeName = that.currentItem[0].nodeName.toLowerCase(),
						element = $( "<" + nodeName + ">", that.document[0] )
							.addClass(className || that.currentItem[0].className+" ui-sortable-placeholder")
							.removeClass("ui-sortable-helper");

					if ( nodeName === "tr" ) {
						that.currentItem.children().each(function() {
							$( "<td>&#160;</td>", that.document[0] )
								.attr( "colspan", $( this ).attr( "colspan" ) || 1 )
								.appendTo( element );
						});
					} else if ( nodeName === "img" ) {
						element.attr( "src", that.currentItem.attr( "src" ) );
					}

					if ( !className ) {
						element.css( "visibility", "hidden" );
					}

					return element;
				},
				update: function(container, p) {

					// 1. If a className is set as 'placeholder option, we don't force sizes - the class is responsible for that
					// 2. The option 'forcePlaceholderSize can be enabled to force it even if a class name is specified
					if(className && !o.forcePlaceholderSize) {
						return;
					}

					//If the element doesn't have a actual height by itself (without styles coming from a stylesheet), it receives the inline height from the dragged item
					if(!p.height()) { p.height(that.currentItem.innerHeight() - parseInt(that.currentItem.css("paddingTop")||0, 10) - parseInt(that.currentItem.css("paddingBottom")||0, 10)); }
					if(!p.width()) { p.width(that.currentItem.innerWidth() - parseInt(that.currentItem.css("paddingLeft")||0, 10) - parseInt(that.currentItem.css("paddingRight")||0, 10)); }
				}
			};
		}

		//Create the placeholder
		that.placeholder = $(o.placeholder.element.call(that.element, that.currentItem));

		//Append it after the actual current item
		that.currentItem.after(that.placeholder);

		//Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)
		o.placeholder.update(that, that.placeholder);

	},

	_contactContainers: function(event) {
		var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, cur, nearBottom, floating, axis,
			innermostContainer = null,
			innermostIndex = null;

		// get innermost container that intersects with item
		for (i = this.containers.length - 1; i >= 0; i--) {

			// never consider a container that's located within the item itself
			if($.contains(this.currentItem[0], this.containers[i].element[0])) {
				continue;
			}

			if(this._intersectsWith(this.containers[i].containerCache)) {

				// if we've already found a container and it's more "inner" than this, then continue
				if(innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0])) {
					continue;
				}

				innermostContainer = this.containers[i];
				innermostIndex = i;

			} else {
				// container doesn't intersect. trigger "out" event if necessary
				if(this.containers[i].containerCache.over) {
					this.containers[i]._trigger("out", event, this._uiHash(this));
					this.containers[i].containerCache.over = 0;
				}
			}

		}

		// if no intersecting containers found, return
		if(!innermostContainer) {
			return;
		}

		// move the item into the container if it's not there already
		if(this.containers.length === 1) {
			if (!this.containers[innermostIndex].containerCache.over) {
				this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
				this.containers[innermostIndex].containerCache.over = 1;
			}
		} else {

			//When entering a new container, we will find the item with the least distance and append our item near it
			dist = 10000;
			itemWithLeastDistance = null;
			floating = innermostContainer.floating || this._isFloating(this.currentItem);
			posProperty = floating ? "left" : "top";
			sizeProperty = floating ? "width" : "height";
			axis = floating ? "clientX" : "clientY";

			for (j = this.items.length - 1; j >= 0; j--) {
				if(!$.contains(this.containers[innermostIndex].element[0], this.items[j].item[0])) {
					continue;
				}
				if(this.items[j].item[0] === this.currentItem[0]) {
					continue;
				}

				cur = this.items[j].item.offset()[posProperty];
				nearBottom = false;
				if ( event[ axis ] - cur > this.items[ j ][ sizeProperty ] / 2 ) {
					nearBottom = true;
				}

				if ( Math.abs( event[ axis ] - cur ) < dist ) {
					dist = Math.abs( event[ axis ] - cur );
					itemWithLeastDistance = this.items[ j ];
					this.direction = nearBottom ? "up": "down";
				}
			}

			//Check if dropOnEmpty is enabled
			if(!itemWithLeastDistance && !this.options.dropOnEmpty) {
				return;
			}

			if(this.currentContainer === this.containers[innermostIndex]) {
				return;
			}

			itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true);
			this._trigger("change", event, this._uiHash());
			this.containers[innermostIndex]._trigger("change", event, this._uiHash(this));
			this.currentContainer = this.containers[innermostIndex];

			//Update the placeholder
			this.options.placeholder.update(this.currentContainer, this.placeholder);

			this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
			this.containers[innermostIndex].containerCache.over = 1;
		}


	},

	_createHelper: function(event) {

		var o = this.options,
			helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event, this.currentItem])) : (o.helper === "clone" ? this.currentItem.clone() : this.currentItem);

		//Add the helper to the DOM if that didn't happen already
		if(!helper.parents("body").length) {
			$(o.appendTo !== "parent" ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]);
		}

		if(helper[0] === this.currentItem[0]) {
			this._storedCSS = { width: this.currentItem[0].style.width, height: this.currentItem[0].style.height, position: this.currentItem.css("position"), top: this.currentItem.css("top"), left: this.currentItem.css("left") };
		}

		if(!helper[0].style.width || o.forceHelperSize) {
			helper.width(this.currentItem.width());
		}
		if(!helper[0].style.height || o.forceHelperSize) {
			helper.height(this.currentItem.height());
		}

		return helper;

	},

	_adjustOffsetFromHelper: function(obj) {
		if (typeof obj === "string") {
			obj = obj.split(" ");
		}
		if ($.isArray(obj)) {
			obj = {left: +obj[0], top: +obj[1] || 0};
		}
		if ("left" in obj) {
			this.offset.click.left = obj.left + this.margins.left;
		}
		if ("right" in obj) {
			this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
		}
		if ("top" in obj) {
			this.offset.click.top = obj.top + this.margins.top;
		}
		if ("bottom" in obj) {
			this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
		}
	},

	_getParentOffset: function() {


		//Get the offsetParent and cache its position
		this.offsetParent = this.helper.offsetParent();
		var po = this.offsetParent.offset();

		// This is a special case where we need to modify a offset calculated on start, since the following happened:
		// 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
		// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
		//    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
		if(this.cssPosition === "absolute" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
			po.left += this.scrollParent.scrollLeft();
			po.top += this.scrollParent.scrollTop();
		}

		// This needs to be actually done for all browsers, since pageX/pageY includes this information
		// with an ugly IE fix
		if( this.offsetParent[0] === document.body || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === "html" && $.ui.ie)) {
			po = { top: 0, left: 0 };
		}

		return {
			top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"),10) || 0),
			left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"),10) || 0)
		};

	},

	_getRelativeOffset: function() {

		if(this.cssPosition === "relative") {
			var p = this.currentItem.position();
			return {
				top: p.top - (parseInt(this.helper.css("top"),10) || 0) + this.scrollParent.scrollTop(),
				left: p.left - (parseInt(this.helper.css("left"),10) || 0) + this.scrollParent.scrollLeft()
			};
		} else {
			return { top: 0, left: 0 };
		}

	},

	_cacheMargins: function() {
		this.margins = {
			left: (parseInt(this.currentItem.css("marginLeft"),10) || 0),
			top: (parseInt(this.currentItem.css("marginTop"),10) || 0)
		};
	},

	_cacheHelperProportions: function() {
		this.helperProportions = {
			width: this.helper.outerWidth(),
			height: this.helper.outerHeight()
		};
	},

	_setContainment: function() {

		var ce, co, over,
			o = this.options;
		if(o.containment === "parent") {
			o.containment = this.helper[0].parentNode;
		}
		if(o.containment === "document" || o.containment === "window") {
			this.containment = [
				0 - this.offset.relative.left - this.offset.parent.left,
				0 - this.offset.relative.top - this.offset.parent.top,
				$(o.containment === "document" ? document : window).width() - this.helperProportions.width - this.margins.left,
				($(o.containment === "document" ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
			];
		}

		if(!(/^(document|window|parent)$/).test(o.containment)) {
			ce = $(o.containment)[0];
			co = $(o.containment).offset();
			over = ($(ce).css("overflow") !== "hidden");

			this.containment = [
				co.left + (parseInt($(ce).css("borderLeftWidth"),10) || 0) + (parseInt($(ce).css("paddingLeft"),10) || 0) - this.margins.left,
				co.top + (parseInt($(ce).css("borderTopWidth"),10) || 0) + (parseInt($(ce).css("paddingTop"),10) || 0) - this.margins.top,
				co.left+(over ? Math.max(ce.scrollWidth,ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"),10) || 0) - (parseInt($(ce).css("paddingRight"),10) || 0) - this.helperProportions.width - this.margins.left,
				co.top+(over ? Math.max(ce.scrollHeight,ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"),10) || 0) - (parseInt($(ce).css("paddingBottom"),10) || 0) - this.helperProportions.height - this.margins.top
			];
		}

	},

	_convertPositionTo: function(d, pos) {

		if(!pos) {
			pos = this.position;
		}
		var mod = d === "absolute" ? 1 : -1,
			scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
			scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

		return {
			top: (
				pos.top	+																// The absolute mouse position
				this.offset.relative.top * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.top * mod -											// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod)
			),
			left: (
				pos.left +																// The absolute mouse position
				this.offset.relative.left * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.left * mod	-										// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ) * mod)
			)
		};

	},

	_generatePosition: function(event) {

		var top, left,
			o = this.options,
			pageX = event.pageX,
			pageY = event.pageY,
			scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

		// This is another very weird special case that only happens for relative elements:
		// 1. If the css position is relative
		// 2. and the scroll parent is the document or similar to the offset parent
		// we have to refresh the relative offset during the scroll so there are no jumps
		if(this.cssPosition === "relative" && !(this.scrollParent[0] !== document && this.scrollParent[0] !== this.offsetParent[0])) {
			this.offset.relative = this._getRelativeOffset();
		}

		/*
		 * - Position constraining -
		 * Constrain the position to a mix of grid, containment.
		 */

		if(this.originalPosition) { //If we are not dragging yet, we won't check for options

			if(this.containment) {
				if(event.pageX - this.offset.click.left < this.containment[0]) {
					pageX = this.containment[0] + this.offset.click.left;
				}
				if(event.pageY - this.offset.click.top < this.containment[1]) {
					pageY = this.containment[1] + this.offset.click.top;
				}
				if(event.pageX - this.offset.click.left > this.containment[2]) {
					pageX = this.containment[2] + this.offset.click.left;
				}
				if(event.pageY - this.offset.click.top > this.containment[3]) {
					pageY = this.containment[3] + this.offset.click.top;
				}
			}

			if(o.grid) {
				top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];
				pageY = this.containment ? ( (top - this.offset.click.top >= this.containment[1] && top - this.offset.click.top <= this.containment[3]) ? top : ((top - this.offset.click.top >= this.containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;

				left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];
				pageX = this.containment ? ( (left - this.offset.click.left >= this.containment[0] && left - this.offset.click.left <= this.containment[2]) ? left : ((left - this.offset.click.left >= this.containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
			}

		}

		return {
			top: (
				pageY -																// The absolute mouse position
				this.offset.click.top -													// Click offset (relative to the element)
				this.offset.relative.top	-											// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.top +												// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ))
			),
			left: (
				pageX -																// The absolute mouse position
				this.offset.click.left -												// Click offset (relative to the element)
				this.offset.relative.left	-											// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.left +												// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ))
			)
		};

	},

	_rearrange: function(event, i, a, hardRefresh) {

		a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], (this.direction === "down" ? i.item[0] : i.item[0].nextSibling));

		//Various things done here to improve the performance:
		// 1. we create a setTimeout, that calls refreshPositions
		// 2. on the instance, we have a counter variable, that get's higher after every append
		// 3. on the local scope, we copy the counter variable, and check in the timeout, if it's still the same
		// 4. this lets only the last addition to the timeout stack through
		this.counter = this.counter ? ++this.counter : 1;
		var counter = this.counter;

		this._delay(function() {
			if(counter === this.counter) {
				this.refreshPositions(!hardRefresh); //Precompute after each DOM insertion, NOT on mousemove
			}
		});

	},

	_clear: function(event, noPropagation) {

		this.reverting = false;
		// We delay all events that have to be triggered to after the point where the placeholder has been removed and
		// everything else normalized again
		var i,
			delayedTriggers = [];

		// We first have to update the dom position of the actual currentItem
		// Note: don't do it if the current item is already removed (by a user), or it gets reappended (see #4088)
		if(!this._noFinalSort && this.currentItem.parent().length) {
			this.placeholder.before(this.currentItem);
		}
		this._noFinalSort = null;

		if(this.helper[0] === this.currentItem[0]) {
			for(i in this._storedCSS) {
				if(this._storedCSS[i] === "auto" || this._storedCSS[i] === "static") {
					this._storedCSS[i] = "";
				}
			}
			this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
		} else {
			this.currentItem.show();
		}

		if(this.fromOutside && !noPropagation) {
			delayedTriggers.push(function(event) { this._trigger("receive", event, this._uiHash(this.fromOutside)); });
		}
		if((this.fromOutside || this.domPosition.prev !== this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent !== this.currentItem.parent()[0]) && !noPropagation) {
			delayedTriggers.push(function(event) { this._trigger("update", event, this._uiHash()); }); //Trigger update callback if the DOM position has changed
		}

		// Check if the items Container has Changed and trigger appropriate
		// events.
		if (this !== this.currentContainer) {
			if(!noPropagation) {
				delayedTriggers.push(function(event) { this._trigger("remove", event, this._uiHash()); });
				delayedTriggers.push((function(c) { return function(event) { c._trigger("receive", event, this._uiHash(this)); };  }).call(this, this.currentContainer));
				delayedTriggers.push((function(c) { return function(event) { c._trigger("update", event, this._uiHash(this));  }; }).call(this, this.currentContainer));
			}
		}


		//Post events to containers
		function delayEvent( type, instance, container ) {
			return function( event ) {
				container._trigger( type, event, instance._uiHash( instance ) );
			};
		}
		for (i = this.containers.length - 1; i >= 0; i--){
			if (!noPropagation) {
				delayedTriggers.push( delayEvent( "deactivate", this, this.containers[ i ] ) );
			}
			if(this.containers[i].containerCache.over) {
				delayedTriggers.push( delayEvent( "out", this, this.containers[ i ] ) );
				this.containers[i].containerCache.over = 0;
			}
		}

		//Do what was originally in plugins
		if ( this.storedCursor ) {
			this.document.find( "body" ).css( "cursor", this.storedCursor );
			this.storedStylesheet.remove();
		}
		if(this._storedOpacity) {
			this.helper.css("opacity", this._storedOpacity);
		}
		if(this._storedZIndex) {
			this.helper.css("zIndex", this._storedZIndex === "auto" ? "" : this._storedZIndex);
		}

		this.dragging = false;
		if(this.cancelHelperRemoval) {
			if(!noPropagation) {
				this._trigger("beforeStop", event, this._uiHash());
				for (i=0; i < delayedTriggers.length; i++) {
					delayedTriggers[i].call(this, event);
				} //Trigger all delayed events
				this._trigger("stop", event, this._uiHash());
			}

			this.fromOutside = false;
			return false;
		}

		if(!noPropagation) {
			this._trigger("beforeStop", event, this._uiHash());
		}

		//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
		this.placeholder[0].parentNode.removeChild(this.placeholder[0]);

		if(this.helper[0] !== this.currentItem[0]) {
			this.helper.remove();
		}
		this.helper = null;

		if(!noPropagation) {
			for (i=0; i < delayedTriggers.length; i++) {
				delayedTriggers[i].call(this, event);
			} //Trigger all delayed events
			this._trigger("stop", event, this._uiHash());
		}

		this.fromOutside = false;
		return true;

	},

	_trigger: function() {
		if ($.Widget.prototype._trigger.apply(this, arguments) === false) {
			this.cancel();
		}
	},

	_uiHash: function(_inst) {
		var inst = _inst || this;
		return {
			helper: inst.helper,
			placeholder: inst.placeholder || $([]),
			position: inst.position,
			originalPosition: inst.originalPosition,
			offset: inst.positionAbs,
			item: inst.currentItem,
			sender: _inst ? _inst.element : null
		};
	}

});

})(jQuery);




(function( $, undefined ) {

var lastActive, startXPos, startYPos, clickDragged,
	baseClasses = "ui-button ui-widget ui-state-default ui-corner-all",
	stateClasses = "ui-state-hover ui-state-active ",
	typeClasses = "ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only",
	formResetHandler = function() {
		var form = $( this );
		setTimeout(function() {
			form.find( ":ui-button" ).button( "refresh" );
		}, 1 );
	},
	radioGroup = function( radio ) {
		var name = radio.name,
			form = radio.form,
			radios = $( [] );
		if ( name ) {
			name = name.replace( /'/g, "\\'" );
			if ( form ) {
				radios = $( form ).find( "[name='" + name + "']" );
			} else {
				radios = $( "[name='" + name + "']", radio.ownerDocument )
					.filter(function() {
						return !this.form;
					});
			}
		}
		return radios;
	};

$.widget( "ui.button", {
	version: "1.10.3",
	defaultElement: "<button>",
	options: {
		disabled: null,
		text: true,
		label: null,
		icons: {
			primary: null,
			secondary: null
		}
	},
	_create: function() {
		this.element.closest( "form" )
			.unbind( "reset" + this.eventNamespace )
			.bind( "reset" + this.eventNamespace, formResetHandler );

		if ( typeof this.options.disabled !== "boolean" ) {
			this.options.disabled = !!this.element.prop( "disabled" );
		} else {
			this.element.prop( "disabled", this.options.disabled );
		}

		this._determineButtonType();
		this.hasTitle = !!this.buttonElement.attr( "title" );

		var that = this,
			options = this.options,
			toggleButton = this.type === "checkbox" || this.type === "radio",
			activeClass = !toggleButton ? "ui-state-active" : "",
			focusClass = "ui-state-focus";

		if ( options.label === null ) {
			options.label = (this.type === "input" ? this.buttonElement.val() : this.buttonElement.html());
		}

		this._hoverable( this.buttonElement );

		this.buttonElement
			.addClass( baseClasses )
			.attr( "role", "button" )
			.bind( "mouseenter" + this.eventNamespace, function() {
				if ( options.disabled ) {
					return;
				}
				if ( this === lastActive ) {
					$( this ).addClass( "ui-state-active" );
				}
			})
			.bind( "mouseleave" + this.eventNamespace, function() {
				if ( options.disabled ) {
					return;
				}
				$( this ).removeClass( activeClass );
			})
			.bind( "click" + this.eventNamespace, function( event ) {
				if ( options.disabled ) {
					event.preventDefault();
					event.stopImmediatePropagation();
				}
			});

		this.element
			.bind( "focus" + this.eventNamespace, function() {
				// no need to check disabled, focus won't be triggered anyway
				that.buttonElement.addClass( focusClass );
			})
			.bind( "blur" + this.eventNamespace, function() {
				that.buttonElement.removeClass( focusClass );
			});

		if ( toggleButton ) {
			this.element.bind( "change" + this.eventNamespace, function() {
				if ( clickDragged ) {
					return;
				}
				that.refresh();
			});
			// if mouse moves between mousedown and mouseup (drag) set clickDragged flag
			// prevents issue where button state changes but checkbox/radio checked state
			// does not in Firefox (see ticket #6970)
			this.buttonElement
				.bind( "mousedown" + this.eventNamespace, function( event ) {
					if ( options.disabled ) {
						return;
					}
					clickDragged = false;
					startXPos = event.pageX;
					startYPos = event.pageY;
				})
				.bind( "mouseup" + this.eventNamespace, function( event ) {
					if ( options.disabled ) {
						return;
					}
					if ( startXPos !== event.pageX || startYPos !== event.pageY ) {
						clickDragged = true;
					}
			});
		}

		if ( this.type === "checkbox" ) {
			this.buttonElement.bind( "click" + this.eventNamespace, function() {
				if ( options.disabled || clickDragged ) {
					return false;
				}
			});
		} else if ( this.type === "radio" ) {
			this.buttonElement.bind( "click" + this.eventNamespace, function() {
				if ( options.disabled || clickDragged ) {
					return false;
				}
				$( this ).addClass( "ui-state-active" );
				that.buttonElement.attr( "aria-pressed", "true" );

				var radio = that.element[ 0 ];
				radioGroup( radio )
					.not( radio )
					.map(function() {
						return $( this ).button( "widget" )[ 0 ];
					})
					.removeClass( "ui-state-active" )
					.attr( "aria-pressed", "false" );
			});
		} else {
			this.buttonElement
				.bind( "mousedown" + this.eventNamespace, function() {
					if ( options.disabled ) {
						return false;
					}
					$( this ).addClass( "ui-state-active" );
					lastActive = this;
					that.document.one( "mouseup", function() {
						lastActive = null;
					});
				})
				.bind( "mouseup" + this.eventNamespace, function() {
					if ( options.disabled ) {
						return false;
					}
					$( this ).removeClass( "ui-state-active" );
				})
				.bind( "keydown" + this.eventNamespace, function(event) {
					if ( options.disabled ) {
						return false;
					}
					if ( event.keyCode === $.ui.keyCode.SPACE || event.keyCode === $.ui.keyCode.ENTER ) {
						$( this ).addClass( "ui-state-active" );
					}
				})
				// see #8559, we bind to blur here in case the button element loses
				// focus between keydown and keyup, it would be left in an "active" state
				.bind( "keyup" + this.eventNamespace + " blur" + this.eventNamespace, function() {
					$( this ).removeClass( "ui-state-active" );
				});

			if ( this.buttonElement.is("a") ) {
				this.buttonElement.keyup(function(event) {
					if ( event.keyCode === $.ui.keyCode.SPACE ) {
						// TODO pass through original event correctly (just as 2nd argument doesn't work)
						$( this ).click();
					}
				});
			}
		}

		// TODO: pull out $.Widget's handling for the disabled option into
		// $.Widget.prototype._setOptionDisabled so it's easy to proxy and can
		// be overridden by individual plugins
		this._setOption( "disabled", options.disabled );
		this._resetButton();
	},

	_determineButtonType: function() {
		var ancestor, labelSelector, checked;

		if ( this.element.is("[type=checkbox]") ) {
			this.type = "checkbox";
		} else if ( this.element.is("[type=radio]") ) {
			this.type = "radio";
		} else if ( this.element.is("input") ) {
			this.type = "input";
		} else {
			this.type = "button";
		}

		if ( this.type === "checkbox" || this.type === "radio" ) {
			// we don't search against the document in case the element
			// is disconnected from the DOM
			ancestor = this.element.parents().last();
			labelSelector = "label[for='" + this.element.attr("id") + "']";
			this.buttonElement = ancestor.find( labelSelector );
			if ( !this.buttonElement.length ) {
				ancestor = ancestor.length ? ancestor.siblings() : this.element.siblings();
				this.buttonElement = ancestor.filter( labelSelector );
				if ( !this.buttonElement.length ) {
					this.buttonElement = ancestor.find( labelSelector );
				}
			}
			this.element.addClass( "ui-helper-hidden-accessible" );

			checked = this.element.is( ":checked" );
			if ( checked ) {
				this.buttonElement.addClass( "ui-state-active" );
			}
			this.buttonElement.prop( "aria-pressed", checked );
		} else {
			this.buttonElement = this.element;
		}
	},

	widget: function() {
		return this.buttonElement;
	},

	_destroy: function() {
		this.element
			.removeClass( "ui-helper-hidden-accessible" );
		this.buttonElement
			.removeClass( baseClasses + " " + stateClasses + " " + typeClasses )
			.removeAttr( "role" )
			.removeAttr( "aria-pressed" )
			.html( this.buttonElement.find(".ui-button-text").html() );

		if ( !this.hasTitle ) {
			this.buttonElement.removeAttr( "title" );
		}
	},

	_setOption: function( key, value ) {
		this._super( key, value );
		if ( key === "disabled" ) {
			if ( value ) {
				this.element.prop( "disabled", true );
			} else {
				this.element.prop( "disabled", false );
			}
			return;
		}
		this._resetButton();
	},

	refresh: function() {
		//See #8237 & #8828
		var isDisabled = this.element.is( "input, button" ) ? this.element.is( ":disabled" ) : this.element.hasClass( "ui-button-disabled" );

		if ( isDisabled !== this.options.disabled ) {
			this._setOption( "disabled", isDisabled );
		}
		if ( this.type === "radio" ) {
			radioGroup( this.element[0] ).each(function() {
				if ( $( this ).is( ":checked" ) ) {
					$( this ).button( "widget" )
						.addClass( "ui-state-active" )
						.attr( "aria-pressed", "true" );
				} else {
					$( this ).button( "widget" )
						.removeClass( "ui-state-active" )
						.attr( "aria-pressed", "false" );
				}
			});
		} else if ( this.type === "checkbox" ) {
			if ( this.element.is( ":checked" ) ) {
				this.buttonElement
					.addClass( "ui-state-active" )
					.attr( "aria-pressed", "true" );
			} else {
				this.buttonElement
					.removeClass( "ui-state-active" )
					.attr( "aria-pressed", "false" );
			}
		}
	},

	_resetButton: function() {
		if ( this.type === "input" ) {
			if ( this.options.label ) {
				this.element.val( this.options.label );
			}
			return;
		}
		var buttonElement = this.buttonElement.removeClass( typeClasses ),
			buttonText = $( "<span></span>", this.document[0] )
				.addClass( "ui-button-text" )
				.html( this.options.label )
				.appendTo( buttonElement.empty() )
				.text(),
			icons = this.options.icons,
			multipleIcons = icons.primary && icons.secondary,
			buttonClasses = [];

		if ( icons.primary || icons.secondary ) {
			if ( this.options.text ) {
				buttonClasses.push( "ui-button-text-icon" + ( multipleIcons ? "s" : ( icons.primary ? "-primary" : "-secondary" ) ) );
			}

			if ( icons.primary ) {
				buttonElement.prepend( "<span class='ui-button-icon-primary ui-icon " + icons.primary + "'></span>" );
			}

			if ( icons.secondary ) {
				buttonElement.append( "<span class='ui-button-icon-secondary ui-icon " + icons.secondary + "'></span>" );
			}

			if ( !this.options.text ) {
				buttonClasses.push( multipleIcons ? "ui-button-icons-only" : "ui-button-icon-only" );

				if ( !this.hasTitle ) {
					buttonElement.attr( "title", $.trim( buttonText ) );
				}
			}
		} else {
			buttonClasses.push( "ui-button-text-only" );
		}
		buttonElement.addClass( buttonClasses.join( " " ) );
	}
});

$.widget( "ui.buttonset", {
	version: "1.10.3",
	options: {
		items: "button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(ui-button)"
	},

	_create: function() {
		this.element.addClass( "ui-buttonset" );
	},

	_init: function() {
		this.refresh();
	},

	_setOption: function( key, value ) {
		if ( key === "disabled" ) {
			this.buttons.button( "option", key, value );
		}

		this._super( key, value );
	},

	refresh: function() {
		var rtl = this.element.css( "direction" ) === "rtl";

		this.buttons = this.element.find( this.options.items )
			.filter( ":ui-button" )
				.button( "refresh" )
			.end()
			.not( ":ui-button" )
				.button()
			.end()
			.map(function() {
				return $( this ).button( "widget" )[ 0 ];
			})
				.removeClass( "ui-corner-all ui-corner-left ui-corner-right" )
				.filter( ":first" )
					.addClass( rtl ? "ui-corner-right" : "ui-corner-left" )
				.end()
				.filter( ":last" )
					.addClass( rtl ? "ui-corner-left" : "ui-corner-right" )
				.end()
			.end();
	},

	_destroy: function() {
		this.element.removeClass( "ui-buttonset" );
		this.buttons
			.map(function() {
				return $( this ).button( "widget" )[ 0 ];
			})
				.removeClass( "ui-corner-left ui-corner-right" )
			.end()
			.button( "destroy" );
	}
});

}( jQuery ) );
(function( $ ) {

function modifier( fn ) {
	return function() {
		var previous = this.element.val();
		fn.apply( this, arguments );
		this._refresh();
		if ( previous !== this.element.val() ) {
			this._trigger( "change" );
		}
	};
}

$.widget( "ui.spinner", {
	version: "1.10.3",
	defaultElement: "<input>",
	widgetEventPrefix: "spin",
	options: {
		culture: null,
		icons: {
			down: "ui-icon-triangle-1-s",
			up: "ui-icon-triangle-1-n"
		},
		incremental: true,
		max: null,
		min: null,
		numberFormat: null,
		page: 10,
		step: 1,

		change: null,
		spin: null,
		start: null,
		stop: null
	},

	_create: function() {
		// handle string values that need to be parsed
		this._setOption( "max", this.options.max );
		this._setOption( "min", this.options.min );
		this._setOption( "step", this.options.step );

		// format the value, but don't constrain
		this._value( this.element.val(), true );

		this._draw();
		this._on( this._events );
		this._refresh();

		// turning off autocomplete prevents the browser from remembering the
		// value when navigating through history, so we re-enable autocomplete
		// if the page is unloaded before the widget is destroyed. #7790
		this._on( this.window, {
			beforeunload: function() {
				this.element.removeAttr( "autocomplete" );
			}
		});
	},

	_getCreateOptions: function() {
		var options = {},
			element = this.element;

		$.each( [ "min", "max", "step" ], function( i, option ) {
			var value = element.attr( option );
			if ( value !== undefined && value.length ) {
				options[ option ] = value;
			}
		});

		return options;
	},

	_events: {
		keydown: function( event ) {
			if ( this._start( event ) && this._keydown( event ) ) {
				event.preventDefault();
			}
		},
		keyup: "_stop",
		focus: function() {
			this.previous = this.element.val();
		},
		blur: function( event ) {
			if ( this.cancelBlur ) {
				delete this.cancelBlur;
				return;
			}

			this._stop();
			this._refresh();
			if ( this.previous !== this.element.val() ) {
				this._trigger( "change", event );
			}
		},
		mousewheel: function( event, delta ) {
			if ( !delta ) {
				return;
			}
			if ( !this.spinning && !this._start( event ) ) {
				return false;
			}

			this._spin( (delta > 0 ? 1 : -1) * this.options.step, event );
			clearTimeout( this.mousewheelTimer );
			this.mousewheelTimer = this._delay(function() {
				if ( this.spinning ) {
					this._stop( event );
				}
			}, 100 );
			event.preventDefault();
		},
		"mousedown .ui-spinner-button": function( event ) {
			var previous;

			// We never want the buttons to have focus; whenever the user is
			// interacting with the spinner, the focus should be on the input.
			// If the input is focused then this.previous is properly set from
			// when the input first received focus. If the input is not focused
			// then we need to set this.previous based on the value before spinning.
			previous = this.element[0] === this.document[0].activeElement ?
				this.previous : this.element.val();
			function checkFocus() {
				var isActive = this.element[0] === this.document[0].activeElement;
				if ( !isActive ) {
					this.element.focus();
					this.previous = previous;
					// support: IE
					// IE sets focus asynchronously, so we need to check if focus
					// moved off of the input because the user clicked on the button.
					this._delay(function() {
						this.previous = previous;
					});
				}
			}

			// ensure focus is on (or stays on) the text field
			event.preventDefault();
			checkFocus.call( this );

			// support: IE
			// IE doesn't prevent moving focus even with event.preventDefault()
			// so we set a flag to know when we should ignore the blur event
			// and check (again) if focus moved off of the input.
			this.cancelBlur = true;
			this._delay(function() {
				delete this.cancelBlur;
				checkFocus.call( this );
			});

			if ( this._start( event ) === false ) {
				return;
			}

			this._repeat( null, $( event.currentTarget ).hasClass( "ui-spinner-up" ) ? 1 : -1, event );
		},
		"mouseup .ui-spinner-button": "_stop",
		"mouseenter .ui-spinner-button": function( event ) {
			// button will add ui-state-active if mouse was down while mouseleave and kept down
			if ( !$( event.currentTarget ).hasClass( "ui-state-active" ) ) {
				return;
			}

			if ( this._start( event ) === false ) {
				return false;
			}
			this._repeat( null, $( event.currentTarget ).hasClass( "ui-spinner-up" ) ? 1 : -1, event );
		},
		// TODO: do we really want to consider this a stop?
		// shouldn't we just stop the repeater and wait until mouseup before
		// we trigger the stop event?
		"mouseleave .ui-spinner-button": "_stop"
	},

	_draw: function() {
		var uiSpinner = this.uiSpinner = this.element
			.addClass( "ui-spinner-input" )
			.attr( "autocomplete", "off" )
			.wrap( this._uiSpinnerHtml() )
			.parent()
				// add buttons
				.append( this._buttonHtml() );

		this.element.attr( "role", "spinbutton" );

		// button bindings
		this.buttons = uiSpinner.find( ".ui-spinner-button" )
			.attr( "tabIndex", -1 )
			.button()
			.removeClass( "ui-corner-all" );

		// IE 6 doesn't understand height: 50% for the buttons
		// unless the wrapper has an explicit height
		if ( this.buttons.height() > Math.ceil( uiSpinner.height() * 0.5 ) &&
				uiSpinner.height() > 0 ) {
			uiSpinner.height( uiSpinner.height() );
		}

		// disable spinner if element was already disabled
		if ( this.options.disabled ) {
			this.disable();
		}
	},

	_keydown: function( event ) {
		var options = this.options,
			keyCode = $.ui.keyCode;

		switch ( event.keyCode ) {
		case keyCode.UP:
			this._repeat( null, 1, event );
			return true;
		case keyCode.DOWN:
			this._repeat( null, -1, event );
			return true;
		case keyCode.PAGE_UP:
			this._repeat( null, options.page, event );
			return true;
		case keyCode.PAGE_DOWN:
			this._repeat( null, -options.page, event );
			return true;
		}

		return false;
	},

	_uiSpinnerHtml: function() {
		return "<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>";
	},

	_buttonHtml: function() {
		return "" +
			"<a class='ui-spinner-button ui-spinner-up ui-corner-tr'>" +
				"<span class='ui-icon " + this.options.icons.up + "'>&#9650;</span>" +
			"</a>" +
			"<a class='ui-spinner-button ui-spinner-down ui-corner-br'>" +
				"<span class='ui-icon " + this.options.icons.down + "'>&#9660;</span>" +
			"</a>";
	},

	_start: function( event ) {
		if ( !this.spinning && this._trigger( "start", event ) === false ) {
			return false;
		}

		if ( !this.counter ) {
			this.counter = 1;
		}
		this.spinning = true;
		return true;
	},

	_repeat: function( i, steps, event ) {
		i = i || 500;

		clearTimeout( this.timer );
		this.timer = this._delay(function() {
			this._repeat( 40, steps, event );
		}, i );

		this._spin( steps * this.options.step, event );
	},

	_spin: function( step, event ) {
		var value = this.value() || 0;

		if ( !this.counter ) {
			this.counter = 1;
		}

		value = this._adjustValue( value + step * this._increment( this.counter ) );

		if ( !this.spinning || this._trigger( "spin", event, { value: value } ) !== false) {
			this._value( value );
			this.counter++;
		}
	},

	_increment: function( i ) {
		var incremental = this.options.incremental;

		if ( incremental ) {
			return $.isFunction( incremental ) ?
				incremental( i ) :
				Math.floor( i*i*i/50000 - i*i/500 + 17*i/200 + 1 );
		}

		return 1;
	},

	_precision: function() {
		var precision = this._precisionOf( this.options.step );
		if ( this.options.min !== null ) {
			precision = Math.max( precision, this._precisionOf( this.options.min ) );
		}
		return precision;
	},

	_precisionOf: function( num ) {
		var str = num.toString(),
			decimal = str.indexOf( "." );
		return decimal === -1 ? 0 : str.length - decimal - 1;
	},

	_adjustValue: function( value ) {
		var base, aboveMin,
			options = this.options;

		// make sure we're at a valid step
		// - find out where we are relative to the base (min or 0)
		base = options.min !== null ? options.min : 0;
		aboveMin = value - base;
		// - round to the nearest step
		aboveMin = Math.round(aboveMin / options.step) * options.step;
		// - rounding is based on 0, so adjust back to our base
		value = base + aboveMin;

		// fix precision from bad JS floating point math
		value = parseFloat( value.toFixed( this._precision() ) );

		// clamp the value
		if ( options.max !== null && value > options.max) {
			return options.max;
		}
		if ( options.min !== null && value < options.min ) {
			return options.min;
		}

		return value;
	},

	_stop: function( event ) {
		if ( !this.spinning ) {
			return;
		}

		clearTimeout( this.timer );
		clearTimeout( this.mousewheelTimer );
		this.counter = 0;
		this.spinning = false;
		this._trigger( "stop", event );
	},

	_setOption: function( key, value ) {
		if ( key === "culture" || key === "numberFormat" ) {
			var prevValue = this._parse( this.element.val() );
			this.options[ key ] = value;
			this.element.val( this._format( prevValue ) );
			return;
		}

		if ( key === "max" || key === "min" || key === "step" ) {
			if ( typeof value === "string" ) {
				value = this._parse( value );
			}
		}
		if ( key === "icons" ) {
			this.buttons.first().find( ".ui-icon" )
				.removeClass( this.options.icons.up )
				.addClass( value.up );
			this.buttons.last().find( ".ui-icon" )
				.removeClass( this.options.icons.down )
				.addClass( value.down );
		}

		this._super( key, value );

		if ( key === "disabled" ) {
			if ( value ) {
				this.element.prop( "disabled", true );
				this.buttons.button( "disable" );
			} else {
				this.element.prop( "disabled", false );
				this.buttons.button( "enable" );
			}
		}
	},

	_setOptions: modifier(function( options ) {
		this._super( options );
		this._value( this.element.val() );
	}),

	_parse: function( val ) {
		if ( typeof val === "string" && val !== "" ) {
			val = window.Globalize && this.options.numberFormat ?
				Globalize.parseFloat( val, 10, this.options.culture ) : +val;
		}
		return val === "" || isNaN( val ) ? null : val;
	},

	_format: function( value ) {
		if ( value === "" ) {
			return "";
		}
		return window.Globalize && this.options.numberFormat ?
			Globalize.format( value, this.options.numberFormat, this.options.culture ) :
			value;
	},

	_refresh: function() {
		this.element.attr({
			"aria-valuemin": this.options.min,
			"aria-valuemax": this.options.max,
			// TODO: what should we do with values that can't be parsed?
			"aria-valuenow": this._parse( this.element.val() )
		});
	},

	// update the value without triggering change
	_value: function( value, allowAny ) {
		var parsed;
		if ( value !== "" ) {
			parsed = this._parse( value );
			if ( parsed !== null ) {
				if ( !allowAny ) {
					parsed = this._adjustValue( parsed );
				}
				value = this._format( parsed );
			}
		}
		this.element.val( value );
		this._refresh();
	},

	_destroy: function() {
		this.element
			.removeClass( "ui-spinner-input" )
			.prop( "disabled", false )
			.removeAttr( "autocomplete" )
			.removeAttr( "role" )
			.removeAttr( "aria-valuemin" )
			.removeAttr( "aria-valuemax" )
			.removeAttr( "aria-valuenow" );
		this.uiSpinner.replaceWith( this.element );
	},

	stepUp: modifier(function( steps ) {
		this._stepUp( steps );
	}),
	_stepUp: function( steps ) {
		if ( this._start() ) {
			this._spin( (steps || 1) * this.options.step );
			this._stop();
		}
	},

	stepDown: modifier(function( steps ) {
		this._stepDown( steps );
	}),
	_stepDown: function( steps ) {
		if ( this._start() ) {
			this._spin( (steps || 1) * -this.options.step );
			this._stop();
		}
	},

	pageUp: modifier(function( pages ) {
		this._stepUp( (pages || 1) * this.options.page );
	}),

	pageDown: modifier(function( pages ) {
		this._stepDown( (pages || 1) * this.options.page );
	}),

	value: function( newVal ) {
		if ( !arguments.length ) {
			return this._parse( this.element.val() );
		}
		modifier( this._value ).call( this, newVal );
	},

	widget: function() {
		return this.uiSpinner;
	}
});

}( jQuery ) );
;/* JavaDoc Info: http://code.google.com/closure/compiler/docs/js-for-compiler.html
 * {!Object}    non-nullable type (never NULL)
 * {?string}    nullable type (sometimes NULL) - default for {Object}
 * {number=}    optional parameter
 * {*}          ALL types
 */
/*  TODO for jQ 2.0 
 *  change .andSelf() to .addBack()
 *  $.fn.disableSelection won't work
 */

// NOTE: For best readability, view with a fixed-width font and tabs equal to 4-chars

;
(function($) {

    // alias Math methods - used a lot!
    var min = Math.min,
        max = Math.max,
        round = Math.floor

        ,
        isStr = function(v) {
            return $.type(v) === "string";
        }

        /**
         * @param {!Object}          Instance
         * @param {Array.<string>}   a_fn
         */
        , runPluginCallbacks = function(Instance, a_fn) {
            if ($.isArray(a_fn))
                for (var i = 0, c = a_fn.length; i < c; i++) {
                    var fn = a_fn[i];
                    try {
                        if (isStr(fn)) // 'name' of a function
                            fn = eval(fn);
                        if ($.isFunction(fn))
                            g(fn)(Instance);
                    } catch (ex) {}
                }

            function g(f) {
                return f;
            }; // compiler hack
        };

    /*
     *  GENERIC $.layout METHODS - used by all layouts
     */
    $.layout = {

        version: "1.3.rc30.79",
        revision: 0.033007 // 1.3.0 final = 1.0300 - major(n+).minor(nn)+patch(nn+)

        // $.layout.browser REPLACES $.browser
        ,
        browser: {} // set below

        // *PREDEFINED* EFFECTS & DEFAULTS 
        // MUST list effect here - OR MUST set an fxSettings option (can be an empty hash: {})
        ,
        effects: {

            //  Pane Open/Close Animations
            slide: {
                all: {
                    duration: "fast"
                } // eg: duration: 1000, easing: "easeOutBounce"
                ,
                north: {
                    direction: "up"
                },
                south: {
                    direction: "down"
                },
                east: {
                    direction: "right"
                },
                west: {
                    direction: "left"
                }
            },
            drop: {
                all: {
                    duration: "slow"
                },
                north: {
                    direction: "up"
                },
                south: {
                    direction: "down"
                },
                east: {
                    direction: "right"
                },
                west: {
                    direction: "left"
                }
            },
            scale: {
                all: {
                    duration: "fast"
                }
            }
            //  these are not recommended, but can be used
            ,
            blind: {},
            clip: {},
            explode: {},
            fade: {},
            fold: {},
            puff: {}

            //  Pane Resize Animations
            ,
            size: {
                all: {
                    easing: "swing"
                }
            }
        }

        // INTERNAL CONFIG DATA - DO NOT CHANGE THIS!
        ,
        config: {
            optionRootKeys: "effects,panes,north,south,west,east,center".split(","),
            allPanes: "north,south,west,east,center".split(","),
            borderPanes: "north,south,west,east".split(","),
            oppositeEdge: {
                north: "south",
                south: "north",
                east: "west",
                west: "east"
            }
            //  offscreen data
            ,
            offscreenCSS: {
                left: "-99999px",
                right: "auto"
            } // used by hide/close if useOffscreenClose=true
            ,
            offscreenReset: "offscreenReset" // key used for data
            //  CSS used in multiple places
            ,
            hidden: {
                visibility: "hidden"
            },
            visible: {
                visibility: "visible"
            }
            //  layout element settings
            ,
            resizers: {
                cssReq: {
                    position: "absolute",
                    padding: 0,
                    margin: 0,
                    fontSize: "1px",
                    textAlign: "left" // to counter-act "center" alignment!
                    ,
                    overflow: "hidden" // prevent toggler-button from overflowing
                    //  SEE $.layout.defaults.zIndexes.resizer_normal
                },
                cssDemo: { // DEMO CSS - applied if: options.PANE.applyDemoStyles=true
                    background: "#DDD",
                    border: "none"
                }
            },
            togglers: {
                cssReq: {
                    position: "absolute",
                    display: "block",
                    padding: 0,
                    margin: 0,
                    overflow: "hidden",
                    textAlign: "center",
                    fontSize: "1px",
                    cursor: "pointer",
                    zIndex: 1
                },
                cssDemo: { // DEMO CSS - applied if: options.PANE.applyDemoStyles=true
                    background: "#AAA"
                }
            },
            content: {
                cssReq: {
                    position: "relative" /* contain floated or positioned elements */
                },
                cssDemo: { // DEMO CSS - applied if: options.PANE.applyDemoStyles=true
                    overflow: "auto",
                    padding: "10px"
                },
                cssDemoPane: { // DEMO CSS - REMOVE scrolling from 'pane' when it has a content-div
                    overflow: "hidden",
                    padding: 0
                }
            },
            panes: { // defaults for ALL panes - overridden by 'per-pane settings' below
                cssReq: {
                    position: "absolute",
                    margin: 0
                    //  $.layout.defaults.zIndexes.pane_normal
                },
                cssDemo: { // DEMO CSS - applied if: options.PANE.applyDemoStyles=true
                    padding: "10px",
                    background: "#FFF",
                    border: "1px solid #BBB",
                    overflow: "auto"
                }
            },
            north: {
                side: "top",
                sizeType: "Height",
                dir: "horz",
                cssReq: {
                    top: 0,
                    bottom: "auto",
                    left: 0,
                    right: 0,
                    width: "auto"
                    //  height:     DYNAMIC
                }
            },
            south: {
                side: "bottom",
                sizeType: "Height",
                dir: "horz",
                cssReq: {
                    top: "auto",
                    bottom: 0,
                    left: 0,
                    right: 0,
                    width: "auto"
                    //  height:     DYNAMIC
                }
            },
            east: {
                side: "right",
                sizeType: "Width",
                dir: "vert",
                cssReq: {
                    left: "auto",
                    right: 0,
                    top: "auto" // DYNAMIC
                    ,
                    bottom: "auto" // DYNAMIC
                    ,
                    height: "auto"
                    //  width:      DYNAMIC
                }
            },
            west: {
                side: "left",
                sizeType: "Width",
                dir: "vert",
                cssReq: {
                    left: 0,
                    right: "auto",
                    top: "auto" // DYNAMIC
                    ,
                    bottom: "auto" // DYNAMIC
                    ,
                    height: "auto"
                    //  width:      DYNAMIC
                }
            },
            center: {
                dir: "center",
                cssReq: {
                    left: "auto" // DYNAMIC
                    ,
                    right: "auto" // DYNAMIC
                    ,
                    top: "auto" // DYNAMIC
                    ,
                    bottom: "auto" // DYNAMIC
                    ,
                    height: "auto",
                    width: "auto"
                }
            }
        }

        // CALLBACK FUNCTION NAMESPACE - used to store reusable callback functions
        ,
        callbacks: {}

        ,
        getParentPaneElem: function(el) {
            // must pass either a container or pane element
            var $el = $(el),
                layout = $el.data("layout") || $el.data("parentLayout");
            if (layout) {
                var $cont = layout.container;
                // see if this container is directly-nested inside an outer-pane
                if ($cont.data("layoutPane")) return $cont;
                var $pane = $cont.closest("." + $.layout.defaults.panes.paneClass);
                // if a pane was found, return it
                if ($pane.data("layoutPane")) return $pane;
            }
            return null;
        }

        ,
        getParentPaneInstance: function(el) {
            // must pass either a container or pane element
            var $pane = $.layout.getParentPaneElem(el);
            return $pane ? $pane.data("layoutPane") : null;
        }

        ,
        getParentLayoutInstance: function(el) {
            // must pass either a container or pane element
            var $pane = $.layout.getParentPaneElem(el);
            return $pane ? $pane.data("parentLayout") : null;
        }

        ,
        getEventObject: function(evt) {
            return typeof evt === "object" && evt.stopPropagation ? evt : null;
        },
        parsePaneName: function(evt_or_pane) {
            var evt = $.layout.getEventObject(evt_or_pane),
                pane = evt_or_pane;
            if (evt) {
                // ALWAYS stop propagation of events triggered in Layout!
                evt.stopPropagation();
                pane = $(this).data("layoutEdge");
            }
            if (pane && !/^(west|east|north|south|center)$/.test(pane)) {
                $.layout.msg('LAYOUT ERROR - Invalid pane-name: "' + pane + '"');
                pane = "error";
            }
            return pane;
        }


        // LAYOUT-PLUGIN REGISTRATION
        // more plugins can added beyond this default list
        ,
        plugins: {
            draggable: !! $.fn.draggable // resizing
            ,
            effects: {
                core: !! $.effects // animimations (specific effects tested by initOptions)
                ,
                slide: $.effects && ($.effects.slide || ($.effects.effect && $.effects.effect.slide)) // default effect
            }
        }

        //  arrays of plugin or other methods to be triggered for events in *each layout* - will be passed 'Instance'
        ,
        onCreate: [] // runs when layout is just starting to be created - right after options are set
        ,
        onLoad: [] // runs after layout container and global events init, but before initPanes is called
        ,
        onReady: [] // runs after initialization *completes* - ie, after initPanes completes successfully
        ,
        onDestroy: [] // runs after layout is destroyed
        ,
        onUnload: [] // runs after layout is destroyed OR when page unloads
        ,
        afterOpen: [] // runs after setAsOpen() completes
        ,
        afterClose: [] // runs after setAsClosed() completes

        /*
         *   GENERIC UTILITY METHODS
         */

        // calculate and return the scrollbar width, as an integer
        ,
        scrollbarWidth: function() {
            return window.scrollbarWidth || $.layout.getScrollbarSize('width');
        },
        scrollbarHeight: function() {
            return window.scrollbarHeight || $.layout.getScrollbarSize('height');
        },
        getScrollbarSize: function(dim) {
            var $c = $('<div style="position: absolute; top: -10000px; left: -10000px; width: 100px; height: 100px; overflow: scroll;"></div>').appendTo("body");
            var d = {
                width: $c.css("width") - $c[0].clientWidth,
                height: $c.height() - $c[0].clientHeight
            };
            $c.remove();
            window.scrollbarWidth = d.width;
            window.scrollbarHeight = d.height;
            return dim.match(/^(width|height)$/) ? d[dim] : d;
        }


        /**
         * Returns hash container 'display' and 'visibility'
         *
         * @see  $.swap() - swaps CSS, runs callback, resets CSS
         * @param  {!Object}     $E              jQuery element
         * @param  {boolean=}    [force=false]   Run even if display != none
         * @return {!Object}                     Returns current style props, if applicable
         */
        ,
        showInvisibly: function($E, force) {
            if ($E && $E.length && (force || $E.css("display") === "none")) { // only if not *already hidden*
                var s = $E[0].style
                // save ONLY the 'style' props because that is what we must restore
                    ,
                    CSS = {
                        display: s.display || '',
                        visibility: s.visibility || ''
                    };
                // show element 'invisibly' so can be measured
                $E.css({
                    display: "block",
                    visibility: "hidden"
                });
                return CSS;
            }
            return {};
        }

        /**
         * Returns data for setting size of an element (container or a pane).
         *
         * @see  _create(), onWindowResize() for container, plus others for pane
         * @return JSON  Returns a hash of all dimensions: top, bottom, left, right, outerWidth, innerHeight, etc
         */
        ,
        getElementDimensions: function($E, inset) {
            var
            //  dimensions hash - start with current data IF passed
            d = {
                css: {},
                inset: {}
            }, x = d.css // CSS hash
                ,
                i = {
                    bottom: 0
                } // TEMP insets (bottom = complier hack)
                , N = $.layout.cssNum,
                off = $E.offset(),
                b, p, ei // TEMP border, padding
                ;
            d.offsetLeft = off.left;
            d.offsetTop = off.top;

            if (!inset) inset = {}; // simplify logic below

            $.each("Left,Right,Top,Bottom".split(","), function(idx, e) { // e = edge
                b = x["border" + e] = $.layout.borderWidth($E, e);
                p = x["padding" + e] = $.layout.cssNum($E, "padding" + e);
                ei = e.toLowerCase();
                d.inset[ei] = inset[ei] >= 0 ? inset[ei] : p; // any missing insetX value = paddingX
                i[ei] = d.inset[ei] + b; // total offset of content from outer side
            });

            x.width = $E.width();
            x.height = $E.height();
            x.top = N($E, "top", true);
            x.bottom = N($E, "bottom", true);
            x.left = N($E, "left", true);
            x.right = N($E, "right", true);

            d.outerWidth = $E.outerWidth();
            d.outerHeight = $E.outerHeight();
            // calc the TRUE inner-dimensions, even in quirks-mode!
            d.innerWidth = max(0, d.outerWidth - i.left - i.right);
            d.innerHeight = max(0, d.outerHeight - i.top - i.bottom);
            // layoutWidth/Height is used in calcs for manual resizing
            // layoutW/H only differs from innerW/H when in quirks-mode - then is like outerW/H
            d.layoutWidth = $E.innerWidth();
            d.layoutHeight = $E.innerHeight();

            //if ($E.prop('tagName') === 'BODY') { debugData( d, $E.prop('tagName') ); } // DEBUG

            //d.visible = $E.is(":visible");// && x.width > 0 && x.height > 0;

            return d;
        }

        ,
        getElementStyles: function($E, list) {
            var
            CSS = {}, style = $E[0].style,
                props = list.split(","),
                sides = "Top,Bottom,Left,Right".split(","),
                attrs = "Color,Style,Width".split(","),
                p, s, a, i, j, k;
            for (i = 0; i < props.length; i++) {
                p = props[i];
                if (p.match(/(border|padding|margin)$/))
                    for (j = 0; j < 4; j++) {
                        s = sides[j];
                        if (p === "border")
                            for (k = 0; k < 3; k++) {
                                a = attrs[k];
                                CSS[p + s + a] = style[p + s + a];
                            } else
                            CSS[p + s] = style[p + s];
                    } else
                    CSS[p] = style[p];
            };
            return CSS
        }

        /**
         * Return the innerWidth for the current browser/doctype
         *
         * @see  initPanes(), sizeMidPanes(), initHandles(), sizeHandles()
         * @param  {Array.<Object>}  $E  Must pass a jQuery object - first element is processed
         * @param  {number=}         outerWidth (optional) Can pass a width, allowing calculations BEFORE element is resized
         * @return {number}          Returns the innerWidth of the elem by subtracting padding and borders
         */
        ,
        cssWidth: function($E, outerWidth) {
            // a 'calculated' outerHeight can be passed so borders and/or padding are removed if needed
            if (outerWidth <= 0) return 0;

            var bs = !$.layout.browser.boxModel ? "border-box" : $.support.boxSizing ? $E.css("boxSizing") : "content-box",
                b = $.layout.borderWidth,
                n = $.layout.cssNum,
                W = outerWidth;
            // strip border and/or padding from outerWidth to get CSS Width
            if (bs !== "border-box")
                W -= (b($E, "Left") + b($E, "Right"));
            if (bs === "content-box")
                W -= (n($E, "paddingLeft") + n($E, "paddingRight"));
            return max(0, W);
        }

        /**
         * Return the innerHeight for the current browser/doctype
         *
         * @see  initPanes(), sizeMidPanes(), initHandles(), sizeHandles()
         * @param  {Array.<Object>}  $E  Must pass a jQuery object - first element is processed
         * @param  {number=}         outerHeight  (optional) Can pass a width, allowing calculations BEFORE element is resized
         * @return {number}          Returns the innerHeight of the elem by subtracting padding and borders
         */
        ,
        cssHeight: function($E, outerHeight) {
            // a 'calculated' outerHeight can be passed so borders and/or padding are removed if needed
            if (outerHeight <= 0) return 0;

            var bs = !$.layout.browser.boxModel ? "border-box" : $.support.boxSizing ? $E.css("boxSizing") : "content-box",
                b = $.layout.borderWidth,
                n = $.layout.cssNum,
                H = outerHeight;
            // strip border and/or padding from outerHeight to get CSS Height
            if (bs !== "border-box")
                H -= (b($E, "Top") + b($E, "Bottom"));
            if (bs === "content-box")
                H -= (n($E, "paddingTop") + n($E, "paddingBottom"));
            return max(0, H);
        }

        /**
         * Returns the 'current CSS numeric value' for a CSS property - 0 if property does not exist
         *
         * @see  Called by many methods
         * @param {Array.<Object>}   $E                  Must pass a jQuery object - first element is processed
         * @param {string}           prop                The name of the CSS property, eg: top, width, etc.
         * @param {boolean=}         [allowAuto=false]   true = return 'auto' if that is value; false = return 0
         * @return {(string|number)}                     Usually used to get an integer value for position (top, left) or size (height, width)
         */
        ,
        cssNum: function($E, prop, allowAuto) {
            if (!$E.jquery) $E = $($E);
            var CSS = $.layout.showInvisibly($E),
                p = $.css($E[0], prop, true),
                v = allowAuto && p == "auto" ? p : Math.round(parseFloat(p) || 0);
            $E.css(CSS); // RESET
            return v;
        }

        ,
        borderWidth: function(el, side) {
            if (el.jquery) el = el[0];
            var b = "border" + side.substr(0, 1).toUpperCase() + side.substr(1); // left => Left
            return $.css(el, b + "Style", true) === "none" ? 0 : Math.round(parseFloat($.css(el, b + "Width", true)) || 0);
        }

        /**
    * Mouse-tracking utility - FUTURE REFERENCE
    *
    * init: if (!window.mouse) {
    *           window.mouse = { x: 0, y: 0 };
    *           $(document).mousemove( $.layout.trackMouse );
    *       }
    *
    * @param {Object}       evt
    *
,   trackMouse: function (evt) {
        window.mouse = { x: evt.clientX, y: evt.clientY };
    }
    */

        /**
         * SUBROUTINE for preventPrematureSlideClose option
         *
         * @param {Object}       evt
         * @param {Object=}      el
         */
        ,
        isMouseOverElem: function(evt, el) {
            var
            $E = $(el || this),
                d = $E.offset(),
                T = d.top,
                L = d.left,
                R = L + $E.outerWidth(),
                B = T + $E.outerHeight(),
                x = evt.pageX // evt.clientX ?
                ,
                y = evt.pageY // evt.clientY ?
                ;
            // if X & Y are < 0, probably means is over an open SELECT
            return ($.layout.browser.msie && x < 0 && y < 0) || ((x >= L && x <= R) && (y >= T && y <= B));
        }

        /**
         * Message/Logging Utility
         *
         * @example $.layout.msg("My message");              // log text
         * @example $.layout.msg("My message", true);        // alert text
         * @example $.layout.msg({ foo: "bar" }, "Title");   // log hash-data, with custom title
         * @example $.layout.msg({ foo: "bar" }, true, "Title", { sort: false }); -OR-
         * @example $.layout.msg({ foo: "bar" }, "Title", { sort: false, display: true }); // alert hash-data
         *
         * @param {(Object|string)}          info            String message OR Hash/Array
         * @param {(Boolean|string|Object)=} [popup=false]   True means alert-box - can be skipped
         * @param {(Object|string)=}         [debugTitle=""] Title for Hash data - can be skipped
         * @param {Object=}                  [debugOpts]     Extra options for debug output
         */
        ,
        msg: function(info, popup, debugTitle, debugOpts) {
            if ($.isPlainObject(info) && window.debugData) {
                if (typeof popup === "string") {
                    debugOpts = debugTitle;
                    debugTitle = popup;
                } else if (typeof debugTitle === "object") {
                    debugOpts = debugTitle;
                    debugTitle = null;
                }
                var t = debugTitle || "log( <object> )",
                    o = $.extend({
                        sort: false,
                        returnHTML: false,
                        display: false
                    }, debugOpts);
                if (popup === true || o.display)
                    debugData(info, t, o);
                else if (window.console)
                    console.log(debugData(info, t, o));
            } else if (popup)
                alert(info);
            else if (window.console)
                console.log(info);
            else {
                var id = "#layoutLogger",
                    $l = $(id);
                if (!$l.length)
                    $l = createLog();
                $l.children("ul").append('<li style="padding: 4px 10px; margin: 0; border-top: 1px solid #CCC;">' + info.replace(/\</g, "&lt;").replace(/\>/g, "&gt;") + '</li>');
            }

            function createLog() {
                var pos = $.support.fixedPosition ? 'fixed' : 'absolute',
                    $e = $('<div id="layoutLogger" style="position: ' + pos + '; top: 5px; z-index: 999999; max-width: 25%; overflow: hidden; border: 1px solid #000; border-radius: 5px; background: #FBFBFB; box-shadow: 0 2px 10px rgba(0,0,0,0.3);">' + '<div style="font-size: 13px; font-weight: bold; padding: 5px 10px; background: #F6F6F6; border-radius: 5px 5px 0 0; cursor: move;">' + '<span style="float: right; padding-left: 7px; cursor: pointer;" title="Remove Console" onclick="$(this).closest(\'#layoutLogger\').remove()">X</span>Layout console.log</div>' + '<ul style="font-size: 13px; font-weight: none; list-style: none; margin: 0; padding: 0 0 2px;"></ul>' + '</div>').appendTo("body");
                $e.css('left', $(window).width() - $e.outerWidth() - 5)
                if ($.ui.draggable) $e.draggable({
                    handle: ':first-child'
                });
                return $e;
            };
        }

    };


    /*
     *  $.layout.browser REPLACES removed $.browser, with extra data
     *  Parsing code here adapted from jQuery 1.8 $.browse
     */
    var u = navigator.userAgent.toLowerCase(),
        m = /(chrome)[ \/]([\w.]+)/.exec(u) || /(webkit)[ \/]([\w.]+)/.exec(u) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(u) || /(msie) ([\w.]+)/.exec(u) || u.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(u) || [],
        b = m[1] || "",
        v = m[2] || 0,
        ie = b === "msie";
    $.layout.browser = {
        version: v,
        safari: b === "webkit" // webkit (NOT chrome) = safari
        ,
        webkit: b === "chrome" // chrome = webkit
        ,
        msie: ie,
        isIE6: ie && v == 6
        // ONLY IE reverts to old box-model - update for older jQ onReady
        ,
        boxModel: !ie || $.support.boxModel !== false
    };
    if (b) $.layout.browser[b] = true; // set CURRENT browser
    /*  OLD versions of jQuery only set $.support.boxModel after page is loaded
     *  so if this is IE, use support.boxModel to test for quirks-mode (ONLY IE changes boxModel) */
    if (ie) $(function() {
        $.layout.browser.boxModel = $.support.boxModel;
    });


    // DEFAULT OPTIONS
    $.layout.defaults = {
        /*
         *  LAYOUT & LAYOUT-CONTAINER OPTIONS
         *  - none of these options are applicable to individual panes
         */
        name: "" // Not required, but useful for buttons and used for the state-cookie
        ,
        containerClass: "ui-layout-container" // layout-container element
        ,
        inset: null // custom container-inset values (override padding)
        ,
        scrollToBookmarkOnLoad: true // after creating a layout, scroll to bookmark in URL (.../page.htm#myBookmark)
        ,
        resizeWithWindow: true // bind thisLayout.resizeAll() to the window.resize event
        ,
        resizeWithWindowDelay: 200 // delay calling resizeAll because makes window resizing very jerky
        ,
        resizeWithWindowMaxDelay: 0 // 0 = none - force resize every XX ms while window is being resized
        ,
        maskPanesEarly: false // true = create pane-masks on resizer.mouseDown instead of waiting for resizer.dragstart
        ,
        onresizeall_start: null // CALLBACK when resizeAll() STARTS - NOT pane-specific
        ,
        onresizeall_end: null // CALLBACK when resizeAll() ENDS   - NOT pane-specific
        ,
        onload_start: null // CALLBACK when Layout inits - after options initialized, but before elements
        ,
        onload_end: null // CALLBACK when Layout inits - after EVERYTHING has been initialized
        ,
        onunload_start: null // CALLBACK when Layout is destroyed OR onWindowUnload
        ,
        onunload_end: null // CALLBACK when Layout is destroyed OR onWindowUnload
        ,
        initPanes: true // false = DO NOT initialize the panes onLoad - will init later
        ,
        showErrorMessages: true // enables fatal error messages to warn developers of common errors
        ,
        showDebugMessages: false // display console-and-alert debug msgs - IF this Layout version _has_ debugging code!
        //  Changing this zIndex value will cause other zIndex values to automatically change
        ,
        zIndex: null // the PANE zIndex - resizers and masks will be +1
        //  DO NOT CHANGE the zIndex values below unless you clearly understand their relationships
        ,
        zIndexes: { // set _default_ z-index values here...
            pane_normal: 0 // normal z-index for panes
            ,
            content_mask: 1 // applied to overlays used to mask content INSIDE panes during resizing
            ,
            resizer_normal: 2 // normal z-index for resizer-bars
            ,
            pane_sliding: 100 // applied to *BOTH* the pane and its resizer when a pane is 'slid open'
            ,
            pane_animate: 1000 // applied to the pane when being animated - not applied to the resizer
            ,
            resizer_drag: 10000 // applied to the CLONED resizer-bar when being 'dragged'
        },
        errors: {
            pane: "pane" // description of "layout pane element" - used only in error messages
            ,
            selector: "selector" // description of "jQuery-selector" - used only in error messages
            ,
            addButtonError: "Error Adding Button\nInvalid ",
            containerMissing: "UI Layout Initialization Error\nThe specified layout-container does not exist.",
            centerPaneMissing: "UI Layout Initialization Error\nThe center-pane element does not exist.\nThe center-pane is a required element.",
            noContainerHeight: "UI Layout Initialization Warning\nThe layout-container \"CONTAINER\" has no height.\nTherefore the layout is 0-height and hence 'invisible'!",
            callbackError: "UI Layout Callback Error\nThe EVENT callback is not a valid function."
        }
        /*
         *  PANE DEFAULT SETTINGS
         *  - settings under the 'panes' key become the default settings for *all panes*
         *  - ALL pane-options can also be set specifically for each panes, which will override these 'default values'
         */
        ,
        panes: { // default options for 'all panes' - will be overridden by 'per-pane settings'
            applyDemoStyles: false // NOTE: renamed from applyDefaultStyles for clarity
            ,
            closable: true // pane can open & close
            ,
            resizable: true // when open, pane can be resized 
            ,
            slidable: true // when closed, pane can 'slide open' over other panes - closes on mouse-out
            ,
            initClosed: false // true = init pane as 'closed'
            ,
            initHidden: false // true = init pane as 'hidden' - no resizer-bar/spacing
            //  SELECTORS
            //, paneSelector:           ""          // MUST be pane-specific - jQuery selector for pane
            ,
            contentSelector: ".ui-layout-content" // INNER div/element to auto-size so only it scrolls, not the entire pane!
            ,
            contentIgnoreSelector: ".ui-layout-ignore" // element(s) to 'ignore' when measuring 'content'
            ,
            findNestedContent: false // true = $P.find(contentSelector), false = $P.children(contentSelector)
            //  GENERIC ROOT-CLASSES - for auto-generated classNames
            ,
            paneClass: "ui-layout-pane" // Layout Pane
            ,
            resizerClass: "ui-layout-resizer" // Resizer Bar
            ,
            togglerClass: "ui-layout-toggler" // Toggler Button
            ,
            buttonClass: "ui-layout-button" // CUSTOM Buttons   - eg: '[ui-layout-button]-toggle/-open/-close/-pin'
            //  ELEMENT SIZE & SPACING
            //, size:                   100         // MUST be pane-specific -initial size of pane
            ,
            minSize: 0 // when manually resizing a pane
            ,
            maxSize: 0 // ditto, 0 = no limit
            ,
            spacing_open: 6 // space between pane and adjacent panes - when pane is 'open'
            ,
            spacing_closed: 6 // ditto - when pane is 'closed'
            ,
            togglerLength_open: 50 // Length = WIDTH of toggler button on north/south sides - HEIGHT on east/west sides
            ,
            togglerLength_closed: 50 // 100% OR -1 means 'full height/width of resizer bar' - 0 means 'hidden'
            ,
            togglerAlign_open: "center" // top/left, bottom/right, center, OR...
            ,
            togglerAlign_closed: "center" // 1 => nn = offset from top/left, -1 => -nn == offset from bottom/right
            ,
            togglerContent_open: "" // text or HTML to put INSIDE the toggler
            ,
            togglerContent_closed: "" // ditto
            //  RESIZING OPTIONS
            ,
            resizerDblClickToggle: true // 
            ,
            autoResize: true // IF size is 'auto' or a percentage, then recalc 'pixel size' whenever the layout resizes
            ,
            autoReopen: true // IF a pane was auto-closed due to noRoom, reopen it when there is room? False = leave it closed
            ,
            resizerDragOpacity: 1 // option for ui.draggable
            //, resizerCursor:          ""          // MUST be pane-specific - cursor when over resizer-bar
            ,
            maskContents: false // true = add DIV-mask over-or-inside this pane so can 'drag' over IFRAMES
            ,
            maskObjects: false // true = add IFRAME-mask over-or-inside this pane to cover objects/applets - content-mask will overlay this mask
            ,
            maskZindex: null // will override zIndexes.content_mask if specified - not applicable to iframe-panes
            ,
            resizingGrid: false // grid size that the resizers will snap-to during resizing, eg: [20,20]
            ,
            livePaneResizing: false // true = LIVE Resizing as resizer is dragged
            ,
            liveContentResizing: false // true = re-measure header/footer heights as resizer is dragged
            ,
            liveResizingTolerance: 1 // how many px change before pane resizes, to control performance
            //  SLIDING OPTIONS
            ,
            sliderCursor: "pointer" // cursor when resizer-bar will trigger 'sliding'
            ,
            slideTrigger_open: "click" // click, dblclick, mouseenter
            ,
            slideTrigger_close: "mouseleave" // click, mouseleave
            ,
            slideDelay_open: 300 // applies only for mouseenter event - 0 = instant open
            ,
            slideDelay_close: 300 // applies only for mouseleave event (300ms is the minimum!)
            ,
            hideTogglerOnSlide: false // when pane is slid-open, should the toggler show?
            ,
            preventQuickSlideClose: $.layout.browser.webkit // Chrome triggers slideClosed as it is opening
            ,
            preventPrematureSlideClose: false // handle incorrect mouseleave trigger, like when over a SELECT-list in IE
            //  PANE-SPECIFIC TIPS & MESSAGES
            ,
            tips: {
                Open: "Open" // eg: "Open Pane"
                ,
                Close: "Close",
                Resize: "Resize",
                Slide: "Slide Open",
                Pin: "Pin",
                Unpin: "Un-Pin",
                noRoomToOpen: "Not enough room to show this panel." // alert if user tries to open a pane that cannot
                ,
                minSizeWarning: "Panel has reached its minimum size" // displays in browser statusbar
                ,
                maxSizeWarning: "Panel has reached its maximum size" // ditto
            }
            //  HOT-KEYS & MISC
            ,
            showOverflowOnHover: false // will bind allowOverflow() utility to pane.onMouseOver
            ,
            enableCursorHotkey: true // enabled 'cursor' hotkeys
            //, customHotkey:           ""          // MUST be pane-specific - EITHER a charCode OR a character
            ,
            customHotkeyModifier: "SHIFT" // either 'SHIFT', 'CTRL' or 'CTRL+SHIFT' - NOT 'ALT'
            //  PANE ANIMATION
            //  NOTE: fxSss_open, fxSss_close & fxSss_size options (eg: fxName_open) are auto-generated if not passed
            ,
            fxName: "slide" // ('none' or blank), slide, drop, scale -- only relevant to 'open' & 'close', NOT 'size'
            ,
            fxSpeed: null // slow, normal, fast, 200, nnn - if passed, will OVERRIDE fxSettings.duration
            ,
            fxSettings: {} // can be passed, eg: { easing: "easeOutBounce", duration: 1500 }
            ,
            fxOpacityFix: true // tries to fix opacity in IE to restore anti-aliasing after animation
            ,
            animatePaneSizing: false // true = animate resizing after dragging resizer-bar OR sizePane() is called
            /*  NOTE: Action-specific FX options are auto-generated from the options above if not specifically set:
        fxName_open:            "slide"     // 'Open' pane animation
        fnName_close:           "slide"     // 'Close' pane animation
        fxName_size:            "slide"     // 'Size' pane animation - when animatePaneSizing = true
        fxSpeed_open:           null
        fxSpeed_close:          null
        fxSpeed_size:           null
        fxSettings_open:        {}
        fxSettings_close:       {}
        fxSettings_size:        {}
    */
            //  CHILD/NESTED LAYOUTS
            ,
            children: null // Layout-options for nested/child layout - even {} is valid as options
            ,
            containerSelector: '' // if child is NOT 'directly nested', a selector to find it/them (can have more than one child layout!)
            ,
            initChildren: true // true = child layout will be created as soon as _this_ layout completes initialization
            ,
            destroyChildren: true // true = destroy child-layout if this pane is destroyed
            ,
            resizeChildren: true // true = trigger child-layout.resizeAll() when this pane is resized
            //  EVENT TRIGGERING
            ,
            triggerEventsOnLoad: false // true = trigger onopen OR onclose callbacks when layout initializes
            ,
            triggerEventsDuringLiveResize: true // true = trigger onresize callback REPEATEDLY if livePaneResizing==true
            //  PANE CALLBACKS
            ,
            onshow_start: null // CALLBACK when pane STARTS to Show    - BEFORE onopen/onhide_start
            ,
            onshow_end: null // CALLBACK when pane ENDS being Shown  - AFTER  onopen/onhide_end
            ,
            onhide_start: null // CALLBACK when pane STARTS to Close   - BEFORE onclose_start
            ,
            onhide_end: null // CALLBACK when pane ENDS being Closed - AFTER  onclose_end
            ,
            onopen_start: null // CALLBACK when pane STARTS to Open
            ,
            onopen_end: null // CALLBACK when pane ENDS being Opened
            ,
            onclose_start: null // CALLBACK when pane STARTS to Close
            ,
            onclose_end: null // CALLBACK when pane ENDS being Closed
            ,
            onresize_start: null // CALLBACK when pane STARTS being Resized ***FOR ANY REASON***
            ,
            onresize_end: null // CALLBACK when pane ENDS being Resized ***FOR ANY REASON***
            ,
            onsizecontent_start: null // CALLBACK when sizing of content-element STARTS
            ,
            onsizecontent_end: null // CALLBACK when sizing of content-element ENDS
            ,
            onswap_start: null // CALLBACK when pane STARTS to Swap
            ,
            onswap_end: null // CALLBACK when pane ENDS being Swapped
            ,
            ondrag_start: null // CALLBACK when pane STARTS being ***MANUALLY*** Resized
            ,
            ondrag_end: null // CALLBACK when pane ENDS being ***MANUALLY*** Resized
        }
        /*
         *  PANE-SPECIFIC SETTINGS
         *  - options listed below MUST be specified per-pane - they CANNOT be set under 'panes'
         *  - all options under the 'panes' key can also be set specifically for any pane
         *  - most options under the 'panes' key apply only to 'border-panes' - NOT the the center-pane
         */
        ,
        north: {
            paneSelector: ".ui-layout-north",
            size: "auto" // eg: "auto", "30%", .30, 200
            ,
            resizerCursor: "n-resize" // custom = url(myCursor.cur)
            ,
            customHotkey: "" // EITHER a charCode (43) OR a character ("o")
        },
        south: {
            paneSelector: ".ui-layout-south",
            size: "auto",
            resizerCursor: "s-resize",
            customHotkey: ""
        },
        east: {
            paneSelector: ".ui-layout-east",
            size: 200,
            resizerCursor: "e-resize",
            customHotkey: ""
        },
        west: {
            paneSelector: ".ui-layout-west",
            size: 200,
            resizerCursor: "w-resize",
            customHotkey: ""
        },
        center: {
            paneSelector: ".ui-layout-center",
            minWidth: 0,
            minHeight: 0
        }
    };

    $.layout.optionsMap = {
        // layout/global options - NOT pane-options
        layout: ("name,instanceKey,stateManagement,effects,inset,zIndexes,errors," + "zIndex,scrollToBookmarkOnLoad,showErrorMessages,maskPanesEarly," + "outset,resizeWithWindow,resizeWithWindowDelay,resizeWithWindowMaxDelay," + "onresizeall,onresizeall_start,onresizeall_end,onload,onload_start,onload_end,onunload,onunload_start,onunload_end").split(",")
        //  borderPanes: [ ALL options that are NOT specified as 'layout' ]
        // default.panes options that apply to the center-pane (most options apply _only_ to border-panes)
        ,
        center: ("paneClass,contentSelector,contentIgnoreSelector,findNestedContent,applyDemoStyles,triggerEventsOnLoad," + "showOverflowOnHover,maskContents,maskObjects,liveContentResizing," + "containerSelector,children,initChildren,resizeChildren,destroyChildren," + "onresize,onresize_start,onresize_end,onsizecontent,onsizecontent_start,onsizecontent_end").split(",")
        // options that MUST be specifically set 'per-pane' - CANNOT set in the panes (defaults) key
        ,
        noDefault: ("paneSelector,resizerCursor,customHotkey").split(",")
    };

    /**
     * Processes options passed in converts flat-format data into subkey (JSON) format
     * In flat-format, subkeys are _currently_ separated with 2 underscores, like north__optName
     * Plugins may also call this method so they can transform their own data
     *
     * @param  {!Object}    hash            Data/options passed by user - may be a single level or nested levels
     * @param  {boolean=}   [addKeys=false] Should the primary layout.options keys be added if they do not exist?
     * @return {Object}                     Returns hash of minWidth & minHeight
     */
    $.layout.transformData = function(hash, addKeys) {
        var json = addKeys ? {
            panes: {},
            center: {}
        } : {} // init return object
            , branch, optKey, keys, key, val, i, c;

        if (typeof hash !== "object") return json; // no options passed

        // convert all 'flat-keys' to 'sub-key' format
        for (optKey in hash) {
            branch = json;
            val = hash[optKey];
            keys = optKey.split("__"); // eg: west__size or north__fxSettings__duration
            c = keys.length - 1;
            // convert underscore-delimited to subkeys
            for (i = 0; i <= c; i++) {
                key = keys[i];
                if (i === c) { // last key = value
                    if ($.isPlainObject(val))
                        branch[key] = $.layout.transformData(val); // RECURSE
                    else
                        branch[key] = val;
                } else {
                    if (!branch[key])
                        branch[key] = {}; // create the subkey
                    // recurse to sub-key for next loop - if not done
                    branch = branch[key];
                }
            }
        }
        return json;
    };

    // INTERNAL CONFIG DATA - DO NOT CHANGE THIS!
    $.layout.backwardCompatibility = {
        // data used by renameOldOptions()
        map: {
            //  OLD Option Name:            NEW Option Name
            applyDefaultStyles: "applyDemoStyles"
            //  CHILD/NESTED LAYOUTS
            ,
            childOptions: "children",
            initChildLayout: "initChildren",
            destroyChildLayout: "destroyChildren",
            resizeChildLayout: "resizeChildren",
            resizeNestedLayout: "resizeChildren"
            //  MISC Options
            ,
            resizeWhileDragging: "livePaneResizing",
            resizeContentWhileDragging: "liveContentResizing",
            triggerEventsWhileDragging: "triggerEventsDuringLiveResize",
            maskIframesOnResize: "maskContents"
            //  STATE MANAGEMENT
            ,
            useStateCookie: "stateManagement.enabled",
            "cookie.autoLoad": "stateManagement.autoLoad",
            "cookie.autoSave": "stateManagement.autoSave",
            "cookie.keys": "stateManagement.stateKeys",
            "cookie.name": "stateManagement.cookie.name",
            "cookie.domain": "stateManagement.cookie.domain",
            "cookie.path": "stateManagement.cookie.path",
            "cookie.expires": "stateManagement.cookie.expires",
            "cookie.secure": "stateManagement.cookie.secure"
            //  OLD Language options
            ,
            noRoomToOpenTip: "tips.noRoomToOpen",
            togglerTip_open: "tips.Close" // open   = Close
            ,
            togglerTip_closed: "tips.Open" // closed = Open
            ,
            resizerTip: "tips.Resize",
            sliderTip: "tips.Slide"
        }

        /**
         * @param {Object}   opts
         */
        ,
        renameOptions: function(opts) {
            var map = $.layout.backwardCompatibility.map,
                oldData, newData, value;
            for (var itemPath in map) {
                oldData = getBranch(itemPath);
                value = oldData.branch[oldData.key];
                if (value !== undefined) {
                    newData = getBranch(map[itemPath], true);
                    newData.branch[newData.key] = value;
                    delete oldData.branch[oldData.key];
                }
            }

            /**
             * @param {string}   path
             * @param {boolean=} [create=false]  Create path if does not exist
             */
            function getBranch(path, create) {
                var a = path.split(".") // split keys into array
                    ,
                    c = a.length - 1,
                    D = {
                        branch: opts,
                        key: a[c]
                    } // init branch at top & set key (last item)
                    , i = 0,
                    k, undef;
                for (; i < c; i++) { // skip the last key (data)
                    k = a[i];
                    if (D.branch[k] == undefined) { // child-key does not exist
                        if (create) {
                            D.branch = D.branch[k] = {}; // create child-branch
                        } else // can't go any farther
                            D.branch = {}; // branch is undefined
                    } else
                        D.branch = D.branch[k]; // get child-branch
                }
                return D;
            };
        }

        /**
         * @param {Object}   opts
         */
        ,
        renameAllOptions: function(opts) {
            var ren = $.layout.backwardCompatibility.renameOptions;
            // rename root (layout) options
            ren(opts);
            // rename 'defaults' to 'panes'
            if (opts.defaults) {
                if (typeof opts.panes !== "object")
                    opts.panes = {};
                $.extend(true, opts.panes, opts.defaults);
                delete opts.defaults;
            }
            // rename options in the the options.panes key
            if (opts.panes) ren(opts.panes);
            // rename options inside *each pane key*, eg: options.west
            $.each($.layout.config.allPanes, function(i, pane) {
                if (opts[pane]) ren(opts[pane]);
            });
            return opts;
        }
    };




    /*  ============================================================
     *  BEGIN WIDGET: $( selector ).layout( {options} );
     *  ============================================================
     */
    $.fn.layout = function(opts) {
        var

        // local aliases to global data
        browser = $.layout.browser,
            _c = $.layout.config

            // local aliases to utlity methods
            ,
            cssW = $.layout.cssWidth,
            cssH = $.layout.cssHeight,
            elDims = $.layout.getElementDimensions,
            styles = $.layout.getElementStyles,
            evtObj = $.layout.getEventObject,
            evtPane = $.layout.parsePaneName

            /**
             * options - populated by initOptions()
             */
            ,
            options = $.extend(true, {}, $.layout.defaults),
            effects = options.effects = $.extend(true, {}, $.layout.effects)

            /**
             * layout-state object
             */
            ,
            state = {
                // generate unique ID to use for event.namespace so can unbind only events added by 'this layout'
                id: "layout" + $.now() // code uses alias: sID
                ,
                initialized: false,
                paneResizing: false,
                panesSliding: {},
                container: { // list all keys referenced in code to avoid compiler error msgs
                    innerWidth: 0,
                    innerHeight: 0,
                    outerWidth: 0,
                    outerHeight: 0,
                    layoutWidth: 0,
                    layoutHeight: 0
                },
                north: {
                    childIdx: 0
                },
                south: {
                    childIdx: 0
                },
                east: {
                    childIdx: 0
                },
                west: {
                    childIdx: 0
                },
                center: {
                    childIdx: 0
                }
            }

            /**
             * parent/child-layout pointers
             */
            //, hasParentLayout = false - exists ONLY inside Instance so can be set externally
            , children = {
                north: null,
                south: null,
                east: null,
                west: null,
                center: null
            }

            /*
             * ###########################
             *  INTERNAL HELPER FUNCTIONS
             * ###########################
             */

            /**
             * Manages all internal timers
             */
            , timer = {
                data: {},
                set: function(s, fn, ms) {
                    timer.clear(s);
                    timer.data[s] = setTimeout(fn, ms);
                },
                clear: function(s) {
                    var t = timer.data;
                    if (t[s]) {
                        clearTimeout(t[s]);
                        delete t[s];
                    }
                }
            }

            /**
             * Alert or console.log a message - IF option is enabled.
             *
             * @param {(string|!Object)} msg             Message (or debug-data) to display
             * @param {boolean=}         [popup=false]   True by default, means 'alert', false means use console.log
             * @param {boolean=}         [debug=false]   True means is a widget debugging message
             */
            , _log = function(msg, popup, debug) {
                var o = options;
                if ((o.showErrorMessages && !debug) || (debug && o.showDebugMessages))
                    $.layout.msg(o.name + ' / ' + msg, (popup !== false));
                return false;
            }

            /**
             * Executes a Callback function after a trigger event, like resize, open or close
             *
             * @param {string}               evtName                 Name of the layout callback, eg "onresize_start"
             * @param {(string|boolean)=}    [pane=""]               This is passed only so we can pass the 'pane object' to the callback
             * @param {(string|boolean)=}    [skipBoundEvents=false] True = do not run events bound to the elements - only the callbacks set in options
             */
            , _runCallbacks = function(evtName, pane, skipBoundEvents) {
                var hasPane = pane && isStr(pane),
                    s = hasPane ? state[pane] : state,
                    o = hasPane ? options[pane] : options,
                    lName = options.name
                    // names like onopen and onopen_end separate are interchangeable in options...
                    ,
                    lng = evtName + (evtName.match(/_/) ? "" : "_end"),
                    shrt = lng.match(/_end$/) ? lng.substr(0, lng.length - 4) : "",
                    fn = o[lng] || o[shrt],
                    retVal = "NC" // NC = No Callback
                    ,
                    args = [],
                    $P;
                if (!hasPane && $.type(pane) === 'boolean') {
                    skipBoundEvents = pane; // allow pane param to be skipped for Layout callback
                    pane = "";
                }

                // first trigger the callback set in the options
                if (fn) {
                    try {
                        // convert function name (string) to function object
                        if (isStr(fn)) {
                            if (fn.match(/,/)) {
                                // function name cannot contain a comma, 
                                // so must be a function name AND a parameter to pass
                                args = fn.split(","), fn = eval(args[0]);
                            } else // just the name of an external function?
                                fn = eval(fn);
                        }
                        // execute the callback, if exists
                        if ($.isFunction(fn)) {
                            if (args.length)
                                retVal = g(fn)(args[1]); // pass the argument parsed from 'list'
                            else if (hasPane)
                            // pass data: pane-name, pane-element, pane-state, pane-options, and layout-name
                                retVal = g(fn)(pane, $Ps[pane], s, o, lName);
                            else // must be a layout/container callback - pass suitable info
                                retVal = g(fn)(Instance, s, o, lName);
                        }
                    } catch (ex) {
                        _log(options.errors.callbackError.replace(/EVENT/, $.trim((pane || "") + " " + lng)), false);
                        if ($.type(ex) === 'string' && string.length)
                            _log('Exception:  ' + ex, false);
                    }
                }

                // trigger additional events bound directly to the pane
                if (!skipBoundEvents && retVal !== false) {
                    if (hasPane) { // PANE events can be bound to each pane-elements
                        $P = $Ps[pane];
                        o = options[pane];
                        s = state[pane];
                        $P.triggerHandler('layoutpane' + lng, [pane, $P, s, o, lName]);
                        if (shrt)
                            $P.triggerHandler('layoutpane' + shrt, [pane, $P, s, o, lName]);
                    } else { // LAYOUT events can be bound to the container-element
                        $N.triggerHandler('layout' + lng, [Instance, s, o, lName]);
                        if (shrt)
                            $N.triggerHandler('layout' + shrt, [Instance, s, o, lName]);
                    }
                }

                // ALWAYS resizeChildren after an onresize_end event - even during initialization
                // IGNORE onsizecontent_end event because causes child-layouts to resize TWICE
                if (hasPane && evtName === "onresize_end") // BAD: || evtName === "onsizecontent_end"
                    resizeChildren(pane + "", true); // compiler hack -force string

                return retVal;

                function g(f) {
                    return f;
                }; // compiler hack
            }


            /**
             * cure iframe display issues in IE & other browsers
             */
            , _fixIframe = function(pane) {
                if (browser.mozilla) return; // skip FireFox - it auto-refreshes iframes onShow
                var $P = $Ps[pane];
                // if the 'pane' is an iframe, do it
                if (state[pane].tagName === "IFRAME")
                    $P.css(_c.hidden).css(_c.visible);
                else // ditto for any iframes INSIDE the pane
                    $P.find('IFRAME').css(_c.hidden).css(_c.visible);
            }

            /**
             * @param  {string}      pane        Can accept ONLY a 'pane' (east, west, etc)
             * @param  {number=}     outerSize   (optional) Can pass a width, allowing calculations BEFORE element is resized
             * @return {number}      Returns the innerHeight/Width of el by subtracting padding and borders
             */
            , cssSize = function(pane, outerSize) {
                var fn = _c[pane].dir == "horz" ? cssH : cssW;
                return fn($Ps[pane], outerSize);
            }

            /**
             * @param  {string}      pane        Can accept ONLY a 'pane' (east, west, etc)
             * @return {Object}      Returns hash of minWidth & minHeight
             */
            , cssMinDims = function(pane) {
                // minWidth/Height means CSS width/height = 1px
                var $P = $Ps[pane],
                    dir = _c[pane].dir,
                    d = {
                        minWidth: 1001 - cssW($P, 1000),
                        minHeight: 1001 - cssH($P, 1000)
                    };
                if (dir === "horz") d.minSize = d.minHeight;
                if (dir === "vert") d.minSize = d.minWidth;
                return d;
            }

            // TODO: see if these methods can be made more useful...
            // TODO: *maybe* return cssW/H from these so caller can use this info

            /**
             * @param {(string|!Object)}     el
             * @param {number=}              outerWidth
             * @param {boolean=}             [autoHide=false]
             */
            , setOuterWidth = function(el, outerWidth, autoHide) {
                var $E = el,
                    w;
                if (isStr(el)) $E = $Ps[el]; // west
                else if (!el.jquery) $E = $(el);
                w = cssW($E, outerWidth);
                $E.css({
                    width: w
                });
                if (w > 0) {
                    if (autoHide && $E.data('autoHidden') && $E.innerHeight() > 0) {
                        $E.show().data('autoHidden', false);
                        if (!browser.mozilla) // FireFox refreshes iframes - IE does not
                        // make hidden, then visible to 'refresh' display after animation
                            $E.css(_c.hidden).css(_c.visible);
                    }
                } else if (autoHide && !$E.data('autoHidden'))
                    $E.hide().data('autoHidden', true);
            }

            /**
             * @param {(string|!Object)}     el
             * @param {number=}              outerHeight
             * @param {boolean=}             [autoHide=false]
             */
            , setOuterHeight = function(el, outerHeight, autoHide) {
                var $E = el,
                    h;
                if (isStr(el)) $E = $Ps[el]; // west
                else if (!el.jquery) $E = $(el);
                h = cssH($E, outerHeight);
                $E.css({
                    height: h,
                    visibility: "visible"
                }); // may have been 'hidden' by sizeContent
                if (h > 0 && $E.innerWidth() > 0) {
                    if (autoHide && $E.data('autoHidden')) {
                        $E.show().data('autoHidden', false);
                        if (!browser.mozilla) // FireFox refreshes iframes - IE does not
                            $E.css(_c.hidden).css(_c.visible);
                    }
                } else if (autoHide && !$E.data('autoHidden'))
                    $E.hide().data('autoHidden', true);
            }


            /**
    * Converts any 'size' params to a pixel/integer size, if not already
    * If 'auto' or a decimal/percentage is passed as 'size', a pixel-size is calculated
    *
    /**
    * @param  {string}              pane
    * @param  {(string|number)=}    size
    * @param  {string=}             [dir]
    * @return {number}
    */
            , _parseSize = function(pane, size, dir) {
                if (!dir) dir = _c[pane].dir;

                if (isStr(size) && size.match(/%/))
                    size = (size === '100%') ? -1 : parseInt(size, 10) / 100; // convert % to decimal

                if (size === 0)
                    return 0;
                else if (size >= 1)
                    return parseInt(size, 10);

                var o = options,
                    avail = 0;
                if (dir == "horz") // north or south or center.minHeight
                    avail = sC.innerHeight - ($Ps.north ? o.north.spacing_open : 0) - ($Ps.south ? o.south.spacing_open : 0);
                else if (dir == "vert") // east or west or center.minWidth
                    avail = sC.innerWidth - ($Ps.west ? o.west.spacing_open : 0) - ($Ps.east ? o.east.spacing_open : 0);

                if (size === -1) // -1 == 100%
                    return avail;
                else if (size > 0) // percentage, eg: .25
                    return round(avail * size);
                else if (pane == "center")
                    return 0;
                else { // size < 0 || size=='auto' || size==Missing || size==Invalid
                    // auto-size the pane
                    var dim = (dir === "horz" ? "height" : "width"),
                        $P = $Ps[pane],
                        $C = dim === 'height' ? $Cs[pane] : false,
                        vis = $.layout.showInvisibly($P) // show pane invisibly if hidden
                        ,
                        szP = $P.css(dim) // SAVE current pane size
                        ,
                        szC = $C ? $C.css(dim) : 0 // SAVE current content size
                        ;
                    $P.css(dim, "auto");
                    if ($C) $C.css(dim, "auto");
                    size = (dim === "height") ? $P.outerHeight() : $P.outerWidth(); // MEASURE
                    $P.css(dim, szP).css(vis); // RESET size & visibility
                    if ($C) $C.css(dim, szC);
                    return size;
                }
            }

            /**
             * Calculates current 'size' (outer-width or outer-height) of a border-pane - optionally with 'pane-spacing' added
             *
             * @param  {(string|!Object)}    pane
             * @param  {boolean=}            [inclSpace=false]
             * @return {number}              Returns EITHER Width for east/west panes OR Height for north/south panes
             */
            , getPaneSize = function(pane, inclSpace) {
                var
                $P = $Ps[pane],
                    o = options[pane],
                    s = state[pane],
                    oSp = (inclSpace ? o.spacing_open : 0),
                    cSp = (inclSpace ? o.spacing_closed : 0);
                if (!$P || s.isHidden)
                    return 0;
                else if (s.isClosed || (s.isSliding && inclSpace))
                    return cSp;
                else if (_c[pane].dir === "horz")
                    return $P.outerHeight() + oSp;
                else // dir === "vert"
                    return $P.outerWidth() + oSp;
            }

            /**
             * Calculate min/max pane dimensions and limits for resizing
             *
             * @param  {string}      pane
             * @param  {boolean=}    [slide=false]
             */
            , setSizeLimits = function(pane, slide) {
                if (!isInitialized()) return;
                var
                o = options[pane],
                    s = state[pane],
                    c = _c[pane],
                    dir = c.dir,
                    type = c.sizeType.toLowerCase(),
                    isSliding = (slide != undefined ? slide : s.isSliding) // only open() passes 'slide' param
                    ,
                    $P = $Ps[pane],
                    paneSpacing = o.spacing_open
                    //  measure the pane on the *opposite side* from this pane
                    ,
                    altPane = _c.oppositeEdge[pane],
                    altS = state[altPane],
                    $altP = $Ps[altPane],
                    altPaneSize = (!$altP || altS.isVisible === false || altS.isSliding ? 0 : (dir == "horz" ? $altP.outerHeight() : $altP.outerWidth())),
                    altPaneSpacing = ((!$altP || altS.isHidden ? 0 : options[altPane][altS.isClosed !== false ? "spacing_closed" : "spacing_open"]) || 0)
                    //  limitSize prevents this pane from 'overlapping' opposite pane
                    ,
                    containerSize = (dir == "horz" ? sC.innerHeight : sC.innerWidth),
                    minCenterDims = cssMinDims("center"),
                    minCenterSize = dir == "horz" ? max(options.center.minHeight, minCenterDims.minHeight) : max(options.center.minWidth, minCenterDims.minWidth)
                    //  if pane is 'sliding', then ignore center and alt-pane sizes - because 'overlays' them
                    ,
                    limitSize = (containerSize - paneSpacing - (isSliding ? 0 : (_parseSize("center", minCenterSize, dir) + altPaneSize + altPaneSpacing))),
                    minSize = s.minSize = max(_parseSize(pane, o.minSize), cssMinDims(pane).minSize),
                    maxSize = s.maxSize = min((o.maxSize ? _parseSize(pane, o.maxSize) : 100000), limitSize),
                    r = s.resizerPosition = {} // used to set resizing limits
                    , top = sC.inset.top,
                    left = sC.inset.left,
                    W = sC.innerWidth,
                    H = sC.innerHeight,
                    rW = o.spacing_open // subtract resizer-width to get top/left position for south/east
                    ;
                switch (pane) {
                    case "north":
                        r.min = top + minSize;
                        r.max = top + maxSize;
                        break;
                    case "west":
                        r.min = left + minSize;
                        r.max = left + maxSize;
                        break;
                    case "south":
                        r.min = top + H - maxSize - rW;
                        r.max = top + H - minSize - rW;
                        break;
                    case "east":
                        r.min = left + W - maxSize - rW;
                        r.max = left + W - minSize - rW;
                        break;
                };
            }

            /**
             * Returns data for setting the size/position of center pane. Also used to set Height for east/west panes
             *
             * @return JSON  Returns a hash of all dimensions: top, bottom, left, right, (outer) width and (outer) height
             */
            , calcNewCenterPaneDims = function() {
                var d = {
                    top: getPaneSize("north", true) // true = include 'spacing' value for pane
                    ,
                    bottom: getPaneSize("south", true),
                    left: getPaneSize("west", true),
                    right: getPaneSize("east", true),
                    width: 0,
                    height: 0
                };

                // NOTE: sC = state.container
                // calc center-pane outer dimensions
                d.width = sC.innerWidth - d.left - d.right; // outerWidth
                d.height = sC.innerHeight - d.bottom - d.top; // outerHeight
                // add the 'container border/padding' to get final positions relative to the container
                d.top += sC.inset.top;
                d.bottom += sC.inset.bottom;
                d.left += sC.inset.left;
                d.right += sC.inset.right;

                return d;
            }


            /**
             * @param {!Object}      el
             * @param {boolean=}     [allStates=false]
             */
            , getHoverClasses = function(el, allStates) {
                var
                $El = $(el),
                    type = $El.data("layoutRole"),
                    pane = $El.data("layoutEdge"),
                    o = options[pane],
                    root = o[type + "Class"],
                    _pane = "-" + pane // eg: "-west"
                    ,
                    _open = "-open",
                    _closed = "-closed",
                    _slide = "-sliding",
                    _hover = "-hover " // NOTE the trailing space
                    ,
                    _state = $El.hasClass(root + _closed) ? _closed : _open,
                    _alt = _state === _closed ? _open : _closed,
                    classes = (root + _hover) + (root + _pane + _hover) + (root + _state + _hover) + (root + _pane + _state + _hover);
                if (allStates) // when 'removing' classes, also remove alternate-state classes
                    classes += (root + _alt + _hover) + (root + _pane + _alt + _hover);

                if (type == "resizer" && $El.hasClass(root + _slide))
                    classes += (root + _slide + _hover) + (root + _pane + _slide + _hover);

                return $.trim(classes);
            }, addHover = function(evt, el) {
                var $E = $(el || this);
                if (evt && $E.data("layoutRole") === "toggler")
                    evt.stopPropagation(); // prevent triggering 'slide' on Resizer-bar
                $E.addClass(getHoverClasses($E));
            }, removeHover = function(evt, el) {
                var $E = $(el || this);
                $E.removeClass(getHoverClasses($E, true));
            }

            , onResizerEnter = function(evt) { // ALSO called by toggler.mouseenter
                var pane = $(this).data("layoutEdge"),
                    s = state[pane];
                // ignore closed-panes and mouse moving back & forth over resizer!
                // also ignore if ANY pane is currently resizing
                if (s.isClosed || s.isResizing || state.paneResizing) return;

                if ($.fn.disableSelection)
                    $("body").disableSelection();
                if (options.maskPanesEarly)
                    showMasks(pane, {
                        resizing: true
                    });
            }, onResizerLeave = function(evt, el) {
                var e = el || this // el is only passed when called by the timer
                    ,
                    pane = $(e).data("layoutEdge"),
                    name = pane + "ResizerLeave";
                timer.clear(pane + "_openSlider"); // cancel slideOpen timer, if set
                timer.clear(name); // cancel enableSelection timer - may re/set below
                // this method calls itself on a timer because it needs to allow
                // enough time for dragging to kick-in and set the isResizing flag
                // dragging has a 100ms delay set, so this delay must be >100
                if (!el) // 1st call - mouseleave event
                    timer.set(name, function() {
                        onResizerLeave(evt, e);
                    }, 200);
                // if user is resizing, then dragStop will enableSelection(), so can skip it here
                else if (!state.paneResizing) { // 2nd call - by timer
                    if ($.fn.enableSelection)
                        $("body").enableSelection();
                    if (options.maskPanesEarly)
                        hideMasks();
                }
            }

            /*
             * ###########################
             *   INITIALIZATION METHODS
             * ###########################
             */

            /**
             * Initialize the layout - called automatically whenever an instance of layout is created
             *
             * @see  none - triggered onInit
             * @return  mixed    true = fully initialized | false = panes not initialized (yet) | 'cancel' = abort
             */
            , _create = function() {
                // initialize config/options
                initOptions();
                var o = options,
                    s = state;

                // TEMP state so isInitialized returns true during init process
                s.creatingLayout = true;

                // init plugins for this layout, if there are any (eg: stateManagement)
                runPluginCallbacks(Instance, $.layout.onCreate);

                // options & state have been initialized, so now run beforeLoad callback
                // onload will CANCEL layout creation if it returns false
                if (false === _runCallbacks("onload_start"))
                    return 'cancel';

                // initialize the container element
                _initContainer();

                // bind hotkey function - keyDown - if required
                initHotkeys();

                // bind window.onunload
                $(window).bind("unload." + sID, unload);

                // init plugins for this layout, if there are any (eg: customButtons)
                runPluginCallbacks(Instance, $.layout.onLoad);

                // if layout elements are hidden, then layout WILL NOT complete initialization!
                // initLayoutElements will set initialized=true and run the onload callback IF successful
                if (o.initPanes) _initLayoutElements();

                delete s.creatingLayout;

                return state.initialized;
            }

            /**
             * Initialize the layout IF not already
             *
             * @see  All methods in Instance run this test
             * @return  boolean  true = layoutElements have been initialized | false = panes are not initialized (yet)
             */
            , isInitialized = function() {
                if (state.initialized || state.creatingLayout) return true; // already initialized
                else return _initLayoutElements(); // try to init panes NOW
            }

            /**
             * Initialize the layout - called automatically whenever an instance of layout is created
             *
             * @see  _create() & isInitialized
             * @param {boolean=}     [retry=false]   // indicates this is a 2nd try
             * @return  An object pointer to the instance created
             */
            , _initLayoutElements = function(retry) {
                // initialize config/options
                var o = options;
                // CANNOT init panes inside a hidden container!
                if (!$N.is(":visible")) {
                    // handle Chrome bug where popup window 'has no height'
                    // if layout is BODY element, try again in 50ms
                    // SEE: http://layout.jquery-dev.net/samples/test_popup_window.html
                    if (!retry && browser.webkit && $N[0].tagName === "BODY")
                        setTimeout(function() {
                            _initLayoutElements(true);
                        }, 50);
                    return false;
                }

                // a center pane is required, so make sure it exists
                if (!getPane("center").length) {
                    return _log(o.errors.centerPaneMissing);
                }

                // TEMP state so isInitialized returns true during init process
                state.creatingLayout = true;

                // update Container dims
                $.extend(sC, elDims($N, o.inset)); // passing inset means DO NOT include insetX values

                // initialize all layout elements
                initPanes(); // size & position panes - calls initHandles() - which calls initResizable()

                if (o.scrollToBookmarkOnLoad) {
                    var l = self.location;
                    if (l.hash) l.replace(l.hash); // scrollTo Bookmark
                }

                // check to see if this layout 'nested' inside a pane
                if (Instance.hasParentLayout)
                    o.resizeWithWindow = false;
                // bind resizeAll() for 'this layout instance' to window.resize event
                else if (o.resizeWithWindow)
                    $(window).bind("resize." + sID, windowResize);

                delete state.creatingLayout;
                state.initialized = true;

                // init plugins for this layout, if there are any
                runPluginCallbacks(Instance, $.layout.onReady);

                // now run the onload callback, if exists
                _runCallbacks("onload_end");

                return true; // elements initialized successfully
            }

            /**
             * Initialize nested layouts for a specific pane - can optionally pass layout-options
             *
             * @param {(string|Object)}  evt_or_pane The pane being opened, ie: north, south, east, or west
             * @param {Object=}          [opts]      Layout-options - if passed, will OVERRRIDE options[pane].children
             * @return  An object pointer to the layout instance created - or null
             */
            , createChildren = function(evt_or_pane, opts) {
                var pane = evtPane.call(this, evt_or_pane),
                    $P = $Ps[pane];
                if (!$P) return;
                var $C = $Cs[pane],
                    s = state[pane],
                    o = options[pane],
                    sm = options.stateManagement || {}, cos = opts ? (o.children = opts) : o.children;
                if ($.isPlainObject(cos))
                    cos = [cos]; // convert a hash to a 1-elem array
                else if (!cos || !$.isArray(cos))
                    return;

                $.each(cos, function(idx, co) {
                    if (!$.isPlainObject(co)) return;

                    // determine which element is supposed to be the 'child container'
                    // if pane has a 'containerSelector' OR a 'content-div', use those instead of the pane
                    var $containers = co.containerSelector ? $P.find(co.containerSelector) : ($C || $P);

                    $containers.each(function() {
                        var $cont = $(this),
                            child = $cont.data("layout") //   see if a child-layout ALREADY exists on this element
                            ;
                        // if no layout exists, but children are set, try to create the layout now
                        if (!child) {
                            // TODO: see about moving this to the stateManagement plugin, as a method
                            // set a unique child-instance key for this layout, if not already set
                            setInstanceKey({
                                container: $cont,
                                options: co
                            }, s);
                            // If THIS layout has a hash in stateManagement.autoLoad,
                            // then see if it also contains state-data for this child-layout
                            // If so, copy the stateData to child.options.stateManagement.autoLoad
                            if (sm.includeChildren && state.stateData[pane]) {
                                //  THIS layout's state was cached when its state was loaded
                                var paneChildren = state.stateData[pane].children || {}, childState = paneChildren[co.instanceKey],
                                    co_sm = co.stateManagement || (co.stateManagement = {
                                        autoLoad: true
                                    });
                                // COPY the stateData into the autoLoad key
                                if (co_sm.autoLoad === true && childState) {
                                    co_sm.autoSave = false; // disable autoSave because saving handled by parent-layout
                                    co_sm.includeChildren = true; // cascade option - FOR NOW
                                    co_sm.autoLoad = $.extend(true, {}, childState); // COPY the state-hash
                                }
                            }

                            // create the layout
                            child = $cont.layout(co);

                            // if successful, update data
                            if (child) {
                                // add the child and update all layout-pointers
                                // MAY have already been done by child-layout calling parent.refreshChildren()
                                refreshChildren(pane, child);
                            }
                        }
                    });
                });
            }

            , setInstanceKey = function(child, parentPaneState) {
                // create a named key for use in state and instance branches
                var $c = child.container,
                    o = child.options,
                    sm = o.stateManagement,
                    key = o.instanceKey || $c.data("layoutInstanceKey");
                if (!key) key = (sm && sm.cookie ? sm.cookie.name : '') || o.name; // look for a name/key
                if (!key) key = "layout" + (++parentPaneState.childIdx); // if no name/key found, generate one
                else key = key.replace(/[^\w-]/gi, '_').replace(/_{2,}/g, '_'); // ensure is valid as a hash key
                o.instanceKey = key;
                $c.data("layoutInstanceKey", key); // useful if layout is destroyed and then recreated
                return key;
            }

            /**
             * @param {string}       pane        The pane being opened, ie: north, south, east, or west
             * @param {Object=}      newChild    New child-layout Instance to add to this pane
             */
            , refreshChildren = function(pane, newChild) {
                var $P = $Ps[pane],
                    pC = children[pane],
                    s = state[pane],
                    o;
                // check for destroy()ed layouts and update the child pointers & arrays
                if ($.isPlainObject(pC)) {
                    $.each(pC, function(key, child) {
                        if (child.destroyed) delete pC[key]
                    });
                    // if no more children, remove the children hash
                    if ($.isEmptyObject(pC))
                        pC = children[pane] = null; // clear children hash
                }

                // see if there is a directly-nested layout inside this pane
                // if there is, then there can be only ONE child-layout, so check that...
                if (!newChild && !pC) {
                    newChild = $P.data("layout");
                }

                // if a newChild instance was passed, add it to children[pane]
                if (newChild) {
                    // update child.state
                    newChild.hasParentLayout = true; // set parent-flag in child
                    // instanceKey is a key-name used in both state and children
                    o = newChild.options;
                    // set a unique child-instance key for this layout, if not already set
                    setInstanceKey(newChild, s);
                    // add pointer to pane.children hash
                    if (!pC) pC = children[pane] = {}; // create an empty children hash
                    pC[o.instanceKey] = newChild.container.data("layout"); // add childLayout instance
                }

                // ALWAYS refresh the pane.children alias, even if null
                Instance[pane].children = children[pane];

                // if newChild was NOT passed - see if there is a child layout NOW
                if (!newChild) {
                    createChildren(pane); // MAY create a child and re-call this method
                }
            }

            , windowResize = function() {
                var o = options,
                    delay = Number(o.resizeWithWindowDelay);
                if (delay < 10) delay = 100; // MUST have a delay!
                // resizing uses a delay-loop because the resize event fires repeatly - except in FF, but delay anyway
                timer.clear("winResize"); // if already running
                timer.set("winResize", function() {
                    timer.clear("winResize");
                    timer.clear("winResizeRepeater");
                    var dims = elDims($N, o.inset);
                    // only trigger resizeAll() if container has changed size
                    if (dims.innerWidth !== sC.innerWidth || dims.innerHeight !== sC.innerHeight)
                        resizeAll();
                }, delay);
                // ALSO set fixed-delay timer, if not already running
                if (!timer.data["winResizeRepeater"]) setWindowResizeRepeater();
            }

            , setWindowResizeRepeater = function() {
                var delay = Number(options.resizeWithWindowMaxDelay);
                if (delay > 0)
                    timer.set("winResizeRepeater", function() {
                        setWindowResizeRepeater();
                        resizeAll();
                    }, delay);
            }

            , unload = function() {
                var o = options;

                _runCallbacks("onunload_start");

                // trigger plugin callabacks for this layout (eg: stateManagement)
                runPluginCallbacks(Instance, $.layout.onUnload);

                _runCallbacks("onunload_end");
            }

            /**
             * Validate and initialize container CSS and events
             *
             * @see  _create()
             */
            , _initContainer = function() {
                var
                N = $N[0],
                    $H = $("html"),
                    tag = sC.tagName = N.tagName,
                    id = sC.id = N.id,
                    cls = sC.className = N.className,
                    o = options,
                    name = o.name,
                    props = "position,margin,padding,border",
                    css = "layoutCSS",
                    CSS = {}, hid = "hidden" // used A LOT!
                    //  see if this container is a 'pane' inside an outer-layout
                    ,
                    parent = $N.data("parentLayout") // parent-layout Instance
                    ,
                    pane = $N.data("layoutEdge") // pane-name in parent-layout
                    ,
                    isChild = parent && pane,
                    num = $.layout.cssNum,
                    $parent, n;
                // sC = state.container
                sC.selector = $N.selector.split(".slice")[0];
                sC.ref = (o.name ? o.name + ' layout / ' : '') + tag + (id ? "#" + id : cls ? '.[' + cls + ']' : ''); // used in messages
                sC.isBody = (tag === "BODY");

                // try to find a parent-layout
                if (!isChild && !sC.isBody) {
                    $parent = $N.closest("." + $.layout.defaults.panes.paneClass);
                    parent = $parent.data("parentLayout");
                    pane = $parent.data("layoutEdge");
                    isChild = parent && pane;
                }

                $N.data({
                    layout: Instance,
                    layoutContainer: sID // FLAG to indicate this is a layout-container - contains unique internal ID
                })
                    .addClass(o.containerClass);
                var layoutMethods = {
                    destroy: '',
                    initPanes: '',
                    resizeAll: 'resizeAll',
                    resize: 'resizeAll'
                };
                // loop hash and bind all methods - include layoutID namespacing
                for (name in layoutMethods) {
                    $N.bind("layout" + name.toLowerCase() + "." + sID, Instance[layoutMethods[name] || name]);
                }

                // if this container is another layout's 'pane', then set child/parent pointers
                if (isChild) {
                    // update parent flag
                    Instance.hasParentLayout = true;
                    // set pointers to THIS child-layout (Instance) in parent-layout
                    parent.refreshChildren(pane, Instance);
                }

                // SAVE original container CSS for use in destroy()
                if (!$N.data(css)) {
                    // handle props like overflow different for BODY & HTML - has 'system default' values
                    if (sC.isBody) {
                        // SAVE <BODY> CSS
                        $N.data(css, $.extend(styles($N, props), {
                            height: $N.css("height"),
                            overflow: $N.css("overflow"),
                            overflowX: $N.css("overflowX"),
                            overflowY: $N.css("overflowY")
                        }));
                        // ALSO SAVE <HTML> CSS
                        $H.data(css, $.extend(styles($H, 'padding'), {
                            height: "auto" // FF would return a fixed px-size!
                            ,
                            overflow: $H.css("overflow"),
                            overflowX: $H.css("overflowX"),
                            overflowY: $H.css("overflowY")
                        }));
                    } else // handle props normally for non-body elements
                        $N.data(css, styles($N, props + ",top,bottom,left,right,width,height,overflow,overflowX,overflowY"));
                }

                try {
                    // common container CSS
                    CSS = {
                        overflow: hid,
                        overflowX: hid,
                        overflowY: hid
                    };
                    $N.css(CSS);

                    if (o.inset && !$.isPlainObject(o.inset)) {
                        // can specify a single number for equal outset all-around
                        n = parseInt(o.inset, 10) || 0
                        o.inset = {
                            top: n,
                            bottom: n,
                            left: n,
                            right: n
                        };
                    }

                    // format html & body if this is a full page layout
                    if (sC.isBody) {
                        // if HTML has padding, use this as an outer-spacing around BODY
                        if (!o.outset) {
                            // use padding from parent-elem (HTML) as outset
                            o.outset = {
                                top: num($H, "paddingTop"),
                                bottom: num($H, "paddingBottom"),
                                left: num($H, "paddingLeft"),
                                right: num($H, "paddingRight")
                            };
                        } else if (!$.isPlainObject(o.outset)) {
                            // can specify a single number for equal outset all-around
                            n = parseInt(o.outset, 10) || 0
                            o.outset = {
                                top: n,
                                bottom: n,
                                left: n,
                                right: n
                            };
                        }
                        // HTML
                        $H.css(CSS).css({
                            height: "100%",
                            border: "none" // no border or padding allowed when using height = 100%
                            ,
                            padding: 0 // ditto
                            ,
                            margin: 0
                        });
                        // BODY
                        if (browser.isIE6) {
                            // IE6 CANNOT use the trick of setting absolute positioning on all 4 sides - must have 'height'
                            $N.css({
                                width: "100%",
                                height: "100%",
                                border: "none" // no border or padding allowed when using height = 100%
                                ,
                                padding: 0 // ditto
                                ,
                                margin: 0,
                                position: "relative"
                            });
                            // convert body padding to an inset option - the border cannot be measured in IE6!
                            if (!o.inset) o.inset = elDims($N).inset;
                        } else { // use absolute positioning for BODY to allow borders & padding without overflow
                            $N.css({
                                width: "auto",
                                height: "auto",
                                margin: 0,
                                position: "absolute" // allows for border and padding on BODY
                            });
                            // apply edge-positioning created above
                            $N.css(o.outset);
                        }
                        // set current layout-container dimensions
                        $.extend(sC, elDims($N, o.inset)); // passing inset means DO NOT include insetX values
                    } else {
                        // container MUST have 'position'
                        var p = $N.css("position");
                        if (!p || !p.match(/(fixed|absolute|relative)/))
                            $N.css("position", "relative");

                        // set current layout-container dimensions
                        if ($N.is(":visible")) {
                            $.extend(sC, elDims($N, o.inset)); // passing inset means DO NOT change insetX (padding) values
                            if (sC.innerHeight < 1) // container has no 'height' - warn developer
                                _log(o.errors.noContainerHeight.replace(/CONTAINER/, sC.ref));
                        }
                    }

                    // if container has min-width/height, then enable scrollbar(s)
                    if (num($N, "minWidth")) $N.parent().css("overflowX", "auto");
                    if (num($N, "minHeight")) $N.parent().css("overflowY", "auto");

                } catch (ex) {}
            }

            /**
             * Bind layout hotkeys - if options enabled
             *
             * @see  _create() and addPane()
             * @param {string=}  [panes=""]  The edge(s) to process
             */
            , initHotkeys = function(panes) {
                panes = panes ? panes.split(",") : _c.borderPanes;
                // bind keyDown to capture hotkeys, if option enabled for ANY pane
                $.each(panes, function(i, pane) {
                    var o = options[pane];
                    if (o.enableCursorHotkey || o.customHotkey) {
                        $(document).bind("keydown." + sID, keyDown); // only need to bind this ONCE
                        return false; // BREAK - binding was done
                    }
                });
            }

            /**
             * Build final OPTIONS data
             *
             * @see  _create()
             */
            , initOptions = function() {
                var data, d, pane, key, val, i, c, o;

                // reprocess user's layout-options to have correct options sub-key structure
                opts = $.layout.transformData(opts, true); // panes = default subkey

                // auto-rename old options for backward compatibility
                opts = $.layout.backwardCompatibility.renameAllOptions(opts);

                // if user-options has 'panes' key (pane-defaults), clean it...
                if (!$.isEmptyObject(opts.panes)) {
                    // REMOVE any pane-defaults that MUST be set per-pane
                    data = $.layout.optionsMap.noDefault;
                    for (i = 0, c = data.length; i < c; i++) {
                        key = data[i];
                        delete opts.panes[key]; // OK if does not exist
                    }
                    // REMOVE any layout-options specified under opts.panes
                    data = $.layout.optionsMap.layout;
                    for (i = 0, c = data.length; i < c; i++) {
                        key = data[i];
                        delete opts.panes[key]; // OK if does not exist
                    }
                }

                // MOVE any NON-layout-options from opts-root to opts.panes
                data = $.layout.optionsMap.layout;
                var rootKeys = $.layout.config.optionRootKeys;
                for (key in opts) {
                    val = opts[key];
                    if ($.inArray(key, rootKeys) < 0 && $.inArray(key, data) < 0) {
                        if (!opts.panes[key])
                            opts.panes[key] = $.isPlainObject(val) ? $.extend(true, {}, val) : val;
                        delete opts[key]
                    }
                }

                // START by updating ALL options from opts
                $.extend(true, options, opts);

                // CREATE final options (and config) for EACH pane
                $.each(_c.allPanes, function(i, pane) {

                    // apply 'pane-defaults' to CONFIG.[PANE]
                    _c[pane] = $.extend(true, {}, _c.panes, _c[pane]);

                    d = options.panes;
                    o = options[pane];

                    // center-pane uses SOME keys in defaults.panes branch
                    if (pane === 'center') {
                        // ONLY copy keys from opts.panes listed in: $.layout.optionsMap.center
                        data = $.layout.optionsMap.center; // list of 'center-pane keys'
                        for (i = 0, c = data.length; i < c; i++) { // loop the list...
                            key = data[i];
                            // only need to use pane-default if pane-specific value not set
                            if (!opts.center[key] && (opts.panes[key] || !o[key]))
                                o[key] = d[key]; // pane-default
                        }
                    } else {
                        // border-panes use ALL keys in defaults.panes branch
                        o = options[pane] = $.extend(true, {}, d, o); // re-apply pane-specific opts AFTER pane-defaults
                        createFxOptions(pane);
                        // ensure all border-pane-specific base-classes exist
                        if (!o.resizerClass) o.resizerClass = "ui-layout-resizer";
                        if (!o.togglerClass) o.togglerClass = "ui-layout-toggler";
                    }
                    // ensure we have base pane-class (ALL panes)
                    if (!o.paneClass) o.paneClass = "ui-layout-pane";
                });

                // update options.zIndexes if a zIndex-option specified
                var zo = opts.zIndex,
                    z = options.zIndexes;
                if (zo > 0) {
                    z.pane_normal = zo;
                    z.content_mask = max(zo + 1, z.content_mask); // MIN = +1
                    z.resizer_normal = max(zo + 2, z.resizer_normal); // MIN = +2
                }

                // DELETE 'panes' key now that we are done - values were copied to EACH pane
                delete options.panes;


                function createFxOptions(pane) {
                    var o = options[pane],
                        d = options.panes;
                    // ensure fxSettings key to avoid errors
                    if (!o.fxSettings) o.fxSettings = {};
                    if (!d.fxSettings) d.fxSettings = {};

                    $.each(["_open", "_close", "_size"], function(i, n) {
                        var
                        sName = "fxName" + n,
                            sSpeed = "fxSpeed" + n,
                            sSettings = "fxSettings" + n
                            // recalculate fxName according to specificity rules
                            ,
                            fxName = o[sName] =
                                o[sName] // options.west.fxName_open
                            || d[sName] // options.panes.fxName_open
                            || o.fxName // options.west.fxName
                            || d.fxName // options.panes.fxName
                            || "none" // MEANS $.layout.defaults.panes.fxName == "" || false || null || 0
                            ,
                            fxExists = $.effects && ($.effects[fxName] || ($.effects.effect && $.effects.effect[fxName]));
                        // validate fxName to ensure is valid effect - MUST have effect-config data in options.effects
                        if (fxName === "none" || !options.effects[fxName] || !fxExists)
                            fxName = o[sName] = "none"; // effect not loaded OR unrecognized fxName

                        // set vars for effects subkeys to simplify logic
                        var fx = options.effects[fxName] || {} // effects.slide
                            , fx_all = fx.all || null // effects.slide.all
                            ,
                            fx_pane = fx[pane] || null // effects.slide.west
                            ;
                        // create fxSpeed[_open|_close|_size]
                        o[sSpeed] =
                            o[sSpeed] // options.west.fxSpeed_open
                        || d[sSpeed] // options.west.fxSpeed_open
                        || o.fxSpeed // options.west.fxSpeed
                        || d.fxSpeed // options.panes.fxSpeed
                        || null // DEFAULT - let fxSetting.duration control speed
                        ;
                        // create fxSettings[_open|_close|_size]
                        o[sSettings] = $.extend(
                            true, {}, fx_all // effects.slide.all
                            , fx_pane // effects.slide.west
                            , d.fxSettings // options.panes.fxSettings
                            , o.fxSettings // options.west.fxSettings
                            , d[sSettings] // options.panes.fxSettings_open
                            , o[sSettings] // options.west.fxSettings_open
                        );
                    });

                    // DONE creating action-specific-settings for this pane,
                    // so DELETE generic options - are no longer meaningful
                    delete o.fxName;
                    delete o.fxSpeed;
                    delete o.fxSettings;
                }
            }

            /**
             * Initialize module objects, styling, size and position for all panes
             *
             * @see  _initElements()
             * @param {string}   pane        The pane to process
             */
            , getPane = function(pane) {
                var sel = options[pane].paneSelector
                if (sel.substr(0, 1) === "#") // ID selector
                // NOTE: elements selected 'by ID' DO NOT have to be 'children'
                    return $N.find(sel).eq(0);
                else { // class or other selector
                    var $P = $N.children(sel).eq(0);
                    // look for the pane nested inside a 'form' element
                    return $P.length ? $P : $N.children("form:first").children(sel).eq(0);
                }
            }

            /**
             * @param {Object=}      evt
             */
            , initPanes = function(evt) {
                // stopPropagation if called by trigger("layoutinitpanes") - use evtPane utility 
                evtPane(evt);

                // NOTE: do north & south FIRST so we can measure their height - do center LAST
                $.each(_c.allPanes, function(idx, pane) {
                    addPane(pane, true);
                });

                // init the pane-handles NOW in case we have to hide or close the pane below
                initHandles();

                // now that all panes have been initialized and initially-sized,
                // make sure there is really enough space available for each pane
                $.each(_c.borderPanes, function(i, pane) {
                    if ($Ps[pane] && state[pane].isVisible) { // pane is OPEN
                        setSizeLimits(pane);
                        makePaneFit(pane); // pane may be Closed, Hidden or Resized by makePaneFit()
                    }
                });
                // size center-pane AGAIN in case we 'closed' a border-pane in loop above
                sizeMidPanes("center");

                //  Chrome/Webkit sometimes fires callbacks BEFORE it completes resizing!
                //  Before RC30.3, there was a 10ms delay here, but that caused layout 
                //  to load asynchrously, which is BAD, so try skipping delay for now

                // process pane contents and callbacks, and init/resize child-layout if exists
                $.each(_c.allPanes, function(idx, pane) {
                    afterInitPane(pane);
                });
            }

            /**
             * Add a pane to the layout - subroutine of initPanes()
             *
             * @see  initPanes()
             * @param {string}   pane            The pane to process
             * @param {boolean=} [force=false]   Size content after init
             */
            , addPane = function(pane, force) {
                if (!force && !isInitialized()) return;
                var
                o = options[pane],
                    s = state[pane],
                    c = _c[pane],
                    dir = c.dir,
                    fx = s.fx,
                    spacing = o.spacing_open || 0,
                    isCenter = (pane === "center"),
                    CSS = {}, $P = $Ps[pane],
                    size, minSize, maxSize, child;
                // if pane-pointer already exists, remove the old one first
                if ($P)
                    removePane(pane, false, true, false);
                else
                    $Cs[pane] = false; // init

                $P = $Ps[pane] = getPane(pane);
                if (!$P.length) {
                    $Ps[pane] = false; // logic
                    return;
                }

                // SAVE original Pane CSS
                if (!$P.data("layoutCSS")) {
                    var props = "position,top,left,bottom,right,width,height,overflow,zIndex,display,backgroundColor,padding,margin,border";
                    $P.data("layoutCSS", styles($P, props));
                }

                // create alias for pane data in Instance - initHandles will add more
                Instance[pane] = {
                    name: pane,
                    pane: $Ps[pane],
                    content: $Cs[pane],
                    options: options[pane],
                    state: state[pane],
                    children: children[pane]
                };

                // add classes, attributes & events
                $P.data({
                    parentLayout: Instance // pointer to Layout Instance
                    ,
                    layoutPane: Instance[pane] // NEW pointer to pane-alias-object
                    ,
                    layoutEdge: pane,
                    layoutRole: "pane"
                })
                    .css(c.cssReq).css("zIndex", options.zIndexes.pane_normal)
                    .css(o.applyDemoStyles ? c.cssDemo : {}) // demo styles
                .addClass(o.paneClass + " " + o.paneClass + "-" + pane) // default = "ui-layout-pane ui-layout-pane-west" - may be a dupe of 'paneSelector'
                .bind("mouseenter." + sID, addHover)
                    .bind("mouseleave." + sID, removeHover);
                var paneMethods = {
                    hide: '',
                    show: '',
                    toggle: '',
                    close: '',
                    open: '',
                    slideOpen: '',
                    slideClose: '',
                    slideToggle: '',
                    size: 'sizePane',
                    sizePane: 'sizePane',
                    sizeContent: '',
                    sizeHandles: '',
                    enableClosable: '',
                    disableClosable: '',
                    enableSlideable: '',
                    disableSlideable: '',
                    enableResizable: '',
                    disableResizable: '',
                    swapPanes: 'swapPanes',
                    swap: 'swapPanes',
                    move: 'swapPanes',
                    removePane: 'removePane',
                    remove: 'removePane',
                    createChildren: '',
                    resizeChildren: '',
                    resizeAll: 'resizeAll',
                    resizeLayout: 'resizeAll'
                }, name;
                // loop hash and bind all methods - include layoutID namespacing
                for (name in paneMethods) {
                    $P.bind("layoutpane" + name.toLowerCase() + "." + sID, Instance[paneMethods[name] || name]);
                }

                // see if this pane has a 'scrolling-content element'
                initContent(pane, false); // false = do NOT sizeContent() - called later

                if (!isCenter) {
                    // call _parseSize AFTER applying pane classes & styles - but before making visible (if hidden)
                    // if o.size is auto or not valid, then MEASURE the pane and use that as its 'size'
                    size = s.size = _parseSize(pane, o.size);
                    minSize = _parseSize(pane, o.minSize) || 1;
                    maxSize = _parseSize(pane, o.maxSize) || 100000;
                    if (size > 0) size = max(min(size, maxSize), minSize);
                    s.autoResize = o.autoResize; // used with percentage sizes

                    // state for border-panes
                    s.isClosed = false; // true = pane is closed
                    s.isSliding = false; // true = pane is currently open by 'sliding' over adjacent panes
                    s.isResizing = false; // true = pane is in process of being resized
                    s.isHidden = false; // true = pane is hidden - no spacing, resizer or toggler is visible!

                    // array for 'pin buttons' whose classNames are auto-updated on pane-open/-close
                    if (!s.pins) s.pins = [];
                }
                //  states common to ALL panes
                s.tagName = $P[0].tagName;
                s.edge = pane; // useful if pane is (or about to be) 'swapped' - easy find out where it is (or is going)
                s.noRoom = false; // true = pane 'automatically' hidden due to insufficient room - will unhide automatically
                s.isVisible = true; // false = pane is invisible - closed OR hidden - simplify logic

                // init pane positioning
                setPanePosition(pane);

                // if pane is not visible, 
                if (dir === "horz") // north or south pane
                    CSS.height = cssH($P, size);
                else if (dir === "vert") // east or west pane
                    CSS.width = cssW($P, size);
                //else if (isCenter) {}

                $P.css(CSS); // apply size -- top, bottom & height will be set by sizeMidPanes
                if (dir != "horz") sizeMidPanes(pane, true); // true = skipCallback

                // if manually adding a pane AFTER layout initialization, then...
                if (state.initialized) {
                    initHandles(pane);
                    initHotkeys(pane);
                }

                // close or hide the pane if specified in settings
                if (o.initClosed && o.closable && !o.initHidden)
                    close(pane, true, true); // true, true = force, noAnimation
                else if (o.initHidden || o.initClosed)
                    hide(pane); // will be completely invisible - no resizer or spacing
                else if (!s.noRoom)
                // make the pane visible - in case was initially hidden
                    $P.css("display", "block");
                // ELSE setAsOpen() - called later by initHandles()

                // RESET visibility now - pane will appear IF display:block
                $P.css("visibility", "visible");

                // check option for auto-handling of pop-ups & drop-downs
                if (o.showOverflowOnHover)
                    $P.hover(allowOverflow, resetOverflow);

                // if manually adding a pane AFTER layout initialization, then...
                if (state.initialized) {
                    afterInitPane(pane);
                }
            }

            , afterInitPane = function(pane) {
                var $P = $Ps[pane],
                    s = state[pane],
                    o = options[pane];
                if (!$P) return;

                // see if there is a directly-nested layout inside this pane
                if ($P.data("layout"))
                    refreshChildren(pane, $P.data("layout"));

                // process pane contents and callbacks, and init/resize child-layout if exists
                if (s.isVisible) { // pane is OPEN
                    if (state.initialized) // this pane was added AFTER layout was created
                        resizeAll(); // will also sizeContent
                    else
                        sizeContent(pane);

                    if (o.triggerEventsOnLoad)
                        _runCallbacks("onresize_end", pane);
                    else // automatic if onresize called, otherwise call it specifically
                    // resize child - IF inner-layout already exists (created before this layout)
                        resizeChildren(pane, true); // a previously existing childLayout
                }

                // init childLayouts - even if pane is not visible
                if (o.initChildren && o.children)
                    createChildren(pane);
            }

            /**
             * @param {string=}  panes       The pane(s) to process
             */
            , setPanePosition = function(panes) {
                panes = panes ? panes.split(",") : _c.borderPanes;

                // create toggler DIVs for each pane, and set object pointers for them, eg: $R.north = north toggler DIV
                $.each(panes, function(i, pane) {
                    var $P = $Ps[pane],
                        $R = $Rs[pane],
                        o = options[pane],
                        s = state[pane],
                        side = _c[pane].side,
                        CSS = {};
                    if (!$P) return; // pane does not exist - skip

                    // set css-position to account for container borders & padding
                    switch (pane) {
                        case "north":
                            CSS.top = sC.inset.top;
                            CSS.left = sC.inset.left;
                            CSS.right = sC.inset.right;
                            break;
                        case "south":
                            CSS.bottom = sC.inset.bottom;
                            CSS.left = sC.inset.left;
                            CSS.right = sC.inset.right;
                            break;
                        case "west":
                            CSS.left = sC.inset.left; // top, bottom & height set by sizeMidPanes()
                            break;
                        case "east":
                            CSS.right = sC.inset.right; // ditto
                            break;
                        case "center": // top, left, width & height set by sizeMidPanes()
                    }
                    // apply position
                    $P.css(CSS);

                    // update resizer position
                    if ($R && s.isClosed)
                        $R.css(side, sC.inset[side]);
                    else if ($R && !s.isHidden)
                        $R.css(side, sC.inset[side] + getPaneSize(pane));
                });
            }

            /**
             * Initialize module objects, styling, size and position for all resize bars and toggler buttons
             *
             * @see  _create()
             * @param {string=}  [panes=""]  The edge(s) to process
             */
            , initHandles = function(panes) {
                panes = panes ? panes.split(",") : _c.borderPanes;

                // create toggler DIVs for each pane, and set object pointers for them, eg: $R.north = north toggler DIV
                $.each(panes, function(i, pane) {
                    var $P = $Ps[pane];
                    $Rs[pane] = false; // INIT
                    $Ts[pane] = false;
                    if (!$P) return; // pane does not exist - skip

                    var o = options[pane],
                        s = state[pane],
                        c = _c[pane],
                        paneId = o.paneSelector.substr(0, 1) === "#" ? o.paneSelector.substr(1) : "",
                        rClass = o.resizerClass,
                        tClass = o.togglerClass,
                        spacing = (s.isVisible ? o.spacing_open : o.spacing_closed),
                        _pane = "-" + pane // used for classNames
                        ,
                        _state = (s.isVisible ? "-open" : "-closed") // used for classNames
                        ,
                        I = Instance[pane]
                        // INIT RESIZER BAR
                        ,
                        $R = I.resizer = $Rs[pane] = $("<div></div>")
                        // INIT TOGGLER BUTTON
                        ,
                        $T = I.toggler = (o.closable ? $Ts[pane] = $("<div></div>") : false);

                    //if (s.isVisible && o.resizable) ... handled by initResizable
                    if (!s.isVisible && o.slidable)
                        $R.attr("title", o.tips.Slide).css("cursor", o.sliderCursor);

                    $R // if paneSelector is an ID, then create a matching ID for the resizer, eg: "#paneLeft" => "paneLeft-resizer"
                    .attr("id", paneId ? paneId + "-resizer" : "")
                        .data({
                            parentLayout: Instance,
                            layoutPane: Instance[pane] // NEW pointer to pane-alias-object
                            ,
                            layoutEdge: pane,
                            layoutRole: "resizer"
                        })
                        .css(_c.resizers.cssReq).css("zIndex", options.zIndexes.resizer_normal)
                        .css(o.applyDemoStyles ? _c.resizers.cssDemo : {}) // add demo styles
                    .addClass(rClass + " " + rClass + _pane)
                        .hover(addHover, removeHover) // ALWAYS add hover-classes, even if resizing is not enabled - handle with CSS instead
                    .hover(onResizerEnter, onResizerLeave) // ALWAYS NEED resizer.mouseleave to balance toggler.mouseenter
                    .appendTo($N) // append DIV to container
                    ;
                    if (o.resizerDblClickToggle)
                        $R.bind("dblclick." + sID, toggle);

                    if ($T) {
                        $T // if paneSelector is an ID, then create a matching ID for the resizer, eg: "#paneLeft" => "#paneLeft-toggler"
                        .attr("id", paneId ? paneId + "-toggler" : "")
                            .data({
                                parentLayout: Instance,
                                layoutPane: Instance[pane] // NEW pointer to pane-alias-object
                                ,
                                layoutEdge: pane,
                                layoutRole: "toggler"
                            })
                            .css(_c.togglers.cssReq) // add base/required styles
                        .css(o.applyDemoStyles ? _c.togglers.cssDemo : {}) // add demo styles
                        .addClass(tClass + " " + tClass + _pane)
                            .hover(addHover, removeHover) // ALWAYS add hover-classes, even if toggling is not enabled - handle with CSS instead
                        .bind("mouseenter", onResizerEnter) // NEED toggler.mouseenter because mouseenter MAY NOT fire on resizer
                        .appendTo($R) // append SPAN to resizer DIV
                        ;
                        // ADD INNER-SPANS TO TOGGLER
                        if (o.togglerContent_open) // ui-layout-open
                            $("<span>" + o.togglerContent_open + "</span>")
                                .data({
                                    layoutEdge: pane,
                                    layoutRole: "togglerContent"
                                })
                                .data("layoutRole", "togglerContent")
                                .data("layoutEdge", pane)
                                .addClass("content content-open")
                                .css("display", "none")
                                .appendTo($T)
                            //.hover( addHover, removeHover ) // use ui-layout-toggler-west-hover .content-open instead!
                        ;
                        if (o.togglerContent_closed) // ui-layout-closed
                            $("<span>" + o.togglerContent_closed + "</span>")
                                .data({
                                    layoutEdge: pane,
                                    layoutRole: "togglerContent"
                                })
                                .addClass("content content-closed")
                                .css("display", "none")
                                .appendTo($T)
                            //.hover( addHover, removeHover ) // use ui-layout-toggler-west-hover .content-closed instead!
                        ;
                        // ADD TOGGLER.click/.hover
                        enableClosable(pane);
                    }

                    // add Draggable events
                    initResizable(pane);

                    // ADD CLASSNAMES & SLIDE-BINDINGS - eg: class="resizer resizer-west resizer-open"
                    if (s.isVisible)
                        setAsOpen(pane); // onOpen will be called, but NOT onResize
                    else {
                        setAsClosed(pane); // onClose will be called
                        bindStartSlidingEvents(pane, true); // will enable events IF option is set
                    }

                });

                // SET ALL HANDLE DIMENSIONS
                sizeHandles();
            }


            /**
             * Initialize scrolling ui-layout-content div - if exists
             *
             * @see  initPane() - or externally after an Ajax injection
             * @param {string}   pane            The pane to process
             * @param {boolean=} [resize=true]   Size content after init
             */
            , initContent = function(pane, resize) {
                if (!isInitialized()) return;
                var
                o = options[pane],
                    sel = o.contentSelector,
                    I = Instance[pane],
                    $P = $Ps[pane],
                    $C;
                if (sel) $C = I.content = $Cs[pane] = (o.findNestedContent) ? $P.find(sel).eq(0) // match 1-element only
                : $P.children(sel).eq(0);
                if ($C && $C.length) {
                    $C.data("layoutRole", "content");
                    // SAVE original Content CSS
                    if (!$C.data("layoutCSS"))
                        $C.data("layoutCSS", styles($C, "height"));
                    $C.css(_c.content.cssReq);
                    if (o.applyDemoStyles) {
                        $C.css(_c.content.cssDemo); // add padding & overflow: auto to content-div
                        $P.css(_c.content.cssDemoPane); // REMOVE padding/scrolling from pane
                    }
                    // ensure no vertical scrollbar on pane - will mess up measurements
                    if ($P.css("overflowX").match(/(scroll|auto)/)) {
                        $P.css("overflow", "hidden");
                    }
                    state[pane].content = {}; // init content state
                    if (resize !== false) sizeContent(pane);
                    // sizeContent() is called AFTER init of all elements
                } else
                    I.content = $Cs[pane] = false;
            }


            /**
             * Add resize-bars to all panes that specify it in options
             * -dependancy: $.fn.resizable - will skip if not found
             *
             * @see  _create()
             * @param {string=}  [panes=""]  The edge(s) to process
             */
            , initResizable = function(panes) {
                var draggingAvailable = $.layout.plugins.draggable,
                    side // set in start()
                    ;
                panes = panes ? panes.split(",") : _c.borderPanes;

                $.each(panes, function(idx, pane) {
                    var o = options[pane];
                    if (!draggingAvailable || !$Ps[pane] || !o.resizable) {
                        o.resizable = false;
                        return true; // skip to next
                    }

                    var s = state[pane],
                        z = options.zIndexes,
                        c = _c[pane],
                        side = c.dir == "horz" ? "top" : "left",
                        $P = $Ps[pane],
                        $R = $Rs[pane],
                        base = o.resizerClass,
                        lastPos = 0 // used when live-resizing
                        ,
                        r, live // set in start because may change
                        //  'drag' classes are applied to the ORIGINAL resizer-bar while dragging is in process
                        , resizerClass = base + "-drag" // resizer-drag
                        ,
                        resizerPaneClass = base + "-" + pane + "-drag" // resizer-north-drag
                        //  'helper' class is applied to the CLONED resizer-bar while it is being dragged
                        ,
                        helperClass = base + "-dragging" // resizer-dragging
                        ,
                        helperPaneClass = base + "-" + pane + "-dragging" // resizer-north-dragging
                        ,
                        helperLimitClass = base + "-dragging-limit" // resizer-drag
                        ,
                        helperPaneLimitClass = base + "-" + pane + "-dragging-limit" // resizer-north-drag
                        ,
                        helperClassesSet = false // logic var
                        ;

                    if (!s.isClosed)
                        $R.attr("title", o.tips.Resize)
                            .css("cursor", o.resizerCursor); // n-resize, s-resize, etc

                    $R.draggable({
                        containment: $N[0] // limit resizing to layout container
                        ,
                        axis: (c.dir == "horz" ? "y" : "x") // limit resizing to horz or vert axis
                        ,
                        delay: 0,
                        distance: 1,
                        grid: o.resizingGrid
                        //  basic format for helper - style it using class: .ui-draggable-dragging
                        ,
                        helper: "clone",
                        opacity: o.resizerDragOpacity,
                        addClasses: false // avoid ui-state-disabled class when disabled
                        //, iframeFix:      o.draggableIframeFix // TODO: consider using when bug is fixed
                        ,
                        zIndex: z.resizer_drag

                        ,
                        start: function(e, ui) {
                            // REFRESH options & state pointers in case we used swapPanes
                            o = options[pane];
                            s = state[pane];
                            // re-read options
                            live = o.livePaneResizing;

                            // ondrag_start callback - will CANCEL hide if returns false
                            // TODO: dragging CANNOT be cancelled like this, so see if there is a way?
                            if (false === _runCallbacks("ondrag_start", pane)) return false;

                            s.isResizing = true; // prevent pane from closing while resizing
                            state.paneResizing = pane; // easy to see if ANY pane is resizing
                            timer.clear(pane + "_closeSlider"); // just in case already triggered

                            // SET RESIZER LIMITS - used in drag()
                            setSizeLimits(pane); // update pane/resizer state
                            r = s.resizerPosition;
                            lastPos = ui.position[side]

                            $R.addClass(resizerClass + " " + resizerPaneClass); // add drag classes
                            helperClassesSet = false; // reset logic var - see drag()

                            // DISABLE TEXT SELECTION (probably already done by resizer.mouseOver)
                            $('body').disableSelection();

                            // MASK PANES CONTAINING IFRAMES, APPLETS OR OTHER TROUBLESOME ELEMENTS
                            showMasks(pane, {
                                resizing: true
                            });
                        }

                        ,
                        drag: function(e, ui) {
                            if (!helperClassesSet) { // can only add classes after clone has been added to the DOM
                                //$(".ui-draggable-dragging")
                                ui.helper
                                    .addClass(helperClass + " " + helperPaneClass) // add helper classes
                                .css({
                                    right: "auto",
                                    bottom: "auto"
                                }) // fix dir="rtl" issue
                                .children().css("visibility", "hidden") // hide toggler inside dragged resizer-bar
                                ;
                                helperClassesSet = true;
                                // draggable bug!? RE-SET zIndex to prevent E/W resize-bar showing through N/S pane!
                                if (s.isSliding) $Ps[pane].css("zIndex", z.pane_sliding);
                            }
                            // CONTAIN RESIZER-BAR TO RESIZING LIMITS
                            var limit = 0;
                            if (ui.position[side] < r.min) {
                                ui.position[side] = r.min;
                                limit = -1;
                            } else if (ui.position[side] > r.max) {
                                ui.position[side] = r.max;
                                limit = 1;
                            }
                            // ADD/REMOVE dragging-limit CLASS
                            if (limit) {
                                ui.helper.addClass(helperLimitClass + " " + helperPaneLimitClass); // at dragging-limit
                                window.defaultStatus = (limit > 0 && pane.match(/(north|west)/)) || (limit < 0 && pane.match(/(south|east)/)) ? o.tips.maxSizeWarning : o.tips.minSizeWarning;
                            } else {
                                ui.helper.removeClass(helperLimitClass + " " + helperPaneLimitClass); // not at dragging-limit
                                window.defaultStatus = "";
                            }
                            // DYNAMICALLY RESIZE PANES IF OPTION ENABLED
                            // won't trigger unless resizer has actually moved!
                            if (live && Math.abs(ui.position[side] - lastPos) >= o.liveResizingTolerance) {
                                lastPos = ui.position[side];
                                resizePanes(e, ui, pane)
                            }
                        }

                        ,
                        stop: function(e, ui) {
                            $('body').enableSelection(); // RE-ENABLE TEXT SELECTION
                            window.defaultStatus = ""; // clear 'resizing limit' message from statusbar
                            $R.removeClass(resizerClass + " " + resizerPaneClass); // remove drag classes from Resizer
                            s.isResizing = false;
                            state.paneResizing = false; // easy to see if ANY pane is resizing
                            resizePanes(e, ui, pane, true); // true = resizingDone
                        }

                    });
                });

                /**
                 * resizePanes
                 *
                 * Sub-routine called from stop() - and drag() if livePaneResizing
                 *
                 * @param {!Object}      evt
                 * @param {!Object}      ui
                 * @param {string}       pane
                 * @param {boolean=}     [resizingDone=false]
                 */
                var resizePanes = function(evt, ui, pane, resizingDone) {
                    var dragPos = ui.position,
                        c = _c[pane],
                        o = options[pane],
                        s = state[pane],
                        resizerPos;
                    switch (pane) {
                        case "north":
                            resizerPos = dragPos.top;
                            break;
                        case "west":
                            resizerPos = dragPos.left;
                            break;
                        case "south":
                            resizerPos = sC.layoutHeight - dragPos.top - o.spacing_open;
                            break;
                        case "east":
                            resizerPos = sC.layoutWidth - dragPos.left - o.spacing_open;
                            break;
                    };
                    // remove container margin from resizer position to get the pane size
                    var newSize = resizerPos - sC.inset[c.side];

                    // Disable OR Resize Mask(s) created in drag.start
                    if (!resizingDone) {
                        // ensure we meet liveResizingTolerance criteria
                        if (Math.abs(newSize - s.size) < o.liveResizingTolerance)
                            return; // SKIP resize this time
                        // resize the pane
                        manualSizePane(pane, newSize, false, true); // true = noAnimation
                        sizeMasks(); // resize all visible masks
                    } else { // resizingDone
                        // ondrag_end callback
                        if (false !== _runCallbacks("ondrag_end", pane))
                            manualSizePane(pane, newSize, false, true); // true = noAnimation
                        hideMasks(true); // true = force hiding all masks even if one is 'sliding'
                        if (s.isSliding) // RE-SHOW 'object-masks' so objects won't show through sliding pane
                            showMasks(pane, {
                                resizing: true
                            });
                    }
                };
            }

            /**
             *   sizeMask
             *
             *   Needed to overlay a DIV over an IFRAME-pane because mask CANNOT be *inside* the pane
             *   Called when mask created, and during livePaneResizing
             */
            , sizeMask = function() {
                var $M = $(this),
                    pane = $M.data("layoutMask") // eg: "west"
                    ,
                    s = state[pane];
                // only masks over an IFRAME-pane need manual resizing
                if (s.tagName == "IFRAME" && s.isVisible) // no need to mask closed/hidden panes
                    $M.css({
                        top: s.offsetTop,
                        left: s.offsetLeft,
                        width: s.outerWidth,
                        height: s.outerHeight
                    });
                /* ALT Method...
        var $P = $Ps[pane];
        $M.css( $P.position() ).css({ width: $P[0].offsetWidth, height: $P[0].offsetHeight });
        */
            }, sizeMasks = function() {
                $Ms.each(sizeMask); // resize all 'visible' masks
            }

            /**
             * @param {string}   pane        The pane being resized, animated or isSliding
             * @param {Object=}  [args]      (optional) Options: which masks to apply, and to which panes
             */
            , showMasks = function(pane, args) {
                var c = _c[pane],
                    panes = ["center"],
                    z = options.zIndexes,
                    a = $.extend({
                        objectsOnly: false,
                        animation: false,
                        resizing: true,
                        sliding: state[pane].isSliding
                    }, args),
                    o, s;
                if (a.resizing)
                    panes.push(pane);
                if (a.sliding)
                    panes.push(_c.oppositeEdge[pane]); // ADD the oppositeEdge-pane

                if (c.dir === "horz") {
                    panes.push("west");
                    panes.push("east");
                }

                $.each(panes, function(i, p) {
                    s = state[p];
                    o = options[p];
                    if (s.isVisible && (o.maskObjects || (!a.objectsOnly && o.maskContents))) {
                        getMasks(p).each(function() {
                            sizeMask.call(this);
                            this.style.zIndex = s.isSliding ? z.pane_sliding + 1 : z.pane_normal + 1
                            this.style.display = "block";
                        });
                    }
                });
            }

            /**
             * @param {boolean=} force       Hide masks even if a pane is sliding
             */
            , hideMasks = function(force) {
                // ensure no pane is resizing - could be a timing issue
                if (force || !state.paneResizing) {
                    $Ms.hide(); // hide ALL masks
                }
                // if ANY pane is sliding, then DO NOT remove masks from panes with maskObjects enabled
                else if (!force && !$.isEmptyObject(state.panesSliding)) {
                    var i = $Ms.length - 1,
                        p, $M;
                    for (; i >= 0; i--) {
                        $M = $Ms.eq(i);
                        p = $M.data("layoutMask");
                        if (!options[p].maskObjects) {
                            $M.hide();
                        }
                    }
                }
            }

            /**
             * @param {string}   pane
             */
            , getMasks = function(pane) {
                var $Masks = $([]),
                    $M, i = 0,
                    c = $Ms.length;
                for (; i < c; i++) {
                    $M = $Ms.eq(i);
                    if ($M.data("layoutMask") === pane)
                        $Masks = $Masks.add($M);
                }
                if ($Masks.length)
                    return $Masks;
                else
                    return createMasks(pane);
            }

            /**
             * createMasks
             *
             * Generates both DIV (ALWAYS used) and IFRAME (optional) elements as masks
             * An IFRAME mask is created *under* the DIV when maskObjects=true, because a DIV cannot mask an applet
             *
             * @param {string}   pane
             */
            , createMasks = function(pane) {
                var
                $P = $Ps[pane],
                    s = state[pane],
                    o = options[pane],
                    z = options.zIndexes
                    //, objMask = o.maskObjects && s.tagName != "IFRAME" // check for option
                    ,
                    $Masks = $([]),
                    isIframe, el, $M, css, i;
                if (!o.maskContents && !o.maskObjects) return $Masks;
                // if o.maskObjects=true, then loop TWICE to create BOTH kinds of mask, else only create a DIV
                for (i = 0; i < (o.maskObjects ? 2 : 1); i++) {
                    isIframe = o.maskObjects && i == 0;
                    el = document.createElement(isIframe ? "iframe" : "div");
                    $M = $(el).data("layoutMask", pane); // add data to relate mask to pane
                    el.className = "ui-layout-mask ui-layout-mask-" + pane; // for user styling
                    css = el.style;
                    // styles common to both DIVs and IFRAMES
                    css.display = "block";
                    css.position = "absolute";
                    css.background = "#FFF";
                    if (isIframe) { // IFRAME-only props
                        el.frameborder = 0;
                        el.src = "about:blank";
                        //el.allowTransparency = true; - for IE, but breaks masking ability!
                        css.opacity = 0;
                        css.filter = "Alpha(Opacity='0')";
                        css.border = 0;
                    }
                    // if pane is an IFRAME, then must mask the pane itself
                    if (s.tagName == "IFRAME") {
                        // NOTE sizing done by a subroutine so can be called during live-resizing
                        css.zIndex = z.pane_normal + 1; // 1-higher than pane
                        $N.append(el); // append to LAYOUT CONTAINER
                    }
                    // otherwise put masks *inside the pane* to mask its contents
                    else {
                        $M.addClass("ui-layout-mask-inside-pane");
                        css.zIndex = o.maskZindex || z.content_mask; // usually 1, but customizable
                        css.top = 0;
                        css.left = 0;
                        css.width = "100%";
                        css.height = "100%";
                        $P.append(el); // append INSIDE pane element
                    }
                    // add to return object
                    $Masks = $Masks.add(el);
                    // add Mask to cached array so can be resized & reused
                    $Ms = $Ms.add(el);
                }
                return $Masks;
            }


            /**
             * Destroy this layout and reset all elements
             *
             * @param {boolean=} [destroyChildren=false]     Destory Child-Layouts first?
             */
            , destroy = function(evt_or_destroyChildren, destroyChildren) {
                // UNBIND layout events and remove global object
                $(window).unbind("." + sID); // resize & unload
                $(document).unbind("." + sID); // keyDown (hotkeys)

                if (typeof evt_or_destroyChildren === "object")
                // stopPropagation if called by trigger("layoutdestroy") - use evtPane utility 
                    evtPane(evt_or_destroyChildren);
                else // no event, so transfer 1st param to destroyChildren param
                    destroyChildren = evt_or_destroyChildren;

                // need to look for parent layout BEFORE we remove the container data, else skips a level
                //var parentPane = Instance.hasParentLayout ? $.layout.getParentPaneInstance( $N ) : null;

                // reset layout-container
                $N.clearQueue()
                    .removeData("layout")
                    .removeData("layoutContainer")
                    .removeClass(options.containerClass)
                    .unbind("." + sID) // remove ALL Layout events
                ;

                // remove all mask elements that have been created
                $Ms.remove();

                // loop all panes to remove layout classes, attributes and bindings
                $.each(_c.allPanes, function(i, pane) {
                    removePane(pane, false, true, destroyChildren); // true = skipResize
                });

                // do NOT reset container CSS if is a 'pane' (or 'content') in an outer-layout - ie, THIS layout is 'nested'
                var css = "layoutCSS";
                if ($N.data(css) && !$N.data("layoutRole")) // RESET CSS
                    $N.css($N.data(css)).removeData(css);

                // for full-page layouts, also reset the <HTML> CSS
                if (sC.tagName === "BODY" && ($N = $("html")).data(css)) // RESET <HTML> CSS
                    $N.css($N.data(css)).removeData(css);

                // trigger plugins for this layout, if there are any
                runPluginCallbacks(Instance, $.layout.onDestroy);

                // trigger state-management and onunload callback
                unload();

                // clear the Instance of everything except for container & options (so could recreate)
                // RE-CREATE: myLayout = myLayout.container.layout( myLayout.options );
                for (var n in Instance)
                    if (!n.match(/^(container|options)$/)) delete Instance[n];
                    // add a 'destroyed' flag to make it easy to check
                Instance.destroyed = true;

                // if this is a child layout, CLEAR the child-pointer in the parent
                /* for now the pointer REMAINS, but with only container, options and destroyed keys
        if (parentPane) {
            var layout  = parentPane.pane.data("parentLayout")
            ,   key     = layout.options.instanceKey || 'error';
            // THIS SYNTAX MAY BE WRONG!
            parentPane.children[key] = layout.children[ parentPane.name ].children[key] = null;
        }
        */

                return Instance; // for coding convenience
            }

            /**
             * Remove a pane from the layout - subroutine of destroy()
             *
             * @see  destroy()
             * @param {(string|Object)}  evt_or_pane         The pane to process
             * @param {boolean=}         [remove=false]      Remove the DOM element?
             * @param {boolean=}         [skipResize=false]  Skip calling resizeAll()?
             * @param {boolean=}         [destroyChild=true] Destroy Child-layouts? If not passed, obeys options setting
             */
            , removePane = function(evt_or_pane, remove, skipResize, destroyChild) {
                if (!isInitialized()) return;
                var pane = evtPane.call(this, evt_or_pane),
                    $P = $Ps[pane],
                    $C = $Cs[pane],
                    $R = $Rs[pane],
                    $T = $Ts[pane];
                // NOTE: elements can still exist even after remove()
                //      so check for missing data(), which is cleared by removed()
                if ($P && $.isEmptyObject($P.data())) $P = false;
                if ($C && $.isEmptyObject($C.data())) $C = false;
                if ($R && $.isEmptyObject($R.data())) $R = false;
                if ($T && $.isEmptyObject($T.data())) $T = false;

                if ($P) $P.stop(true, true);

                var o = options[pane],
                    s = state[pane],
                    d = "layout",
                    css = "layoutCSS",
                    pC = children[pane],
                    hasChildren = $.isPlainObject(pC) && !$.isEmptyObject(pC),
                    destroy = destroyChild !== undefined ? destroyChild : o.destroyChildren;
                // FIRST destroy the child-layout(s)
                if (hasChildren && destroy) {
                    $.each(pC, function(key, child) {
                        if (!child.destroyed)
                            child.destroy(true); // tell child-layout to destroy ALL its child-layouts too
                        if (child.destroyed) // destroy was successful
                            delete pC[key];
                    });
                    // if no more children, remove the children hash
                    if ($.isEmptyObject(pC)) {
                        pC = children[pane] = null; // clear children hash
                        hasChildren = false;
                    }
                }

                // Note: can't 'remove' a pane element with non-destroyed children
                if ($P && remove && !hasChildren)
                    $P.remove(); // remove the pane-element and everything inside it
                else if ($P && $P[0]) {
                    //  create list of ALL pane-classes that need to be removed
                    var root = o.paneClass // default="ui-layout-pane"
                        ,
                        pRoot = root + "-" + pane // eg: "ui-layout-pane-west"
                        ,
                        _open = "-open",
                        _sliding = "-sliding",
                        _closed = "-closed",
                        classes = [root, root + _open, root + _closed, root + _sliding, // generic classes
                            pRoot, pRoot + _open, pRoot + _closed, pRoot + _sliding
                        ] // pane-specific classes
                        ;
                    $.merge(classes, getHoverClasses($P, true)); // ADD hover-classes
                    // remove all Layout classes from pane-element
                    $P.removeClass(classes.join(" ")) // remove ALL pane-classes
                    .removeData("parentLayout")
                        .removeData("layoutPane")
                        .removeData("layoutRole")
                        .removeData("layoutEdge")
                        .removeData("autoHidden") // in case set
                    .unbind("." + sID) // remove ALL Layout events
                    // TODO: remove these extra unbind commands when jQuery is fixed
                    //.unbind("mouseenter"+ sID)
                    //.unbind("mouseleave"+ sID)
                    ;
                    // do NOT reset CSS if this pane/content is STILL the container of a nested layout!
                    // the nested layout will reset its 'container' CSS when/if it is destroyed
                    if (hasChildren && $C) {
                        // a content-div may not have a specific width, so give it one to contain the Layout
                        $C.width($C.width());
                        $.each(pC, function(key, child) {
                            child.resizeAll(); // resize the Layout
                        });
                    } else if ($C)
                        $C.css($C.data(css)).removeData(css).removeData("layoutRole");
                    // remove pane AFTER content in case there was a nested layout
                    if (!$P.data(d))
                        $P.css($P.data(css)).removeData(css);
                }

                // REMOVE pane resizer and toggler elements
                if ($T) $T.remove();
                if ($R) $R.remove();

                // CLEAR all pointers and state data
                Instance[pane] = $Ps[pane] = $Cs[pane] = $Rs[pane] = $Ts[pane] = false;
                s = {
                    removed: true
                };

                if (!skipResize)
                    resizeAll();
            }


            /*
             * ###########################
             *     ACTION METHODS
             * ###########################
             */

            /**
             * @param {string}   pane
             */
            , _hidePane = function(pane) {
                var $P = $Ps[pane],
                    o = options[pane],
                    s = $P[0].style;
                if (o.useOffscreenClose) {
                    if (!$P.data(_c.offscreenReset))
                        $P.data(_c.offscreenReset, {
                            left: s.left,
                            right: s.right
                        });
                    $P.css(_c.offscreenCSS);
                } else
                    $P.hide().removeData(_c.offscreenReset);
            }

            /**
             * @param {string}   pane
             */
            , _showPane = function(pane) {
                var $P = $Ps[pane],
                    o = options[pane],
                    off = _c.offscreenCSS,
                    old = $P.data(_c.offscreenReset),
                    s = $P[0].style;
                $P.show() // ALWAYS show, just in case
                .removeData(_c.offscreenReset);
                if (o.useOffscreenClose && old) {
                    if (s.left == off.left)
                        s.left = old.left;
                    if (s.right == off.right)
                        s.right = old.right;
                }
            }


            /**
             * Completely 'hides' a pane, including its spacing - as if it does not exist
             * The pane is not actually 'removed' from the source, so can use 'show' to un-hide it
             *
             * @param {(string|Object)}  evt_or_pane         The pane being hidden, ie: north, south, east, or west
             * @param {boolean=}         [noAnimation=false]
             */
            , hide = function(evt_or_pane, noAnimation) {
                if (!isInitialized()) return;
                var pane = evtPane.call(this, evt_or_pane),
                    o = options[pane],
                    s = state[pane],
                    $P = $Ps[pane],
                    $R = $Rs[pane];
                if (!$P || s.isHidden) return; // pane does not exist OR is already hidden

                // onhide_start callback - will CANCEL hide if returns false
                if (state.initialized && false === _runCallbacks("onhide_start", pane)) return;

                s.isSliding = false; // just in case
                delete state.panesSliding[pane];

                // now hide the elements
                if ($R) $R.hide(); // hide resizer-bar
                if (!state.initialized || s.isClosed) {
                    s.isClosed = true; // to trigger open-animation on show()
                    s.isHidden = true;
                    s.isVisible = false;
                    if (!state.initialized)
                        _hidePane(pane); // no animation when loading page
                    sizeMidPanes(_c[pane].dir === "horz" ? "" : "center");
                    if (state.initialized || o.triggerEventsOnLoad)
                        _runCallbacks("onhide_end", pane);
                } else {
                    s.isHiding = true; // used by onclose
                    close(pane, false, noAnimation); // adjust all panes to fit
                }
            }

            /**
             * Show a hidden pane - show as 'closed' by default unless openPane = true
             *
             * @param {(string|Object)}  evt_or_pane         The pane being opened, ie: north, south, east, or west
             * @param {boolean=}         [openPane=false]
             * @param {boolean=}         [noAnimation=false]
             * @param {boolean=}         [noAlert=false]
             */
            , show = function(evt_or_pane, openPane, noAnimation, noAlert) {
                if (!isInitialized()) return;
                var pane = evtPane.call(this, evt_or_pane),
                    o = options[pane],
                    s = state[pane],
                    $P = $Ps[pane],
                    $R = $Rs[pane];
                if (!$P || !s.isHidden) return; // pane does not exist OR is not hidden

                // onshow_start callback - will CANCEL show if returns false
                if (false === _runCallbacks("onshow_start", pane)) return;

                s.isShowing = true; // used by onopen/onclose
                //s.isHidden  = false; - will be set by open/close - if not cancelled
                s.isSliding = false; // just in case
                delete state.panesSliding[pane];

                // now show the elements
                //if ($R) $R.show(); - will be shown by open/close
                if (openPane === false)
                    close(pane, true); // true = force
                else
                    open(pane, false, noAnimation, noAlert); // adjust all panes to fit
            }


            /**
             * Toggles a pane open/closed by calling either open or close
             *
             * @param {(string|Object)}  evt_or_pane     The pane being toggled, ie: north, south, east, or west
             * @param {boolean=}         [slide=false]
             */
            , toggle = function(evt_or_pane, slide) {
                if (!isInitialized()) return;
                var evt = evtObj(evt_or_pane),
                    pane = evtPane.call(this, evt_or_pane),
                    s = state[pane];
                if (evt) // called from to $R.dblclick OR triggerPaneEvent
                    evt.stopImmediatePropagation();
                if (s.isHidden)
                    show(pane); // will call 'open' after unhiding it
                else if (s.isClosed)
                    open(pane, !! slide);
                else
                    close(pane);
            }


            /**
             * Utility method used during init or other auto-processes
             *
             * @param {string}   pane   The pane being closed
             * @param {boolean=} [setHandles=false]
             */
            , _closePane = function(pane, setHandles) {
                var
                $P = $Ps[pane],
                    s = state[pane];
                _hidePane(pane);
                s.isClosed = true;
                s.isVisible = false;
                if (setHandles) setAsClosed(pane);
            }

            /**
             * Close the specified pane (animation optional), and resize all other panes as needed
             *
             * @param {(string|Object)}  evt_or_pane         The pane being closed, ie: north, south, east, or west
             * @param {boolean=}         [force=false]
             * @param {boolean=}         [noAnimation=false]
             * @param {boolean=}         [skipCallback=false]
             */
            , close = function(evt_or_pane, force, noAnimation, skipCallback) {
                var pane = evtPane.call(this, evt_or_pane);
                // if pane has been initialized, but NOT the complete layout, close pane instantly
                if (!state.initialized && $Ps[pane]) {
                    _closePane(pane, true); // INIT pane as closed
                    return;
                }
                if (!isInitialized()) return;

                var
                $P = $Ps[pane],
                    $R = $Rs[pane],
                    $T = $Ts[pane],
                    o = options[pane],
                    s = state[pane],
                    c = _c[pane],
                    doFX, isShowing, isHiding, wasSliding;

                // QUEUE in case another action/animation is in progress
                $N.queue(function(queueNext) {

                    if (!$P || (!o.closable && !s.isShowing && !s.isHiding) // invalid request // (!o.resizable && !o.closable) ???
                        || (!force && s.isClosed && !s.isShowing) // already closed
                    ) return queueNext();

                    // onclose_start callback - will CANCEL hide if returns false
                    // SKIP if just 'showing' a hidden pane as 'closed'
                    var abort = !s.isShowing && false === _runCallbacks("onclose_start", pane);

                    // transfer logic vars to temp vars
                    isShowing = s.isShowing;
                    isHiding = s.isHiding;
                    wasSliding = s.isSliding;
                    // now clear the logic vars (REQUIRED before aborting)
                    delete s.isShowing;
                    delete s.isHiding;

                    if (abort) return queueNext();

                    doFX = !noAnimation && !s.isClosed && (o.fxName_close != "none");
                    s.isMoving = true;
                    s.isClosed = true;
                    s.isVisible = false;
                    // update isHidden BEFORE sizing panes
                    if (isHiding) s.isHidden = true;
                    else if (isShowing) s.isHidden = false;

                    if (s.isSliding) // pane is being closed, so UNBIND trigger events
                        bindStopSlidingEvents(pane, false); // will set isSliding=false
                    else // resize panes adjacent to this one
                        sizeMidPanes(_c[pane].dir === "horz" ? "" : "center", false); // false = NOT skipCallback

                    // if this pane has a resizer bar, move it NOW - before animation
                    setAsClosed(pane);

                    // CLOSE THE PANE
                    if (doFX) { // animate the close
                        lockPaneForFX(pane, true); // need to set left/top so animation will work
                        $P.hide(o.fxName_close, o.fxSettings_close, o.fxSpeed_close, function() {
                            lockPaneForFX(pane, false); // undo
                            if (s.isClosed) close_2();
                            queueNext();
                        });
                    } else { // hide the pane without animation
                        _hidePane(pane);
                        close_2();
                        queueNext();
                    };
                });

                // SUBROUTINE
                function close_2() {
                    s.isMoving = false;
                    bindStartSlidingEvents(pane, true); // will enable if o.slidable = true

                    // if opposite-pane was autoClosed, see if it can be autoOpened now
                    var altPane = _c.oppositeEdge[pane];
                    if (state[altPane].noRoom) {
                        setSizeLimits(altPane);
                        makePaneFit(altPane);
                    }

                    if (!skipCallback && (state.initialized || o.triggerEventsOnLoad)) {
                        // onclose callback - UNLESS just 'showing' a hidden pane as 'closed'
                        if (!isShowing) _runCallbacks("onclose_end", pane);
                        // onhide OR onshow callback
                        if (isShowing) _runCallbacks("onshow_end", pane);
                        if (isHiding) _runCallbacks("onhide_end", pane);
                    }
                }
            }

            /**
             * @param {string}   pane    The pane just closed, ie: north, south, east, or west
             */
            , setAsClosed = function(pane) {
                if (!$Rs[pane]) return; // handles not initialized yet!
                var
                $P = $Ps[pane],
                    $R = $Rs[pane],
                    $T = $Ts[pane],
                    o = options[pane],
                    s = state[pane],
                    side = _c[pane].side,
                    rClass = o.resizerClass,
                    tClass = o.togglerClass,
                    _pane = "-" + pane // used for classNames
                    ,
                    _open = "-open",
                    _sliding = "-sliding",
                    _closed = "-closed";
                $R
                    .css(side, sC.inset[side]) // move the resizer
                .removeClass(rClass + _open + " " + rClass + _pane + _open)
                    .removeClass(rClass + _sliding + " " + rClass + _pane + _sliding)
                    .addClass(rClass + _closed + " " + rClass + _pane + _closed);
                // DISABLE 'resizing' when closed - do this BEFORE bindStartSlidingEvents?
                if (o.resizable && $.layout.plugins.draggable)
                    $R
                        .draggable("disable")
                        .removeClass("ui-state-disabled") // do NOT apply disabled styling - not suitable here
                    .css("cursor", "default")
                        .attr("title", "");

                // if pane has a toggler button, adjust that too
                if ($T) {
                    $T
                        .removeClass(tClass + _open + " " + tClass + _pane + _open)
                        .addClass(tClass + _closed + " " + tClass + _pane + _closed)
                        .attr("title", o.tips.Open) // may be blank
                    ;
                    // toggler-content - if exists
                    $T.children(".content-open").hide();
                    $T.children(".content-closed").css("display", "block");
                }

                // sync any 'pin buttons'
                syncPinBtns(pane, false);

                if (state.initialized) {
                    // resize 'length' and position togglers for adjacent panes
                    sizeHandles();
                }
            }

            /**
             * Open the specified pane (animation optional), and resize all other panes as needed
             *
             * @param {(string|Object)}  evt_or_pane         The pane being opened, ie: north, south, east, or west
             * @param {boolean=}         [slide=false]
             * @param {boolean=}         [noAnimation=false]
             * @param {boolean=}         [noAlert=false]
             */
            , open = function(evt_or_pane, slide, noAnimation, noAlert) {
                if (!isInitialized()) return;
                var pane = evtPane.call(this, evt_or_pane),
                    $P = $Ps[pane],
                    $R = $Rs[pane],
                    $T = $Ts[pane],
                    o = options[pane],
                    s = state[pane],
                    c = _c[pane],
                    doFX, isShowing;
                // QUEUE in case another action/animation is in progress
                $N.queue(function(queueNext) {

                    if (!$P || (!o.resizable && !o.closable && !s.isShowing) // invalid request
                        || (s.isVisible && !s.isSliding) // already open
                    ) return queueNext();

                    // pane can ALSO be unhidden by just calling show(), so handle this scenario
                    if (s.isHidden && !s.isShowing) {
                        queueNext(); // call before show() because it needs the queue free
                        show(pane, true);
                        return;
                    }

                    if (s.autoResize && s.size != o.size) // resize pane to original size set in options
                        sizePane(pane, o.size, true, true, true); // true=skipCallback/noAnimation/forceResize
                    else
                    // make sure there is enough space available to open the pane
                        setSizeLimits(pane, slide);

                    // onopen_start callback - will CANCEL open if returns false
                    var cbReturn = _runCallbacks("onopen_start", pane);

                    if (cbReturn === "abort")
                        return queueNext();

                    // update pane-state again in case options were changed in onopen_start
                    if (cbReturn !== "NC") // NC = "No Callback"
                        setSizeLimits(pane, slide);

                    if (s.minSize > s.maxSize) { // INSUFFICIENT ROOM FOR PANE TO OPEN!
                        syncPinBtns(pane, false); // make sure pin-buttons are reset
                        if (!noAlert && o.tips.noRoomToOpen)
                            alert(o.tips.noRoomToOpen);
                        return queueNext(); // ABORT
                    }

                    if (slide) // START Sliding - will set isSliding=true
                        bindStopSlidingEvents(pane, true); // BIND trigger events to close sliding-pane
                    else if (s.isSliding) // PIN PANE (stop sliding) - open pane 'normally' instead
                        bindStopSlidingEvents(pane, false); // UNBIND trigger events - will set isSliding=false
                    else if (o.slidable)
                        bindStartSlidingEvents(pane, false); // UNBIND trigger events

                    s.noRoom = false; // will be reset by makePaneFit if 'noRoom'
                    makePaneFit(pane);

                    // transfer logic var to temp var
                    isShowing = s.isShowing;
                    // now clear the logic var
                    delete s.isShowing;

                    doFX = !noAnimation && s.isClosed && (o.fxName_open != "none");
                    s.isMoving = true;
                    s.isVisible = true;
                    s.isClosed = false;
                    // update isHidden BEFORE sizing panes - WHY??? Old?
                    if (isShowing) s.isHidden = false;

                    if (doFX) { // ANIMATE
                        // mask adjacent panes with objects
                        lockPaneForFX(pane, true); // need to set left/top so animation will work
                        $P.show(o.fxName_open, o.fxSettings_open, o.fxSpeed_open, function() {
                            lockPaneForFX(pane, false); // undo
                            if (s.isVisible) open_2(); // continue
                            queueNext();
                        });
                    } else { // no animation
                        _showPane(pane); // just show pane and...
                        open_2(); // continue
                        queueNext();
                    };
                });

                // SUBROUTINE
                function open_2() {
                    s.isMoving = false;

                    // cure iframe display issues
                    _fixIframe(pane);

                    // NOTE: if isSliding, then other panes are NOT 'resized'
                    if (!s.isSliding) { // resize all panes adjacent to this one
                        sizeMidPanes(_c[pane].dir == "vert" ? "center" : "", false); // false = NOT skipCallback
                    }

                    // set classes, position handles and execute callbacks...
                    setAsOpen(pane);
                };

            }

            /**
             * @param {string}   pane        The pane just opened, ie: north, south, east, or west
             * @param {boolean=} [skipCallback=false]
             */
            , setAsOpen = function(pane, skipCallback) {
                var
                $P = $Ps[pane],
                    $R = $Rs[pane],
                    $T = $Ts[pane],
                    o = options[pane],
                    s = state[pane],
                    side = _c[pane].side,
                    rClass = o.resizerClass,
                    tClass = o.togglerClass,
                    _pane = "-" + pane // used for classNames
                    ,
                    _open = "-open",
                    _closed = "-closed",
                    _sliding = "-sliding";
                $R
                    .css(side, sC.inset[side] + getPaneSize(pane)) // move the resizer
                .removeClass(rClass + _closed + " " + rClass + _pane + _closed)
                    .addClass(rClass + _open + " " + rClass + _pane + _open);
                if (s.isSliding)
                    $R.addClass(rClass + _sliding + " " + rClass + _pane + _sliding)
                else // in case 'was sliding'
                    $R.removeClass(rClass + _sliding + " " + rClass + _pane + _sliding)

                    removeHover(0, $R); // remove hover classes
                if (o.resizable && $.layout.plugins.draggable)
                    $R.draggable("enable")
                        .css("cursor", o.resizerCursor)
                        .attr("title", o.tips.Resize);
                else if (!s.isSliding)
                    $R.css("cursor", "default"); // n-resize, s-resize, etc

                // if pane also has a toggler button, adjust that too
                if ($T) {
                    $T.removeClass(tClass + _closed + " " + tClass + _pane + _closed)
                        .addClass(tClass + _open + " " + tClass + _pane + _open)
                        .attr("title", o.tips.Close); // may be blank
                    removeHover(0, $T); // remove hover classes
                    // toggler-content - if exists
                    $T.children(".content-closed").hide();
                    $T.children(".content-open").css("display", "block");
                }

                // sync any 'pin buttons'
                syncPinBtns(pane, !s.isSliding);

                // update pane-state dimensions - BEFORE resizing content
                $.extend(s, elDims($P));

                if (state.initialized) {
                    // resize resizer & toggler sizes for all panes
                    sizeHandles();
                    // resize content every time pane opens - to be sure
                    sizeContent(pane, true); // true = remeasure headers/footers, even if 'pane.isMoving'
                }

                if (!skipCallback && (state.initialized || o.triggerEventsOnLoad) && $P.is(":visible")) {
                    // onopen callback
                    _runCallbacks("onopen_end", pane);
                    // onshow callback - TODO: should this be here?
                    if (s.isShowing) _runCallbacks("onshow_end", pane);

                    // ALSO call onresize because layout-size *may* have changed while pane was closed
                    if (state.initialized)
                        _runCallbacks("onresize_end", pane);
                }

                // TODO: Somehow sizePane("north") is being called after this point???
            }


            /**
             * slideOpen / slideClose / slideToggle
             *
             * Pass-though methods for sliding
             */
            , slideOpen = function(evt_or_pane) {
                if (!isInitialized()) return;
                var evt = evtObj(evt_or_pane),
                    pane = evtPane.call(this, evt_or_pane),
                    s = state[pane],
                    delay = options[pane].slideDelay_open;
                // prevent event from triggering on NEW resizer binding created below
                if (evt) evt.stopImmediatePropagation();

                if (s.isClosed && evt && evt.type === "mouseenter" && delay > 0)
                // trigger = mouseenter - use a delay
                    timer.set(pane + "_openSlider", open_NOW, delay);
                else
                    open_NOW(); // will unbind events if is already open

                /**
                 * SUBROUTINE for timed open
                 */
                function open_NOW() {
                    if (!s.isClosed) // skip if no longer closed!
                        bindStopSlidingEvents(pane, true); // BIND trigger events to close sliding-pane
                    else if (!s.isMoving)
                        open(pane, true); // true = slide - open() will handle binding
                };
            }

            , slideClose = function(evt_or_pane) {
                if (!isInitialized()) return;
                var evt = evtObj(evt_or_pane),
                    pane = evtPane.call(this, evt_or_pane),
                    o = options[pane],
                    s = state[pane],
                    delay = s.isMoving ? 1000 : 300 // MINIMUM delay - option may override
                    ;
                if (s.isClosed || s.isResizing)
                    return; // skip if already closed OR in process of resizing
                else if (o.slideTrigger_close === "click")
                    close_NOW(); // close immediately onClick
                else if (o.preventQuickSlideClose && s.isMoving)
                    return; // handle Chrome quick-close on slide-open
                else if (o.preventPrematureSlideClose && evt && $.layout.isMouseOverElem(evt, $Ps[pane]))
                    return; // handle incorrect mouseleave trigger, like when over a SELECT-list in IE
                else if (evt) // trigger = mouseleave - use a delay
                // 1 sec delay if 'opening', else .3 sec
                    timer.set(pane + "_closeSlider", close_NOW, max(o.slideDelay_close, delay));
                else // called programically
                    close_NOW();

                /**
                 * SUBROUTINE for timed close
                 */
                function close_NOW() {
                    if (s.isClosed) // skip 'close' if already closed!
                        bindStopSlidingEvents(pane, false); // UNBIND trigger events - TODO: is this needed here?
                    else if (!s.isMoving)
                        close(pane); // close will handle unbinding
                };
            }

            /**
             * @param {(string|Object)}  evt_or_pane     The pane being opened, ie: north, south, east, or west
             */
            , slideToggle = function(evt_or_pane) {
                var pane = evtPane.call(this, evt_or_pane);
                toggle(pane, true);
            }


            /**
             * Must set left/top on East/South panes so animation will work properly
             *
             * @param {string}   pane    The pane to lock, 'east' or 'south' - any other is ignored!
             * @param {boolean}  doLock  true = set left/top, false = remove
             */
            , lockPaneForFX = function(pane, doLock) {
                var $P = $Ps[pane],
                    s = state[pane],
                    o = options[pane],
                    z = options.zIndexes;
                if (doLock) {
                    showMasks(pane, {
                        animation: true,
                        objectsOnly: true
                    });
                    $P.css({
                        zIndex: z.pane_animate
                    }); // overlay all elements during animation
                    if (pane == "south")
                        $P.css({
                            top: sC.inset.top + sC.innerHeight - $P.outerHeight()
                        });
                    else if (pane == "east")
                        $P.css({
                            left: sC.inset.left + sC.innerWidth - $P.outerWidth()
                        });
                } else { // animation DONE - RESET CSS
                    hideMasks();
                    $P.css({
                        zIndex: (s.isSliding ? z.pane_sliding : z.pane_normal)
                    });
                    if (pane == "south")
                        $P.css({
                            top: "auto"
                        });
                    // if pane is positioned 'off-screen', then DO NOT screw with it!
                    else if (pane == "east" && !$P.css("left").match(/\-99999/))
                        $P.css({
                            left: "auto"
                        });
                    // fix anti-aliasing in IE - only needed for animations that change opacity
                    if (browser.msie && o.fxOpacityFix && o.fxName_open != "slide" && $P.css("filter") && $P.css("opacity") == 1)
                        $P[0].style.removeAttribute('filter');
                }
            }


            /**
             * Toggle sliding functionality of a specific pane on/off by adding removing 'slide open' trigger
             *
             * @see  open(), close()
             * @param {string}   pane    The pane to enable/disable, 'north', 'south', etc.
             * @param {boolean}  enable  Enable or Disable sliding?
             */
            , bindStartSlidingEvents = function(pane, enable) {
                var o = options[pane],
                    $P = $Ps[pane],
                    $R = $Rs[pane],
                    evtName = o.slideTrigger_open.toLowerCase();
                if (!$R || (enable && !o.slidable)) return;

                // make sure we have a valid event
                if (evtName.match(/mouseover/))
                    evtName = o.slideTrigger_open = "mouseenter";
                else if (!evtName.match(/(click|dblclick|mouseenter)/))
                    evtName = o.slideTrigger_open = "click";

                // must remove double-click-toggle when using dblclick-slide
                if (o.resizerDblClickToggle && evtName.match(/click/)) {
                    $R[enable ? "unbind" : "bind"]('dblclick.' + sID, toggle)
                }

                $R
                // add or remove event
                [enable ? "bind" : "unbind"](evtName + '.' + sID, slideOpen)
                // set the appropriate cursor & title/tip
                .css("cursor", enable ? o.sliderCursor : "default")
                    .attr("title", enable ? o.tips.Slide : "");
            }

            /**
             * Add or remove 'mouseleave' events to 'slide close' when pane is 'sliding' open or closed
             * Also increases zIndex when pane is sliding open
             * See bindStartSlidingEvents for code to control 'slide open'
             *
             * @see  slideOpen(), slideClose()
             * @param {string}   pane    The pane to process, 'north', 'south', etc.
             * @param {boolean}  enable  Enable or Disable events?
             */
            , bindStopSlidingEvents = function(pane, enable) {
                var o = options[pane],
                    s = state[pane],
                    c = _c[pane],
                    z = options.zIndexes,
                    evtName = o.slideTrigger_close.toLowerCase(),
                    action = (enable ? "bind" : "unbind"),
                    $P = $Ps[pane],
                    $R = $Rs[pane];
                timer.clear(pane + "_closeSlider"); // just in case

                if (enable) {
                    s.isSliding = true;
                    state.panesSliding[pane] = true;
                    // remove 'slideOpen' event from resizer
                    // ALSO will raise the zIndex of the pane & resizer
                    bindStartSlidingEvents(pane, false);
                } else {
                    s.isSliding = false;
                    delete state.panesSliding[pane];
                }

                // RE/SET zIndex - increases when pane is sliding-open, resets to normal when not
                $P.css("zIndex", enable ? z.pane_sliding : z.pane_normal);
                $R.css("zIndex", enable ? z.pane_sliding + 2 : z.resizer_normal); // NOTE: mask = pane_sliding+1

                // make sure we have a valid event
                if (!evtName.match(/(click|mouseleave)/))
                    evtName = o.slideTrigger_close = "mouseleave"; // also catches 'mouseout'

                // add/remove slide triggers
                $R[action](evtName, slideClose); // base event on resize
                // need extra events for mouseleave
                if (evtName === "mouseleave") {
                    // also close on pane.mouseleave
                    $P[action]("mouseleave." + sID, slideClose);
                    // cancel timer when mouse moves between 'pane' and 'resizer'
                    $R[action]("mouseenter." + sID, cancelMouseOut);
                    $P[action]("mouseenter." + sID, cancelMouseOut);
                }

                if (!enable)
                    timer.clear(pane + "_closeSlider");
                else if (evtName === "click" && !o.resizable) {
                    // IF pane is not resizable (which already has a cursor and tip) 
                    // then set the a cursor & title/tip on resizer when sliding
                    $R.css("cursor", enable ? o.sliderCursor : "default");
                    $R.attr("title", enable ? o.tips.Close : ""); // use Toggler-tip, eg: "Close Pane"
                }

                // SUBROUTINE for mouseleave timer clearing
                function cancelMouseOut(evt) {
                    timer.clear(pane + "_closeSlider");
                    evt.stopPropagation();
                }
            }


            /**
             * Hides/closes a pane if there is insufficient room - reverses this when there is room again
             * MUST have already called setSizeLimits() before calling this method
             *
             * @param {string}   pane                    The pane being resized
             * @param {boolean=} [isOpening=false]       Called from onOpen?
             * @param {boolean=} [skipCallback=false]    Should the onresize callback be run?
             * @param {boolean=} [force=false]
             */
            , makePaneFit = function(pane, isOpening, skipCallback, force) {
                var o = options[pane],
                    s = state[pane],
                    c = _c[pane],
                    $P = $Ps[pane],
                    $R = $Rs[pane],
                    isSidePane = c.dir === "vert",
                    hasRoom = false;
                // special handling for center & east/west panes
                if (pane === "center" || (isSidePane && s.noVerticalRoom)) {
                    // see if there is enough room to display the pane
                    // ERROR: hasRoom = s.minHeight <= s.maxHeight && (isSidePane || s.minWidth <= s.maxWidth);
                    hasRoom = (s.maxHeight >= 0);
                    if (hasRoom && s.noRoom) { // previously hidden due to noRoom, so show now
                        _showPane(pane);
                        if ($R) $R.show();
                        s.isVisible = true;
                        s.noRoom = false;
                        if (isSidePane) s.noVerticalRoom = false;
                        _fixIframe(pane);
                    } else if (!hasRoom && !s.noRoom) { // not currently hidden, so hide now
                        _hidePane(pane);
                        if ($R) $R.hide();
                        s.isVisible = false;
                        s.noRoom = true;
                    }
                }

                // see if there is enough room to fit the border-pane
                if (pane === "center") {
                    // ignore center in this block
                } else if (s.minSize <= s.maxSize) { // pane CAN fit
                    hasRoom = true;
                    if (s.size > s.maxSize) // pane is too big - shrink it
                        sizePane(pane, s.maxSize, skipCallback, true, force); // true = noAnimation
                    else if (s.size < s.minSize) // pane is too small - enlarge it
                        sizePane(pane, s.minSize, skipCallback, true, force); // true = noAnimation
                    // need s.isVisible because new pseudoClose method keeps pane visible, but off-screen
                    else if ($R && s.isVisible && $P.is(":visible")) {
                        // make sure resizer-bar is positioned correctly
                        // handles situation where nested layout was 'hidden' when initialized
                        var pos = s.size + sC.inset[c.side];
                        if ($.layout.cssNum($R, c.side) != pos) $R.css(c.side, pos);
                    }

                    // if was previously hidden due to noRoom, then RESET because NOW there is room
                    if (s.noRoom) {
                        // s.noRoom state will be set by open or show
                        if (s.wasOpen && o.closable) {
                            if (o.autoReopen)
                                open(pane, false, true, true); // true = noAnimation, true = noAlert
                            else // leave the pane closed, so just update state
                                s.noRoom = false;
                        } else
                            show(pane, s.wasOpen, true, true); // true = noAnimation, true = noAlert
                    }
                } else { // !hasRoom - pane CANNOT fit
                    if (!s.noRoom) { // pane not set as noRoom yet, so hide or close it now...
                        s.noRoom = true; // update state
                        s.wasOpen = !s.isClosed && !s.isSliding;
                        if (s.isClosed) {} // SKIP
                        else if (o.closable) // 'close' if possible
                            close(pane, true, true); // true = force, true = noAnimation
                        else // 'hide' pane if cannot just be closed
                            hide(pane, true); // true = noAnimation
                    }
                }
            }


            /**
             * manualSizePane is an exposed flow-through method allowing extra code when pane is 'manually resized'
             *
             * @param {(string|Object)}  evt_or_pane             The pane being resized
             * @param {number}           size                    The *desired* new size for this pane - will be validated
             * @param {boolean=}         [skipCallback=false]    Should the onresize callback be run?
             * @param {boolean=}         [noAnimation=false]
             * @param {boolean=}         [force=false]           Force resizing even if does not seem necessary
             */
            , manualSizePane = function(evt_or_pane, size, skipCallback, noAnimation, force) {
                if (!isInitialized()) return;
                var pane = evtPane.call(this, evt_or_pane),
                    o = options[pane],
                    s = state[pane]
                    //  if resizing callbacks have been delayed and resizing is now DONE, force resizing to complete...
                    ,
                    forceResize = force || (o.livePaneResizing && !s.isResizing);
                // ANY call to manualSizePane disables autoResize - ie, percentage sizing
                s.autoResize = false;
                // flow-through...
                sizePane(pane, size, skipCallback, noAnimation, forceResize); // will animate resize if option enabled
            }

            /**
             * sizePane is called only by internal methods whenever a pane needs to be resized
             *
             * @param {(string|Object)}  evt_or_pane             The pane being resized
             * @param {number}           size                    The *desired* new size for this pane - will be validated
             * @param {boolean=}         [skipCallback=false]    Should the onresize callback be run?
             * @param {boolean=}         [noAnimation=false]
             * @param {boolean=}         [force=false]           Force resizing even if does not seem necessary
             */
            , sizePane = function(evt_or_pane, size, skipCallback, noAnimation, force) {
                if (!isInitialized()) return;
                var pane = evtPane.call(this, evt_or_pane) // probably NEVER called from event?
                    ,
                    o = options[pane],
                    s = state[pane],
                    $P = $Ps[pane],
                    $R = $Rs[pane],
                    side = _c[pane].side,
                    dimName = _c[pane].sizeType.toLowerCase(),
                    skipResizeWhileDragging = s.isResizing && !o.triggerEventsDuringLiveResize,
                    doFX = noAnimation !== true && o.animatePaneSizing,
                    oldSize, newSize;
                // QUEUE in case another action/animation is in progress
                $N.queue(function(queueNext) {
                    // calculate 'current' min/max sizes
                    setSizeLimits(pane); // update pane-state
                    oldSize = s.size;
                    size = _parseSize(pane, size); // handle percentages & auto
                    size = max(size, _parseSize(pane, o.minSize));
                    size = min(size, s.maxSize);
                    if (size < s.minSize) { // not enough room for pane!
                        queueNext(); // call before makePaneFit() because it needs the queue free
                        makePaneFit(pane, false, skipCallback); // will hide or close pane
                        return;
                    }

                    // IF newSize is same as oldSize, then nothing to do - abort
                    if (!force && size === oldSize)
                        return queueNext();

                    s.newSize = size;

                    // onresize_start callback CANNOT cancel resizing because this would break the layout!
                    if (!skipCallback && state.initialized && s.isVisible)
                        _runCallbacks("onresize_start", pane);

                    // resize the pane, and make sure its visible
                    newSize = cssSize(pane, size);

                    if (doFX && $P.is(":visible")) { // ANIMATE
                        var fx = $.layout.effects.size[pane] || $.layout.effects.size.all,
                            easing = o.fxSettings_size.easing || fx.easing,
                            z = options.zIndexes,
                            props = {};
                        props[dimName] = newSize + 'px';
                        s.isMoving = true;
                        // overlay all elements during animation
                        $P.css({
                            zIndex: z.pane_animate
                        })
                            .show().animate(props, o.fxSpeed_size, easing, function() {
                                // reset zIndex after animation
                                $P.css({
                                    zIndex: (s.isSliding ? z.pane_sliding : z.pane_normal)
                                });
                                s.isMoving = false;
                                delete s.newSize;
                                sizePane_2(); // continue
                                queueNext();
                            });
                    } else { // no animation
                        $P.css(dimName, newSize); // resize pane
                        delete s.newSize;
                        // if pane is visible, then 
                        if ($P.is(":visible"))
                            sizePane_2(); // continue
                        else {
                            // pane is NOT VISIBLE, so just update state data...
                            // when pane is *next opened*, it will have the new size
                            s.size = size; // update state.size
                            $.extend(s, elDims($P)); // update state dimensions
                        }
                        queueNext();
                    };

                });

                // SUBROUTINE
                function sizePane_2() {
                    /*  Panes are sometimes not sized precisely in some browsers!?
                     *  This code will resize the pane up to 3 times to nudge the pane to the correct size
                     */
                    var actual = dimName === 'width' ? $P.outerWidth() : $P.outerHeight(),
                        tries = [{
                            pane: pane,
                            count: 1,
                            target: size,
                            actual: actual,
                            correct: (size === actual),
                            attempt: size,
                            cssSize: newSize
                        }],
                        lastTry = tries[0],
                        thisTry = {}, msg = 'Inaccurate size after resizing the ' + pane + '-pane.';
                    while (!lastTry.correct) {
                        thisTry = {
                            pane: pane,
                            count: lastTry.count + 1,
                            target: size
                        };

                        if (lastTry.actual > size)
                            thisTry.attempt = max(0, lastTry.attempt - (lastTry.actual - size));
                        else // lastTry.actual < size
                            thisTry.attempt = max(0, lastTry.attempt + (size - lastTry.actual));

                        thisTry.cssSize = cssSize(pane, thisTry.attempt);
                        $P.css(dimName, thisTry.cssSize);

                        thisTry.actual = dimName == 'width' ? $P.outerWidth() : $P.outerHeight();
                        thisTry.correct = (size === thisTry.actual);

                        // log attempts and alert the user of this *non-fatal error* (if showDebugMessages)
                        if (tries.length === 1) {
                            _log(msg, false, true);
                            _log(lastTry, false, true);
                        }
                        _log(thisTry, false, true);
                        // after 4 tries, is as close as its gonna get!
                        if (tries.length > 3) break;

                        tries.push(thisTry);
                        lastTry = tries[tries.length - 1];
                    }
                    // END TESTING CODE

                    // update pane-state dimensions
                    s.size = size;
                    $.extend(s, elDims($P));

                    if (s.isVisible && $P.is(":visible")) {
                        // reposition the resizer-bar
                        if ($R) $R.css(side, size + sC.inset[side]);
                        // resize the content-div
                        sizeContent(pane);
                    }

                    if (!skipCallback && !skipResizeWhileDragging && state.initialized && s.isVisible)
                        _runCallbacks("onresize_end", pane);

                    // resize all the adjacent panes, and adjust their toggler buttons
                    // when skipCallback passed, it means the controlling method will handle 'other panes'
                    if (!skipCallback) {
                        // also no callback if live-resize is in progress and NOT triggerEventsDuringLiveResize
                        if (!s.isSliding) sizeMidPanes(_c[pane].dir == "horz" ? "" : "center", skipResizeWhileDragging, force);
                        sizeHandles();
                    }

                    // if opposite-pane was autoClosed, see if it can be autoOpened now
                    var altPane = _c.oppositeEdge[pane];
                    if (size < oldSize && state[altPane].noRoom) {
                        setSizeLimits(altPane);
                        makePaneFit(altPane, false, skipCallback);
                    }

                    // DEBUG - ALERT user/developer so they know there was a sizing problem
                    if (tries.length > 1)
                        _log(msg + '\nSee the Error Console for details.', true, true);
                }
            }

            /**
             * @see  initPanes(), sizePane(),    resizeAll(), open(), close(), hide()
             * @param {(Array.<string>|string)}  panes                   The pane(s) being resized, comma-delmited string
             * @param {boolean=}                 [skipCallback=false]    Should the onresize callback be run?
             * @param {boolean=}                 [force=false]
             */
            , sizeMidPanes = function(panes, skipCallback, force) {
                panes = (panes ? panes : "east,west,center").split(",");

                $.each(panes, function(i, pane) {
                    if (!$Ps[pane]) return; // NO PANE - skip
                    var
                    o = options[pane],
                        s = state[pane],
                        $P = $Ps[pane],
                        $R = $Rs[pane],
                        isCenter = (pane == "center"),
                        hasRoom = true,
                        CSS = {}
                        //  if pane is not visible, show it invisibly NOW rather than for *each call* in this script
                        , visCSS = $.layout.showInvisibly($P)

                        ,
                        newCenter = calcNewCenterPaneDims();

                    // update pane-state dimensions
                    $.extend(s, elDims($P));

                    if (pane === "center") {
                        if (!force && s.isVisible && newCenter.width === s.outerWidth && newCenter.height === s.outerHeight) {
                            $P.css(visCSS);
                            return true; // SKIP - pane already the correct size
                        }
                        // set state for makePaneFit() logic
                        $.extend(s, cssMinDims(pane), {
                            maxWidth: newCenter.width,
                            maxHeight: newCenter.height
                        });
                        CSS = newCenter;
                        s.newWidth = CSS.width;
                        s.newHeight = CSS.height;
                        // convert OUTER width/height to CSS width/height 
                        CSS.width = cssW($P, CSS.width);
                        // NEW - allow pane to extend 'below' visible area rather than hide it
                        CSS.height = cssH($P, CSS.height);
                        hasRoom = CSS.width >= 0 && CSS.height >= 0; // height >= 0 = ALWAYS TRUE NOW

                        // during layout init, try to shrink east/west panes to make room for center
                        if (!state.initialized && o.minWidth > newCenter.width) {
                            var
                            reqPx = o.minWidth - s.outerWidth,
                                minE = options.east.minSize || 0,
                                minW = options.west.minSize || 0,
                                sizeE = state.east.size,
                                sizeW = state.west.size,
                                newE = sizeE,
                                newW = sizeW;
                            if (reqPx > 0 && state.east.isVisible && sizeE > minE) {
                                newE = max(sizeE - minE, sizeE - reqPx);
                                reqPx -= sizeE - newE;
                            }
                            if (reqPx > 0 && state.west.isVisible && sizeW > minW) {
                                newW = max(sizeW - minW, sizeW - reqPx);
                                reqPx -= sizeW - newW;
                            }
                            // IF we found enough extra space, then resize the border panes as calculated
                            if (reqPx === 0) {
                                if (sizeE && sizeE != minE)
                                    sizePane('east', newE, true, true, force); // true = skipCallback/noAnimation - initPanes will handle when done
                                if (sizeW && sizeW != minW)
                                    sizePane('west', newW, true, true, force); // true = skipCallback/noAnimation
                                // now start over!
                                sizeMidPanes('center', skipCallback, force);
                                $P.css(visCSS);
                                return; // abort this loop
                            }
                        }
                    } else { // for east and west, set only the height, which is same as center height
                        // set state.min/maxWidth/Height for makePaneFit() logic
                        if (s.isVisible && !s.noVerticalRoom)
                            $.extend(s, elDims($P), cssMinDims(pane))
                        if (!force && !s.noVerticalRoom && newCenter.height === s.outerHeight) {
                            $P.css(visCSS);
                            return true; // SKIP - pane already the correct size
                        }
                        // east/west have same top, bottom & height as center
                        CSS.top = newCenter.top;
                        CSS.bottom = newCenter.bottom;
                        s.newSize = newCenter.height
                        // NEW - allow pane to extend 'below' visible area rather than hide it
                        CSS.height = cssH($P, newCenter.height);
                        s.maxHeight = CSS.height;
                        hasRoom = (s.maxHeight >= 0); // ALWAYS TRUE NOW
                        if (!hasRoom) s.noVerticalRoom = true; // makePaneFit() logic
                    }

                    if (hasRoom) {
                        // resizeAll passes skipCallback because it triggers callbacks after ALL panes are resized
                        if (!skipCallback && state.initialized)
                            _runCallbacks("onresize_start", pane);

                        $P.css(CSS); // apply the CSS to pane
                        if (pane !== "center")
                            sizeHandles(pane); // also update resizer length
                        if (s.noRoom && !s.isClosed && !s.isHidden)
                            makePaneFit(pane); // will re-open/show auto-closed/hidden pane
                        if (s.isVisible) {
                            $.extend(s, elDims($P)); // update pane dimensions
                            if (state.initialized) sizeContent(pane); // also resize the contents, if exists
                        }
                    } else if (!s.noRoom && s.isVisible) // no room for pane
                        makePaneFit(pane); // will hide or close pane

                    // reset visibility, if necessary
                    $P.css(visCSS);

                    delete s.newSize;
                    delete s.newWidth;
                    delete s.newHeight;

                    if (!s.isVisible)
                        return true; // DONE - next pane

                    /*
                     * Extra CSS for IE6 or IE7 in Quirks-mode - add 'width' to NORTH/SOUTH panes
                     * Normally these panes have only 'left' & 'right' positions so pane auto-sizes
                     * ALSO required when pane is an IFRAME because will NOT default to 'full width'
                     *   TODO: Can I use width:100% for a north/south iframe?
                     *   TODO: Sounds like a job for $P.outerWidth( sC.innerWidth ) SETTER METHOD
                     */
                    if (pane === "center") { // finished processing midPanes
                        var fix = browser.isIE6 || !browser.boxModel;
                        if ($Ps.north && (fix || state.north.tagName == "IFRAME"))
                            $Ps.north.css("width", cssW($Ps.north, sC.innerWidth));
                        if ($Ps.south && (fix || state.south.tagName == "IFRAME"))
                            $Ps.south.css("width", cssW($Ps.south, sC.innerWidth));
                    }

                    // resizeAll passes skipCallback because it triggers callbacks after ALL panes are resized
                    if (!skipCallback && state.initialized)
                        _runCallbacks("onresize_end", pane);
                });
            }


            /**
             * @see  window.onresize(), callbacks or custom code
             * @param {(Object|boolean)=}    evt_or_refresh  If 'true', then also reset pane-positioning
             */
            , resizeAll = function(evt_or_refresh) {
                var oldW = sC.innerWidth,
                    oldH = sC.innerHeight;
                // stopPropagation if called by trigger("layoutdestroy") - use evtPane utility 
                evtPane(evt_or_refresh);

                // cannot size layout when 'container' is hidden or collapsed
                if (!$N.is(":visible")) return;

                if (!state.initialized) {
                    _initLayoutElements();
                    return; // no need to resize since we just initialized!
                }

                if (evt_or_refresh === true && $.isPlainObject(options.outset)) {
                    // update container CSS in case outset option has changed
                    $N.css(options.outset);
                }
                // UPDATE container dimensions
                $.extend(sC, elDims($N, options.inset));
                if (!sC.outerHeight) return;

                // if 'true' passed, refresh pane & handle positioning too
                if (evt_or_refresh === true) {
                    setPanePosition();
                }

                // onresizeall_start will CANCEL resizing if returns false
                // state.container has already been set, so user can access this info for calcuations
                if (false === _runCallbacks("onresizeall_start")) return false;

                var // see if container is now 'smaller' than before
                shrunkH = (sC.innerHeight < oldH),
                    shrunkW = (sC.innerWidth < oldW),
                    $P, o, s;
                // NOTE special order for sizing: S-N-E-W
                $.each(["south", "north", "east", "west"], function(i, pane) {
                    if (!$Ps[pane]) return; // no pane - SKIP
                    o = options[pane];
                    s = state[pane];
                    if (s.autoResize && s.size != o.size) // resize pane to original size set in options
                        sizePane(pane, o.size, true, true, true); // true=skipCallback/noAnimation/forceResize
                    else {
                        setSizeLimits(pane);
                        makePaneFit(pane, false, true, true); // true=skipCallback/forceResize
                    }
                });

                sizeMidPanes("", true, true); // true=skipCallback/forceResize
                sizeHandles(); // reposition the toggler elements

                // trigger all individual pane callbacks AFTER layout has finished resizing
                $.each(_c.allPanes, function(i, pane) {
                    $P = $Ps[pane];
                    if (!$P) return; // SKIP
                    if (state[pane].isVisible) // undefined for non-existent panes
                        _runCallbacks("onresize_end", pane); // callback - if exists
                });

                _runCallbacks("onresizeall_end");
                //_triggerLayoutEvent(pane, 'resizeall');
            }

            /**
             * Whenever a pane resizes or opens that has a nested layout, trigger resizeAll
             *
             * @param {(string|Object)}  evt_or_pane     The pane just resized or opened
             */
            , resizeChildren = function(evt_or_pane, skipRefresh) {
                var pane = evtPane.call(this, evt_or_pane);

                if (!options[pane].resizeChildren) return;

                // ensure the pane-children are up-to-date
                if (!skipRefresh) refreshChildren(pane);
                var pC = children[pane];
                if ($.isPlainObject(pC)) {
                    // resize one or more children
                    $.each(pC, function(key, child) {
                        if (!child.destroyed) child.resizeAll();
                    });
                }
            }

            /**
             * IF pane has a content-div, then resize all elements inside pane to fit pane-height
             *
             * @param {(string|Object)}  evt_or_panes        The pane(s) being resized
             * @param {boolean=}         [remeasure=false]   Should the content (header/footer) be remeasured?
             */
            , sizeContent = function(evt_or_panes, remeasure) {
                if (!isInitialized()) return;

                var panes = evtPane.call(this, evt_or_panes);
                panes = panes ? panes.split(",") : _c.allPanes;

                $.each(panes, function(idx, pane) {
                    var
                    $P = $Ps[pane],
                        $C = $Cs[pane],
                        o = options[pane],
                        s = state[pane],
                        m = s.content // m = measurements
                        ;
                    if (!$P || !$C || !$P.is(":visible")) return true; // NOT VISIBLE - skip

                    // if content-element was REMOVED, update OR remove the pointer
                    if (!$C.length) {
                        initContent(pane, false); // false = do NOT sizeContent() - already there!
                        if (!$C) return; // no replacement element found - pointer have been removed
                    }

                    // onsizecontent_start will CANCEL resizing if returns false
                    if (false === _runCallbacks("onsizecontent_start", pane)) return;

                    // skip re-measuring offsets if live-resizing
                    if ((!s.isMoving && !s.isResizing) || o.liveContentResizing || remeasure || m.top == undefined) {
                        _measure();
                        // if any footers are below pane-bottom, they may not measure correctly,
                        // so allow pane overflow and re-measure
                        if (m.hiddenFooters > 0 && $P.css("overflow") === "hidden") {
                            $P.css("overflow", "visible");
                            _measure(); // remeasure while overflowing
                            $P.css("overflow", "hidden");
                        }
                    }
                    // NOTE: spaceAbove/Below *includes* the pane paddingTop/Bottom, but not pane.borders
                    var newH = s.innerHeight - (m.spaceAbove - s.css.paddingTop) - (m.spaceBelow - s.css.paddingBottom);

                    if (!$C.is(":visible") || m.height != newH) {
                        // size the Content element to fit new pane-size - will autoHide if not enough room
                        setOuterHeight($C, newH, true); // true=autoHide
                        m.height = newH; // save new height
                    };

                    if (state.initialized)
                        _runCallbacks("onsizecontent_end", pane);

                    function _below($E) {
                        return max(s.css.paddingBottom, (parseInt($E.css("marginBottom"), 10) || 0));
                    };

                    function _measure() {
                        var
                        ignore = options[pane].contentIgnoreSelector,
                            $Fs = $C.nextAll().not(".ui-layout-mask").not(ignore || ":lt(0)") // not :lt(0) = ALL
                            ,
                            $Fs_vis = $Fs.filter(':visible'),
                            $F = $Fs_vis.filter(':last');
                        m = {
                            top: $C[0].offsetTop,
                            height: $C.outerHeight(),
                            numFooters: $Fs.length,
                            hiddenFooters: $Fs.length - $Fs_vis.length,
                            spaceBelow: 0 // correct if no content footer ($E)
                        }
                        m.spaceAbove = m.top; // just for state - not used in calc
                        m.bottom = m.top + m.height;
                        if ($F.length)
                        //spaceBelow = (LastFooter.top + LastFooter.height) [footerBottom] - Content.bottom + max(LastFooter.marginBottom, pane.paddingBotom)
                            m.spaceBelow = ($F[0].offsetTop + $F.outerHeight()) - m.bottom + _below($F);
                        else // no footer - check marginBottom on Content element itself
                            m.spaceBelow = _below($C);
                    };
                });
            }


            /**
             * Called every time a pane is opened, closed, or resized to slide the togglers to 'center' and adjust their length if necessary
             *
             * @see  initHandles(), open(), close(), resizeAll()
             * @param {(string|Object)=}     evt_or_panes    The pane(s) being resized
             */
            , sizeHandles = function(evt_or_panes) {
                var panes = evtPane.call(this, evt_or_panes)
                panes = panes ? panes.split(",") : _c.borderPanes;

                $.each(panes, function(i, pane) {
                    var
                    o = options[pane],
                        s = state[pane],
                        $P = $Ps[pane],
                        $R = $Rs[pane],
                        $T = $Ts[pane],
                        $TC;
                    if (!$P || !$R) return;

                    var
                    dir = _c[pane].dir,
                        _state = (s.isClosed ? "_closed" : "_open"),
                        spacing = o["spacing" + _state],
                        togAlign = o["togglerAlign" + _state],
                        togLen = o["togglerLength" + _state],
                        paneLen, left, offset, CSS = {};

                    if (spacing === 0) {
                        $R.hide();
                        return;
                    } else if (!s.noRoom && !s.isHidden) // skip if resizer was hidden for any reason
                        $R.show(); // in case was previously hidden

                    // Resizer Bar is ALWAYS same width/height of pane it is attached to
                    if (dir === "horz") { // north/south
                        //paneLen = $P.outerWidth(); // s.outerWidth || 
                        paneLen = sC.innerWidth; // handle offscreen-panes
                        s.resizerLength = paneLen;
                        left = $.layout.cssNum($P, "left")
                        $R.css({
                            width: cssW($R, paneLen) // account for borders & padding
                            ,
                            height: cssH($R, spacing) // ditto
                            ,
                            left: left > -9999 ? left : sC.inset.left // handle offscreen-panes
                        });
                    } else { // east/west
                        paneLen = $P.outerHeight(); // s.outerHeight || 
                        s.resizerLength = paneLen;
                        $R.css({
                            height: cssH($R, paneLen) // account for borders & padding
                            ,
                            width: cssW($R, spacing) // ditto
                            ,
                            top: sC.inset.top + getPaneSize("north", true) // TODO: what if no North pane?
                            //, top:    $.layout.cssNum($Ps["center"], "top")
                        });
                    }

                    // remove hover classes
                    removeHover(o, $R);

                    if ($T) {
                        if (togLen === 0 || (s.isSliding && o.hideTogglerOnSlide)) {
                            $T.hide(); // always HIDE the toggler when 'sliding'
                            return;
                        } else
                            $T.show(); // in case was previously hidden

                        if (!(togLen > 0) || togLen === "100%" || togLen > paneLen) {
                            togLen = paneLen;
                            offset = 0;
                        } else { // calculate 'offset' based on options.PANE.togglerAlign_open/closed
                            if (isStr(togAlign)) {
                                switch (togAlign) {
                                    case "top":
                                    case "left":
                                        offset = 0;
                                        break;
                                    case "bottom":
                                    case "right":
                                        offset = paneLen - togLen;
                                        break;
                                    case "middle":
                                    case "center":
                                    default:
                                        offset = round((paneLen - togLen) / 2); // 'default' catches typos
                                }
                            } else { // togAlign = number
                                var x = parseInt(togAlign, 10); //
                                if (togAlign >= 0) offset = x;
                                else offset = paneLen - togLen + x; // NOTE: x is negative!
                            }
                        }

                        if (dir === "horz") { // north/south
                            var width = cssW($T, togLen);
                            $T.css({
                                width: width // account for borders & padding
                                ,
                                height: cssH($T, spacing) // ditto
                                ,
                                left: offset // TODO: VERIFY that toggler  positions correctly for ALL values
                                ,
                                top: 0
                            });
                            // CENTER the toggler content SPAN
                            $T.children(".content").each(function() {
                                $TC = $(this);
                                $TC.css("marginLeft", round((width - $TC.outerWidth()) / 2)); // could be negative
                            });
                        } else { // east/west
                            var height = cssH($T, togLen);
                            $T.css({
                                height: height // account for borders & padding
                                ,
                                width: cssW($T, spacing) // ditto
                                ,
                                top: offset // POSITION the toggler
                                ,
                                left: 0
                            });
                            // CENTER the toggler content SPAN
                            $T.children(".content").each(function() {
                                $TC = $(this);
                                $TC.css("marginTop", round((height - $TC.outerHeight()) / 2)); // could be negative
                            });
                        }

                        // remove ALL hover classes
                        removeHover(0, $T);
                    }

                    // DONE measuring and sizing this resizer/toggler, so can be 'hidden' now
                    if (!state.initialized && (o.initHidden || s.isHidden)) {
                        $R.hide();
                        if ($T) $T.hide();
                    }
                });
            }


            /**
             * @param {(string|Object)}  evt_or_pane
             */
            , enableClosable = function(evt_or_pane) {
                if (!isInitialized()) return;
                var pane = evtPane.call(this, evt_or_pane),
                    $T = $Ts[pane],
                    o = options[pane];
                if (!$T) return;
                o.closable = true;
                $T.bind("click." + sID, function(evt) {
                    evt.stopPropagation();
                    toggle(pane);
                })
                    .css("visibility", "visible")
                    .css("cursor", "pointer")
                    .attr("title", state[pane].isClosed ? o.tips.Open : o.tips.Close) // may be blank
                .show();
            }
            /**
             * @param {(string|Object)}  evt_or_pane
             * @param {boolean=}         [hide=false]
             */
            , disableClosable = function(evt_or_pane, hide) {
                if (!isInitialized()) return;
                var pane = evtPane.call(this, evt_or_pane),
                    $T = $Ts[pane];
                if (!$T) return;
                options[pane].closable = false;
                // is closable is disable, then pane MUST be open!
                if (state[pane].isClosed) open(pane, false, true);
                $T.unbind("." + sID)
                    .css("visibility", hide ? "hidden" : "visible") // instead of hide(), which creates logic issues
                .css("cursor", "default")
                    .attr("title", "");
            }


            /**
             * @param {(string|Object)}  evt_or_pane
             */
            , enableSlidable = function(evt_or_pane) {
                if (!isInitialized()) return;
                var pane = evtPane.call(this, evt_or_pane),
                    $R = $Rs[pane];
                if (!$R || !$R.data('draggable')) return;
                options[pane].slidable = true;
                if (state[pane].isClosed)
                    bindStartSlidingEvents(pane, true);
            }
            /**
             * @param {(string|Object)}  evt_or_pane
             */
            , disableSlidable = function(evt_or_pane) {
                if (!isInitialized()) return;
                var pane = evtPane.call(this, evt_or_pane),
                    $R = $Rs[pane];
                if (!$R) return;
                options[pane].slidable = false;
                if (state[pane].isSliding)
                    close(pane, false, true);
                else {
                    bindStartSlidingEvents(pane, false);
                    $R.css("cursor", "default")
                        .attr("title", "");
                    removeHover(null, $R[0]); // in case currently hovered
                }
            }


            /**
             * @param {(string|Object)}  evt_or_pane
             */
            , enableResizable = function(evt_or_pane) {
                if (!isInitialized()) return;
                var pane = evtPane.call(this, evt_or_pane),
                    $R = $Rs[pane],
                    o = options[pane];
                if (!$R || !$R.data('draggable')) return;
                o.resizable = true;
                $R.draggable("enable");
                if (!state[pane].isClosed)
                    $R.css("cursor", o.resizerCursor)
                        .attr("title", o.tips.Resize);
            }
            /**
             * @param {(string|Object)}  evt_or_pane
             */
            , disableResizable = function(evt_or_pane) {
                if (!isInitialized()) return;
                var pane = evtPane.call(this, evt_or_pane),
                    $R = $Rs[pane];
                if (!$R || !$R.data('draggable')) return;
                options[pane].resizable = false;
                $R.draggable("disable")
                    .css("cursor", "default")
                    .attr("title", "");
                removeHover(null, $R[0]); // in case currently hovered
            }


            /**
             * Move a pane from source-side (eg, west) to target-side (eg, east)
             * If pane exists on target-side, move that to source-side, ie, 'swap' the panes
             *
             * @param {(string|Object)}  evt_or_pane1    The pane/edge being swapped
             * @param {string}           pane2           ditto
             */
            , swapPanes = function(evt_or_pane1, pane2) {
                if (!isInitialized()) return;
                var pane1 = evtPane.call(this, evt_or_pane1);
                // change state.edge NOW so callbacks can know where pane is headed...
                state[pane1].edge = pane2;
                state[pane2].edge = pane1;
                // run these even if NOT state.initialized
                if (false === _runCallbacks("onswap_start", pane1) || false === _runCallbacks("onswap_start", pane2)) {
                    state[pane1].edge = pane1; // reset
                    state[pane2].edge = pane2;
                    return;
                }

                var
                oPane1 = copy(pane1),
                    oPane2 = copy(pane2),
                    sizes = {};
                sizes[pane1] = oPane1 ? oPane1.state.size : 0;
                sizes[pane2] = oPane2 ? oPane2.state.size : 0;

                // clear pointers & state
                $Ps[pane1] = false;
                $Ps[pane2] = false;
                state[pane1] = {};
                state[pane2] = {};

                // ALWAYS remove the resizer & toggler elements
                if ($Ts[pane1]) $Ts[pane1].remove();
                if ($Ts[pane2]) $Ts[pane2].remove();
                if ($Rs[pane1]) $Rs[pane1].remove();
                if ($Rs[pane2]) $Rs[pane2].remove();
                $Rs[pane1] = $Rs[pane2] = $Ts[pane1] = $Ts[pane2] = false;

                // transfer element pointers and data to NEW Layout keys
                move(oPane1, pane2);
                move(oPane2, pane1);

                // cleanup objects
                oPane1 = oPane2 = sizes = null;

                // make panes 'visible' again
                if ($Ps[pane1]) $Ps[pane1].css(_c.visible);
                if ($Ps[pane2]) $Ps[pane2].css(_c.visible);

                // fix any size discrepancies caused by swap
                resizeAll();

                // run these even if NOT state.initialized
                _runCallbacks("onswap_end", pane1);
                _runCallbacks("onswap_end", pane2);

                return;

                function copy(n) { // n = pane
                    var
                    $P = $Ps[n],
                        $C = $Cs[n];
                    return !$P ? false : {
                        pane: n,
                        P: $P ? $P[0] : false,
                        C: $C ? $C[0] : false,
                        state: $.extend(true, {}, state[n]),
                        options: $.extend(true, {}, options[n])
                    }
                };

                function move(oPane, pane) {
                    if (!oPane) return;
                    var
                    P = oPane.P,
                        C = oPane.C,
                        oldPane = oPane.pane,
                        c = _c[pane]
                        //  save pane-options that should be retained
                        ,
                        s = $.extend(true, {}, state[pane]),
                        o = options[pane]
                        //  RETAIN side-specific FX Settings - more below
                        ,
                        fx = {
                            resizerCursor: o.resizerCursor
                        }, re, size, pos;
                    $.each("fxName,fxSpeed,fxSettings".split(","), function(i, k) {
                        fx[k + "_open"] = o[k + "_open"];
                        fx[k + "_close"] = o[k + "_close"];
                        fx[k + "_size"] = o[k + "_size"];
                    });

                    // update object pointers and attributes
                    $Ps[pane] = $(P)
                        .data({
                            layoutPane: Instance[pane] // NEW pointer to pane-alias-object
                            ,
                            layoutEdge: pane
                        })
                        .css(_c.hidden)
                        .css(c.cssReq);
                    $Cs[pane] = C ? $(C) : false;

                    // set options and state
                    options[pane] = $.extend(true, {}, oPane.options, fx);
                    state[pane] = $.extend(true, {}, oPane.state);

                    // change classNames on the pane, eg: ui-layout-pane-east ==> ui-layout-pane-west
                    re = new RegExp(o.paneClass + "-" + oldPane, "g");
                    P.className = P.className.replace(re, o.paneClass + "-" + pane);

                    // ALWAYS regenerate the resizer & toggler elements
                    initHandles(pane); // create the required resizer & toggler

                    // if moving to different orientation, then keep 'target' pane size
                    if (c.dir != _c[oldPane].dir) {
                        size = sizes[pane] || 0;
                        setSizeLimits(pane); // update pane-state
                        size = max(size, state[pane].minSize);
                        // use manualSizePane to disable autoResize - not useful after panes are swapped
                        manualSizePane(pane, size, true, true); // true/true = skipCallback/noAnimation
                    } else // move the resizer here
                        $Rs[pane].css(c.side, sC.inset[c.side] + (state[pane].isVisible ? getPaneSize(pane) : 0));


                    // ADD CLASSNAMES & SLIDE-BINDINGS
                    if (oPane.state.isVisible && !s.isVisible)
                        setAsOpen(pane, true); // true = skipCallback
                    else {
                        setAsClosed(pane);
                        bindStartSlidingEvents(pane, true); // will enable events IF option is set
                    }

                    // DESTROY the object
                    oPane = null;
                };
            }


            /**
             * INTERNAL method to sync pin-buttons when pane is opened or closed
             * Unpinned means the pane is 'sliding' - ie, over-top of the adjacent panes
             *
             * @see  open(), setAsOpen(), setAsClosed()
             * @param {string}   pane   These are the params returned to callbacks by layout()
             * @param {boolean}  doPin  True means set the pin 'down', False means 'up'
             */
            , syncPinBtns = function(pane, doPin) {
                if ($.layout.plugins.buttons)
                    $.each(state[pane].pins, function(i, selector) {
                        $.layout.buttons.setPinState(Instance, $(selector), pane, doPin);
                    });
            }

            ; // END var DECLARATIONS

        /**
         * Capture keys when enableCursorHotkey - toggle pane if hotkey pressed
         *
         * @see  document.keydown()
         */
        function keyDown(evt) {
            if (!evt) return true;
            var code = evt.keyCode;
            if (code < 33) return true; // ignore special keys: ENTER, TAB, etc

            var
            PANE = {
                38: "north" // Up Cursor    - $.ui.keyCode.UP
                ,
                40: "south" // Down Cursor  - $.ui.keyCode.DOWN
                ,
                37: "west" // Left Cursor  - $.ui.keyCode.LEFT
                ,
                39: "east" // Right Cursor - $.ui.keyCode.RIGHT
            }, ALT = evt.altKey // no worky!
                ,
                SHIFT = evt.shiftKey,
                CTRL = evt.ctrlKey,
                CURSOR = (CTRL && code >= 37 && code <= 40),
                o, k, m, pane;

            if (CURSOR && options[PANE[code]].enableCursorHotkey) // valid cursor-hotkey
                pane = PANE[code];
            else if (CTRL || SHIFT) // check to see if this matches a custom-hotkey
                $.each(_c.borderPanes, function(i, p) { // loop each pane to check its hotkey
                    o = options[p];
                    k = o.customHotkey;
                    m = o.customHotkeyModifier; // if missing or invalid, treated as "CTRL+SHIFT"
                    if ((SHIFT && m == "SHIFT") || (CTRL && m == "CTRL") || (CTRL && SHIFT)) { // Modifier matches
                        if (k && code === (isNaN(k) || k <= 9 ? k.toUpperCase().charCodeAt(0) : k)) { // Key matches
                            pane = p;
                            return false; // BREAK
                        }
                    }
                });

            // validate pane
            if (!pane || !$Ps[pane] || !options[pane].closable || state[pane].isHidden)
                return true;

            toggle(pane);

            evt.stopPropagation();
            evt.returnValue = false; // CANCEL key
            return false;
        };


        /*
         * ######################################
         *  UTILITY METHODS
         *  called externally or by initButtons
         * ######################################
         */

        /**
         * Change/reset a pane overflow setting & zIndex to allow popups/drop-downs to work
         *
         * @param {Object=}   [el]   (optional) Can also be 'bound' to a click, mouseOver, or other event
         */
        function allowOverflow(el) {
            if (!isInitialized()) return;
            if (this && this.tagName) el = this; // BOUND to element
            var $P;
            if (isStr(el))
                $P = $Ps[el];
            else if ($(el).data("layoutRole"))
                $P = $(el);
            else
                $(el).parents().each(function() {
                    if ($(this).data("layoutRole")) {
                        $P = $(this);
                        return false; // BREAK
                    }
                });
            if (!$P || !$P.length) return; // INVALID

            var
            pane = $P.data("layoutEdge"),
                s = state[pane];

            // if pane is already raised, then reset it before doing it again!
            // this would happen if allowOverflow is attached to BOTH the pane and an element 
            if (s.cssSaved)
                resetOverflow(pane); // reset previous CSS before continuing

            // if pane is raised by sliding or resizing, or its closed, then abort
            if (s.isSliding || s.isResizing || s.isClosed) {
                s.cssSaved = false;
                return;
            }

            var
            newCSS = {
                zIndex: (options.zIndexes.resizer_normal + 1)
            }, curCSS = {}, of = $P.css("overflow"),
                ofX = $P.css("overflowX"),
                ofY = $P.css("overflowY");
            // determine which, if any, overflow settings need to be changed
            if (of != "visible") {
                curCSS.overflow = of;
                newCSS.overflow = "visible";
            }
            if (ofX && !ofX.match(/(visible|auto)/)) {
                curCSS.overflowX = ofX;
                newCSS.overflowX = "visible";
            }
            if (ofY && !ofY.match(/(visible|auto)/)) {
                curCSS.overflowY = ofX;
                newCSS.overflowY = "visible";
            }

            // save the current overflow settings - even if blank!
            s.cssSaved = curCSS;

            // apply new CSS to raise zIndex and, if necessary, make overflow 'visible'
            $P.css(newCSS);

            // make sure the zIndex of all other panes is normal
            $.each(_c.allPanes, function(i, p) {
                if (p != pane) resetOverflow(p);
            });

        };
        /**
         * @param {Object=}   [el]   (optional) Can also be 'bound' to a click, mouseOver, or other event
         */
        function resetOverflow(el) {
            if (!isInitialized()) return;
            if (this && this.tagName) el = this; // BOUND to element
            var $P;
            if (isStr(el))
                $P = $Ps[el];
            else if ($(el).data("layoutRole"))
                $P = $(el);
            else
                $(el).parents().each(function() {
                    if ($(this).data("layoutRole")) {
                        $P = $(this);
                        return false; // BREAK
                    }
                });
            if (!$P || !$P.length) return; // INVALID

            var
            pane = $P.data("layoutEdge"),
                s = state[pane],
                CSS = s.cssSaved || {};
            // reset the zIndex
            if (!s.isSliding && !s.isResizing)
                $P.css("zIndex", options.zIndexes.pane_normal);

            // reset Overflow - if necessary
            $P.css(CSS);

            // clear var
            s.cssSaved = false;
        };

        /*
         * #####################
         * CREATE/RETURN LAYOUT
         * #####################
         */

        // validate that container exists
        var $N = $(this).eq(0); // FIRST matching Container element
        if (!$N.length) {
            return _log(options.errors.containerMissing);
        };

        // Users retrieve Instance of a layout with: $N.layout() OR $N.data("layout")
        // return the Instance-pointer if layout has already been initialized
        if ($N.data("layoutContainer") && $N.data("layout"))
            return $N.data("layout"); // cached pointer

        // init global vars
        var
        $Ps = {} // Panes x5     - set in initPanes()
            , $Cs = {} // Content x5   - set in initPanes()
            , $Rs = {} // Resizers x4  - set in initHandles()
            , $Ts = {} // Togglers x4  - set in initHandles()
            , $Ms = $([]) // Masks - up to 2 masks per pane (IFRAME + DIV)
            //  aliases for code brevity
            ,
            sC = state.container // alias for easy access to 'container dimensions'
            ,
            sID = state.id // alias for unique layout ID/namespace - eg: "layout435"
            ;

        // create Instance object to expose data & option Properties, and primary action Methods
        var Instance = {
            //  layout data
            options: options // property - options hash
            ,
            state: state // property - dimensions hash
            //  object pointers
            ,
            container: $N // property - object pointers for layout container
            ,
            panes: $Ps // property - object pointers for ALL Panes: panes.north, panes.center
            ,
            contents: $Cs // property - object pointers for ALL Content: contents.north, contents.center
            ,
            resizers: $Rs // property - object pointers for ALL Resizers, eg: resizers.north
            ,
            togglers: $Ts // property - object pointers for ALL Togglers, eg: togglers.north
            //  border-pane open/close
            ,
            hide: hide // method - ditto
            ,
            show: show // method - ditto
            ,
            toggle: toggle // method - pass a 'pane' ("north", "west", etc)
            ,
            open: open // method - ditto
            ,
            close: close // method - ditto
            ,
            slideOpen: slideOpen // method - ditto
            ,
            slideClose: slideClose // method - ditto
            ,
            slideToggle: slideToggle // method - ditto
            //  pane actions
            ,
            setSizeLimits: setSizeLimits // method - pass a 'pane' - update state min/max data
            ,
            _sizePane: sizePane // method -intended for user by plugins only!
            ,
            sizePane: manualSizePane // method - pass a 'pane' AND an 'outer-size' in pixels or percent, or 'auto'
            ,
            sizeContent: sizeContent // method - pass a 'pane'
            ,
            swapPanes: swapPanes // method - pass TWO 'panes' - will swap them
            ,
            showMasks: showMasks // method - pass a 'pane' OR list of panes - default = all panes with mask option set
            ,
            hideMasks: hideMasks // method - ditto'
            //  pane element methods
            ,
            initContent: initContent // method - ditto
            ,
            addPane: addPane // method - pass a 'pane'
            ,
            removePane: removePane // method - pass a 'pane' to remove from layout, add 'true' to delete the pane-elem
            ,
            createChildren: createChildren // method - pass a 'pane' and (optional) layout-options (OVERRIDES options[pane].children
            ,
            refreshChildren: refreshChildren // method - pass a 'pane' and a layout-instance
            //  special pane option setting
            ,
            enableClosable: enableClosable // method - pass a 'pane'
            ,
            disableClosable: disableClosable // method - ditto
            ,
            enableSlidable: enableSlidable // method - ditto
            ,
            disableSlidable: disableSlidable // method - ditto
            ,
            enableResizable: enableResizable // method - ditto
            ,
            disableResizable: disableResizable // method - ditto
            //  utility methods for panes
            ,
            allowOverflow: allowOverflow // utility - pass calling element (this)
            ,
            resetOverflow: resetOverflow // utility - ditto
            //  layout control
            ,
            destroy: destroy // method - no parameters
            ,
            initPanes: isInitialized // method - no parameters
            ,
            resizeAll: resizeAll // method - no parameters
            //  callback triggering
            ,
            runCallbacks: _runCallbacks // method - pass evtName & pane (if a pane-event), eg: trigger("onopen", "west")
            //  alias collections of options, state and children - created in addPane and extended elsewhere
            ,
            hasParentLayout: false // set by initContainer()
            ,
            children: children // pointers to child-layouts, eg: Instance.children.west.layoutName
            ,
            north: false // alias group: { name: pane, pane: $Ps[pane], options: options[pane], state: state[pane], children: children[pane] }
            ,
            south: false // ditto
            ,
            west: false // ditto
            ,
            east: false // ditto
            ,
            center: false // ditto
        };

        // create the border layout NOW
        if (_create() === 'cancel') // onload_start callback returned false to CANCEL layout creation
            return null;
        else // true OR false -- if layout-elements did NOT init (hidden or do not exist), can auto-init later
            return Instance; // return the Instance object

    }


})(jQuery);
// END Layout - keep internal vars internal!



// START Plugins - shared wrapper, no global vars
(function($) {


    /**
     * jquery.layout.state 1.0
     * $Date: 2011-07-16 08:00:00 (Sat, 16 July 2011) $
     *
     * Copyright (c) 2012
     *   Kevin Dalman (http://allpro.net)
     *
     * Dual licensed under the GPL (http://www.gnu.org/licenses/gpl.html)
     * and MIT (http://www.opensource.org/licenses/mit-license.php) licenses.
     *
     * @requires: UI Layout 1.3.0.rc30.1 or higher
     * @requires: $.ui.cookie (above)
     *
     * @see: http://groups.google.com/group/jquery-ui-layout
     */
    /*
 *  State-management options stored in options.stateManagement, which includes a .cookie hash
 *  Default options saves ALL KEYS for ALL PANES, ie: pane.size, pane.isClosed, pane.isHidden
 *
 *  // STATE/COOKIE OPTIONS
 *  @example $(el).layout({
                stateManagement: {
                    enabled:    true
                ,   stateKeys:  "east.size,west.size,east.isClosed,west.isClosed"
                ,   cookie:     { name: "appLayout", path: "/" }
                }
            })
 *  @example $(el).layout({ stateManagement__enabled: true }) // enable auto-state-management using cookies
 *  @example $(el).layout({ stateManagement__cookie: { name: "appLayout", path: "/" } })
 *  @example $(el).layout({ stateManagement__cookie__name: "appLayout", stateManagement__cookie__path: "/" })
 *
 *  // STATE/COOKIE METHODS
 *  @example myLayout.saveCookie( "west.isClosed,north.size,south.isHidden", {expires: 7} );
 *  @example myLayout.loadCookie();
 *  @example myLayout.deleteCookie();
 *  @example var JSON = myLayout.readState();   // CURRENT Layout State
 *  @example var JSON = myLayout.readCookie();  // SAVED Layout State (from cookie)
 *  @example var JSON = myLayout.state.stateData;   // LAST LOADED Layout State (cookie saved in layout.state hash)
 *
 *  CUSTOM STATE-MANAGEMENT (eg, saved in a database)
 *  @example var JSON = myLayout.readState( "west.isClosed,north.size,south.isHidden" );
 *  @example myLayout.loadState( JSON );
 */

    /**
     *  UI COOKIE UTILITY
     *
     *  A $.cookie OR $.ui.cookie namespace *should be standard*, but until then...
     *  This creates $.ui.cookie so Layout does not need the cookie.jquery.js plugin
     *  NOTE: This utility is REQUIRED by the layout.state plugin
     *
     *  Cookie methods in Layout are created as part of State Management
     */
    if (!$.ui) $.ui = {};
    $.ui.cookie = {

        // cookieEnabled is not in DOM specs, but DOES works in all browsers,including IE6
        acceptsCookies: !! navigator.cookieEnabled

        ,
        read: function(name) {
            var c = document.cookie,
                cs = c ? c.split(';') : [],
                pair // loop var
                ;
            for (var i = 0, n = cs.length; i < n; i++) {
                pair = $.trim(cs[i]).split('='); // name=value pair
                if (pair[0] == name) // found the layout cookie
                    return decodeURIComponent(pair[1]);
            }
            return null;
        }

        ,
        write: function(name, val, cookieOpts) {
            var params = "",
                date = "",
                clear = false,
                o = cookieOpts || {}, x = o.expires || null,
                t = $.type(x);
            if (t === "date")
                date = x;
            else if (t === "string" && x > 0) {
                x = parseInt(x, 10);
                t = "number";
            }
            if (t === "number") {
                date = new Date();
                if (x > 0)
                    date.setDate(date.getDate() + x);
                else {
                    date.setFullYear(1970);
                    clear = true;
                }
            }
            if (date) params += ";expires=" + date.toUTCString();
            if (o.path) params += ";path=" + o.path;
            if (o.domain) params += ";domain=" + o.domain;
            if (o.secure) params += ";secure";
            document.cookie = name + "=" + (clear ? "" : encodeURIComponent(val)) + params; // write or clear cookie
        }

        ,
        clear: function(name) {
            $.ui.cookie.write(name, "", {
                expires: -1
            });
        }

    };
    // if cookie.jquery.js is not loaded, create an alias to replicate it
    // this may be useful to other plugins or code dependent on that plugin
    if (!$.cookie) $.cookie = function(k, v, o) {
        var C = $.ui.cookie;
        if (v === null)
            C.clear(k);
        else if (v === undefined)
            return C.read(k);
        else
            C.write(k, v, o);
    };


    // tell Layout that the state plugin is available
    $.layout.plugins.stateManagement = true;

    //  Add State-Management options to layout.defaults
    $.layout.config.optionRootKeys.push("stateManagement");
    $.layout.defaults.stateManagement = {
        enabled: false // true = enable state-management, even if not using cookies
        ,
        autoSave: true // Save a state-cookie when page exits?
        ,
        autoLoad: true // Load the state-cookie when Layout inits?
        ,
        animateLoad: true // animate panes when loading state into an active layout
        ,
        includeChildren: true // recurse into child layouts to include their state as well
        // List state-data to save - must be pane-specific
        ,
        stateKeys: "north.size,south.size,east.size,west.size," +
            "north.isClosed,south.isClosed,east.isClosed,west.isClosed," +
            "north.isHidden,south.isHidden,east.isHidden,west.isHidden",
        cookie: {
            name: "" // If not specified, will use Layout.name, else just "Layout"
            ,
            domain: "" // blank = current domain
            ,
            path: "" // blank = current page, "/" = entire website
            ,
            expires: "" // 'days' to keep cookie - leave blank for 'session cookie'
            ,
            secure: false
        }
    };
    // Set stateManagement as a layout-option, NOT a pane-option
    $.layout.optionsMap.layout.push("stateManagement");

    /*
     *  State Management methods
     */
    $.layout.state = {

        /**
         * Get the current layout state and save it to a cookie
         *
         * myLayout.saveCookie( keys, cookieOpts )
         *
         * @param {Object}          inst
         * @param {(string|Array)=} keys
         * @param {Object=}         cookieOpts
         */
        saveCookie: function(inst, keys, cookieOpts) {
            var o = inst.options,
                sm = o.stateManagement,
                oC = $.extend(true, {}, sm.cookie, cookieOpts || null),
                data = inst.state.stateData = inst.readState(keys || sm.stateKeys) // read current panes-state
                ;
            $.ui.cookie.write(oC.name || o.name || "Layout", $.layout.state.encodeJSON(data), oC);
            return $.extend(true, {}, data); // return COPY of state.stateData data
        }

        /**
         * Remove the state cookie
         *
         * @param {Object}  inst
         */
        ,
        deleteCookie: function(inst) {
            var o = inst.options;
            $.ui.cookie.clear(o.stateManagement.cookie.name || o.name || "Layout");
        }

        /**
         * Read & return data from the cookie - as JSON
         *
         * @param {Object}  inst
         */
        ,
        readCookie: function(inst) {
            var o = inst.options;
            var c = $.ui.cookie.read(o.stateManagement.cookie.name || o.name || "Layout");
            // convert cookie string back to a hash and return it
            return c ? $.layout.state.decodeJSON(c) : {};
        }

        /**
         * Get data from the cookie and USE IT to loadState
         *
         * @param {Object}  inst
         */
        ,
        loadCookie: function(inst) {
            var c = $.layout.state.readCookie(inst); // READ the cookie
            if (c) {
                inst.state.stateData = $.extend(true, {}, c); // SET state.stateData
                inst.loadState(c); // LOAD the retrieved state
            }
            return c;
        }

        /**
         * Update layout options from the cookie, if one exists
         *
         * @param {Object}      inst
         * @param {Object=}     stateData
         * @param {boolean=}    animate
         */
        ,
        loadState: function(inst, data, opts) {
            if (!$.isPlainObject(data) || $.isEmptyObject(data)) return;

            // normalize data & cache in the state object
            data = inst.state.stateData = $.layout.transformData(data); // panes = default subkey

            // add missing/default state-restore options
            var smo = inst.options.stateManagement;
            opts = $.extend({
                animateLoad: false //smo.animateLoad
                ,
                includeChildren: smo.includeChildren
            }, opts);

            if (!inst.state.initialized) {
                /*
                 *  layout NOT initialized, so just update its options
                 */
                // MUST remove pane.children keys before applying to options
                // use a copy so we don't remove keys from original data
                var o = $.extend(true, {}, data);
                //delete o.center; // center has no state-data - only children
                $.each($.layout.config.allPanes, function(idx, pane) {
                    if (o[pane]) delete o[pane].children;
                });
                // update CURRENT layout-options with saved state data
                $.extend(true, inst.options, o);
            } else {
                /*
                 *  layout already initialized, so modify layout's configuration
                 */
                var noAnimate = !opts.animateLoad,
                    o, c, h, state, open;
                $.each($.layout.config.borderPanes, function(idx, pane) {
                    o = data[pane];
                    if (!$.isPlainObject(o)) return; // no key, skip pane

                    s = o.size;
                    c = o.initClosed;
                    h = o.initHidden;
                    ar = o.autoResize
                    state = inst.state[pane];
                    open = state.isVisible;

                    // reset autoResize
                    if (ar)
                        state.autoResize = ar;
                    // resize BEFORE opening
                    if (!open)
                        inst._sizePane(pane, s, false, false, false); // false=skipCallback/noAnimation/forceResize
                    // open/close as necessary - DO NOT CHANGE THIS ORDER!
                    if (h === true) inst.hide(pane, noAnimate);
                    else if (c === true) inst.close(pane, false, noAnimate);
                    else if (c === false) inst.open(pane, false, noAnimate);
                    else if (h === false) inst.show(pane, false, noAnimate);
                    // resize AFTER any other actions
                    if (open)
                        inst._sizePane(pane, s, false, false, noAnimate); // animate resize if option passed
                });

                /*
                 *  RECURSE INTO CHILD-LAYOUTS
                 */
                if (opts.includeChildren) {
                    var paneStateChildren, childState;
                    $.each(inst.children, function(pane, paneChildren) {
                        paneStateChildren = data[pane] ? data[pane].children : 0;
                        if (paneStateChildren && paneChildren) {
                            $.each(paneChildren, function(stateKey, child) {
                                childState = paneStateChildren[stateKey];
                                if (child && childState)
                                    child.loadState(childState);
                            });
                        }
                    });
                }
            }
        }

        /**
         * Get the *current layout state* and return it as a hash
         *
         * @param {Object=}     inst    // Layout instance to get state for
         * @param {object=}     [opts]  // State-Managements override options
         */
        ,
        readState: function(inst, opts) {
            // backward compatility
            if ($.type(opts) === 'string') opts = {
                keys: opts
            };
            if (!opts) opts = {};
            var sm = inst.options.stateManagement,
                ic = opts.includeChildren,
                recurse = ic !== undefined ? ic : sm.includeChildren,
                keys = opts.stateKeys || sm.stateKeys,
                alt = {
                    isClosed: 'initClosed',
                    isHidden: 'initHidden'
                }, state = inst.state,
                panes = $.layout.config.allPanes,
                data = {}, pair, pane, key, val, ps, pC, child, array, count, branch;
            if ($.isArray(keys)) keys = keys.join(",");
            // convert keys to an array and change delimiters from '__' to '.'
            keys = keys.replace(/__/g, ".").split(',');
            // loop keys and create a data hash
            for (var i = 0, n = keys.length; i < n; i++) {
                pair = keys[i].split(".");
                pane = pair[0];
                key = pair[1];
                if ($.inArray(pane, panes) < 0) continue; // bad pane!
                val = state[pane][key];
                if (val == undefined) continue;
                if (key == "isClosed" && state[pane]["isSliding"])
                    val = true; // if sliding, then *really* isClosed
                (data[pane] || (data[pane] = {}))[alt[key] ? alt[key] : key] = val;
            }

            // recurse into the child-layouts for each pane
            if (recurse) {
                $.each(panes, function(idx, pane) {
                    pC = inst.children[pane];
                    ps = state.stateData[pane];
                    if ($.isPlainObject(pC) && !$.isEmptyObject(pC)) {
                        // ensure a key exists for this 'pane', eg: branch = data.center
                        branch = data[pane] || (data[pane] = {});
                        if (!branch.children) branch.children = {};
                        $.each(pC, function(key, child) {
                            // ONLY read state from an initialize layout
                            if (child.state.initialized)
                                branch.children[key] = $.layout.state.readState(child);
                            // if we have PREVIOUS (onLoad) state for this child-layout, KEEP IT!
                            else if (ps && ps.children && ps.children[key]) {
                                branch.children[key] = $.extend(true, {}, ps.children[key]);
                            }
                        });
                    }
                });
            }

            return data;
        }

        /**
         *  Stringify a JSON hash so can save in a cookie or db-field
         */
        ,
        encodeJSON: function(JSON) {
            return parse(JSON);

            function parse(h) {
                var D = [],
                    i = 0,
                    k, v, t // k = key, v = value
                    , a = $.isArray(h);
                for (k in h) {
                    v = h[k];
                    t = typeof v;
                    if (t == 'string') // STRING - add quotes
                        v = '"' + v + '"';
                    else if (t == 'object') // SUB-KEY - recurse into it
                        v = parse(v);
                    D[i++] = (!a ? '"' + k + '":' : '') + v;
                }
                return (a ? '[' : '{') + D.join(',') + (a ? ']' : '}');
            };
        }

        /**
         *  Convert stringified JSON back to a hash object
         *  @see        $.parseJSON(), adding in jQuery 1.4.1
         */
        ,
        decodeJSON: function(str) {
            try {
                return $.parseJSON ? $.parseJSON(str) : window["eval"]("(" + str + ")") || {};
            } catch (e) {
                return {};
            }
        }


        ,
        _create: function(inst) {
            var _ = $.layout.state,
                o = inst.options,
                sm = o.stateManagement;
            //  ADD State-Management plugin methods to inst
            $.extend(inst, {
                //  readCookie - update options from cookie - returns hash of cookie data
                readCookie: function() {
                    return _.readCookie(inst);
                }
                //  deleteCookie
                ,
                deleteCookie: function() {
                    _.deleteCookie(inst);
                }
                //  saveCookie - optionally pass keys-list and cookie-options (hash)
                ,
                saveCookie: function(keys, cookieOpts) {
                    return _.saveCookie(inst, keys, cookieOpts);
                }
                //  loadCookie - readCookie and use to loadState() - returns hash of cookie data
                ,
                loadCookie: function() {
                    return _.loadCookie(inst);
                }
                //  loadState - pass a hash of state to use to update options
                ,
                loadState: function(stateData, opts) {
                    _.loadState(inst, stateData, opts);
                }
                //  readState - returns hash of current layout-state
                ,
                readState: function(keys) {
                    return _.readState(inst, keys);
                }
                //  add JSON utility methods too...
                ,
                encodeJSON: _.encodeJSON,
                decodeJSON: _.decodeJSON
            });

            // init state.stateData key, even if plugin is initially disabled
            inst.state.stateData = {};

            // autoLoad MUST BE one of: data-array, data-hash, callback-function, or TRUE
            if (!sm.autoLoad) return;

            //  When state-data exists in the autoLoad key USE IT,
            //  even if stateManagement.enabled == false
            if ($.isPlainObject(sm.autoLoad)) {
                if (!$.isEmptyObject(sm.autoLoad)) {
                    inst.loadState(sm.autoLoad);
                }
            } else if (sm.enabled) {
                // update the options from cookie or callback
                // if options is a function, call it to get stateData
                if ($.isFunction(sm.autoLoad)) {
                    var d = {};
                    try {
                        d = sm.autoLoad(inst, inst.state, inst.options, inst.options.name || ''); // try to get data from fn
                    } catch (e) {}
                    if (d && $.isPlainObject(d) && !$.isEmptyObject(d))
                        inst.loadState(d);
                } else // any other truthy value will trigger loadCookie
                    inst.loadCookie();
            }
        }

        ,
        _unload: function(inst) {
            var sm = inst.options.stateManagement;
            if (sm.enabled && sm.autoSave) {
                // if options is a function, call it to save the stateData
                if ($.isFunction(sm.autoSave)) {
                    try {
                        sm.autoSave(inst, inst.state, inst.options, inst.options.name || ''); // try to get data from fn
                    } catch (e) {}
                } else // any truthy value will trigger saveCookie
                    inst.saveCookie();
            }
        }

    };

    // add state initialization method to Layout's onCreate array of functions
    $.layout.onCreate.push($.layout.state._create);
    $.layout.onUnload.push($.layout.state._unload);




    /**
     * jquery.layout.buttons 1.0
     * $Date: 2011-07-16 08:00:00 (Sat, 16 July 2011) $
     *
     * Copyright (c) 2012
     *   Kevin Dalman (http://allpro.net)
     *
     * Dual licensed under the GPL (http://www.gnu.org/licenses/gpl.html)
     * and MIT (http://www.opensource.org/licenses/mit-license.php) licenses.
     *
     * @requires: UI Layout 1.3.0.rc30.1 or higher
     *
     * @see: http://groups.google.com/group/jquery-ui-layout
     *
     * Docs: [ to come ]
     * Tips: [ to come ]
     */

    // tell Layout that the state plugin is available
    $.layout.plugins.buttons = true;

    //  Add buttons options to layout.defaults
    $.layout.defaults.autoBindCustomButtons = false;
    // Specify autoBindCustomButtons as a layout-option, NOT a pane-option
    $.layout.optionsMap.layout.push("autoBindCustomButtons");

    /*
     *  Button methods
     */
    $.layout.buttons = {

        /**
         * Searches for .ui-layout-button-xxx elements and auto-binds them as layout-buttons
         *
         * @see  _create()
         *
         * @param  {Object}      inst    Layout Instance object
         */
        init: function(inst) {
            var pre = "ui-layout-button-",
                layout = inst.options.name || "",
                name;
            $.each("toggle,open,close,pin,toggle-slide,open-slide".split(","), function(i, action) {
                $.each($.layout.config.borderPanes, function(ii, pane) {
                    $("." + pre + action + "-" + pane).each(function() {
                        // if button was previously 'bound', data.layoutName was set, but is blank if layout has no 'name'
                        name = $(this).data("layoutName") || $(this).attr("layoutName");
                        if (name == undefined || name === layout)
                            inst.bindButton(this, action, pane);
                    });
                });
            });
        }

        /**
         * Helper function to validate params received by addButton utilities
         *
         * Two classes are added to the element, based on the buttonClass...
         * The type of button is appended to create the 2nd className:
         *  - ui-layout-button-pin       // action btnClass
         *  - ui-layout-button-pin-west  // action btnClass + pane
         *  - ui-layout-button-toggle
         *  - ui-layout-button-open
         *  - ui-layout-button-close
         *
         * @param {Object}           inst        Layout Instance object
         * @param {(string|!Object)} selector    jQuery selector (or element) for button, eg: ".ui-layout-north .toggle-button"
         * @param {string}           pane        Name of the pane the button is for: 'north', 'south', etc.
         *
         * @return {Array.<Object>}  If both params valid, the element matching 'selector' in a jQuery wrapper - otherwise returns null
         */
        ,
        get: function(inst, selector, pane, action) {
            var $E = $(selector),
                o = inst.options,
                err = o.errors.addButtonError;
            if (!$E.length) { // element not found
                $.layout.msg(err + " " + o.errors.selector + ": " + selector, true);
            } else if ($.inArray(pane, $.layout.config.borderPanes) < 0) { // invalid 'pane' sepecified
                $.layout.msg(err + " " + o.errors.pane + ": " + pane, true);
                $E = $(""); // NO BUTTON
            } else { // VALID
                var btn = o[pane].buttonClass + "-" + action;
                $E.addClass(btn + " " + btn + "-" + pane)
                    .data("layoutName", o.name); // add layout identifier - even if blank!
            }
            return $E;
        }


        /**
         * NEW syntax for binding layout-buttons - will eventually replace addToggle, addOpen, etc.
         *
         * @param {Object}           inst        Layout Instance object
         * @param {(string|!Object)} selector    jQuery selector (or element) for button, eg: ".ui-layout-north .toggle-button"
         * @param {string}           action
         * @param {string}           pane
         */
        ,
        bind: function(inst, selector, action, pane) {
            var _ = $.layout.buttons;
            switch (action.toLowerCase()) {
                case "toggle":
                    _.addToggle(inst, selector, pane);
                    break;
                case "open":
                    _.addOpen(inst, selector, pane);
                    break;
                case "close":
                    _.addClose(inst, selector, pane);
                    break;
                case "pin":
                    _.addPin(inst, selector, pane);
                    break;
                case "toggle-slide":
                    _.addToggle(inst, selector, pane, true);
                    break;
                case "open-slide":
                    _.addOpen(inst, selector, pane, true);
                    break;
            }
            return inst;
        }

        /**
         * Add a custom Toggler button for a pane
         *
         * @param {Object}           inst        Layout Instance object
         * @param {(string|!Object)} selector    jQuery selector (or element) for button, eg: ".ui-layout-north .toggle-button"
         * @param {string}           pane        Name of the pane the button is for: 'north', 'south', etc.
         * @param {boolean=}         slide       true = slide-open, false = pin-open
         */
        ,
        addToggle: function(inst, selector, pane, slide) {
            $.layout.buttons.get(inst, selector, pane, "toggle")
                .click(function(evt) {
                    inst.toggle(pane, !! slide);
                    evt.stopPropagation();
                });
            return inst;
        }

        /**
         * Add a custom Open button for a pane
         *
         * @param {Object}           inst        Layout Instance object
         * @param {(string|!Object)} selector    jQuery selector (or element) for button, eg: ".ui-layout-north .toggle-button"
         * @param {string}           pane        Name of the pane the button is for: 'north', 'south', etc.
         * @param {boolean=}         slide       true = slide-open, false = pin-open
         */
        ,
        addOpen: function(inst, selector, pane, slide) {
            $.layout.buttons.get(inst, selector, pane, "open")
                .attr("title", inst.options[pane].tips.Open)
                .click(function(evt) {
                    inst.open(pane, !! slide);
                    evt.stopPropagation();
                });
            return inst;
        }

        /**
         * Add a custom Close button for a pane
         *
         * @param {Object}           inst        Layout Instance object
         * @param {(string|!Object)} selector    jQuery selector (or element) for button, eg: ".ui-layout-north .toggle-button"
         * @param {string}           pane        Name of the pane the button is for: 'north', 'south', etc.
         */
        ,
        addClose: function(inst, selector, pane) {
            $.layout.buttons.get(inst, selector, pane, "close")
                .attr("title", inst.options[pane].tips.Close)
                .click(function(evt) {
                    inst.close(pane);
                    evt.stopPropagation();
                });
            return inst;
        }

        /**
         * Add a custom Pin button for a pane
         *
         * Four classes are added to the element, based on the paneClass for the associated pane...
         * Assuming the default paneClass and the pin is 'up', these classes are added for a west-pane pin:
         *  - ui-layout-pane-pin
         *  - ui-layout-pane-west-pin
         *  - ui-layout-pane-pin-up
         *  - ui-layout-pane-west-pin-up
         *
         * @param {Object}           inst        Layout Instance object
         * @param {(string|!Object)} selector    jQuery selector (or element) for button, eg: ".ui-layout-north .toggle-button"
         * @param {string}           pane        Name of the pane the pin is for: 'north', 'south', etc.
         */
        ,
        addPin: function(inst, selector, pane) {
            var _ = $.layout.buttons,
                $E = _.get(inst, selector, pane, "pin");
            if ($E.length) {
                var s = inst.state[pane];
                $E.click(function(evt) {
                    _.setPinState(inst, $(this), pane, (s.isSliding || s.isClosed));
                    if (s.isSliding || s.isClosed) inst.open(pane); // change from sliding to open
                    else inst.close(pane); // slide-closed
                    evt.stopPropagation();
                });
                // add up/down pin attributes and classes
                _.setPinState(inst, $E, pane, (!s.isClosed && !s.isSliding));
                // add this pin to the pane data so we can 'sync it' automatically
                // PANE.pins key is an array so we can store multiple pins for each pane
                s.pins.push(selector); // just save the selector string
            }
            return inst;
        }

        /**
         * Change the class of the pin button to make it look 'up' or 'down'
         *
         * @see  addPin(), syncPins()
         *
         * @param {Object}           inst    Layout Instance object
         * @param {Array.<Object>}   $Pin    The pin-span element in a jQuery wrapper
         * @param {string}           pane    These are the params returned to callbacks by layout()
         * @param {boolean}          doPin   true = set the pin 'down', false = set it 'up'
         */
        ,
        setPinState: function(inst, $Pin, pane, doPin) {
            var updown = $Pin.attr("pin");
            if (updown && doPin === (updown == "down")) return; // already in correct state
            var
            o = inst.options[pane],
                pin = o.buttonClass + "-pin",
                side = pin + "-" + pane,
                UP = pin + "-up " + side + "-up",
                DN = pin + "-down " + side + "-down";
            $Pin
                .attr("pin", doPin ? "down" : "up") // logic
            .attr("title", doPin ? o.tips.Unpin : o.tips.Pin)
                .removeClass(doPin ? UP : DN)
                .addClass(doPin ? DN : UP);
        }

        /**
         * INTERNAL function to sync 'pin buttons' when pane is opened or closed
         * Unpinned means the pane is 'sliding' - ie, over-top of the adjacent panes
         *
         * @see  open(), close()
         *
         * @param {Object}           inst    Layout Instance object
         * @param {string}   pane    These are the params returned to callbacks by layout()
         * @param {boolean}  doPin   True means set the pin 'down', False means 'up'
         */
        ,
        syncPinBtns: function(inst, pane, doPin) {
            // REAL METHOD IS _INSIDE_ LAYOUT - THIS IS HERE JUST FOR REFERENCE
            $.each(inst.state[pane].pins, function(i, selector) {
                $.layout.buttons.setPinState(inst, $(selector), pane, doPin);
            });
        }


        ,
        _load: function(inst) {
            var _ = $.layout.buttons;
            // ADD Button methods to Layout Instance
            // Note: sel = jQuery Selector string
            $.extend(inst, {
                bindButton: function(sel, action, pane) {
                    return _.bind(inst, sel, action, pane);
                }
                //  DEPRECATED METHODS
                ,
                addToggleBtn: function(sel, pane, slide) {
                    return _.addToggle(inst, sel, pane, slide);
                },
                addOpenBtn: function(sel, pane, slide) {
                    return _.addOpen(inst, sel, pane, slide);
                },
                addCloseBtn: function(sel, pane) {
                    return _.addClose(inst, sel, pane);
                },
                addPinBtn: function(sel, pane) {
                    return _.addPin(inst, sel, pane);
                }
            });

            // init state array to hold pin-buttons
            for (var i = 0; i < 4; i++) {
                var pane = $.layout.config.borderPanes[i];
                inst.state[pane].pins = [];
            }

            // auto-init buttons onLoad if option is enabled
            if (inst.options.autoBindCustomButtons)
                _.init(inst);
        }

        ,
        _unload: function(inst) {
            // TODO: unbind all buttons???
        }

    };

    // add initialization method to Layout's onLoad array of functions
    $.layout.onLoad.push($.layout.buttons._load);
    //$.layout.onUnload.push( $.layout.buttons._unload );



    /**
     * jquery.layout.browserZoom 1.0
     * $Date: 2011-12-29 08:00:00 (Thu, 29 Dec 2011) $
     *
     * Copyright (c) 2012
     *   Kevin Dalman (http://allpro.net)
     *
     * Dual licensed under the GPL (http://www.gnu.org/licenses/gpl.html)
     * and MIT (http://www.opensource.org/licenses/mit-license.php) licenses.
     *
     * @requires: UI Layout 1.3.0.rc30.1 or higher
     *
     * @see: http://groups.google.com/group/jquery-ui-layout
     *
     * TODO: Extend logic to handle other problematic zooming in browsers
     * TODO: Add hotkey/mousewheel bindings to _instantly_ respond to these zoom event
     */

    // tell Layout that the plugin is available
    $.layout.plugins.browserZoom = true;

    $.layout.defaults.browserZoomCheckInterval = 1000;
    $.layout.optionsMap.layout.push("browserZoomCheckInterval");

    /*
     *  browserZoom methods
     */
    $.layout.browserZoom = {

        _init: function(inst) {
            // abort if browser does not need this check
            if ($.layout.browserZoom.ratio() !== false)
                $.layout.browserZoom._setTimer(inst);
        }

        ,
        _setTimer: function(inst) {
            // abort if layout destroyed or browser does not need this check
            if (inst.destroyed) return;
            var o = inst.options,
                s = inst.state
                //  don't need check if inst has parentLayout, but check occassionally in case parent destroyed!
                //  MINIMUM 100ms interval, for performance
                ,
                ms = inst.hasParentLayout ? 5000 : Math.max(o.browserZoomCheckInterval, 100);
            // set the timer
            setTimeout(function() {
                if (inst.destroyed || !o.resizeWithWindow) return;
                var d = $.layout.browserZoom.ratio();
                if (d !== s.browserZoom) {
                    s.browserZoom = d;
                    inst.resizeAll();
                }
                // set a NEW timeout
                $.layout.browserZoom._setTimer(inst);
            }, ms);
        }

        ,
        ratio: function() {
            var w = window,
                s = screen,
                d = document,
                dE = d.documentElement || d.body,
                b = $.layout.browser,
                v = b.version,
                r, sW, cW;
            // we can ignore all browsers that fire window.resize event onZoom
            if ((b.msie && v > 8) || !b.msie) return false; // don't need to track zoom

            if (s.deviceXDPI && s.systemXDPI) // syntax compiler hack
                return calc(s.deviceXDPI, s.systemXDPI);
            // everything below is just for future reference!
            if (b.webkit && (r = d.body.getBoundingClientRect))
                return calc((r.left - r.right), d.body.offsetWidth);
            if (b.webkit && (sW = w.outerWidth))
                return calc(sW, w.innerWidth);
            if ((sW = s.width) && (cW = dE.clientWidth))
                return calc(sW, cW);
            return false; // no match, so cannot - or don't need to - track zoom

            function calc(x, y) {
                return (parseInt(x, 10) / parseInt(y, 10) * 100).toFixed();
            }
        }

    };
    // add initialization method to Layout's onLoad array of functions
    $.layout.onReady.push($.layout.browserZoom._init);


})($ || jQuery);;(function($){
    var base64module = {};

// *** begin
    /* /_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
    charset = shift_jis

    +++ Base64 Encode / Decode +++


    LastModified : 2006-11/08
    
    Powered by kerry
    http://202.248.69.143/~goma/
    
    動作ブラウザ :: IE4+ , NN4.06+ , Gecko , Opera6+


    * [RFC 2045] Multipurpose Internet Mail Extensions
                            (MIME) Part One:
                   Format of Internet Message Bodies
    ftp://ftp.isi.edu/in-notes/rfc2045.txt
    
    /_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
    
    *   Usage:

    // エンコード
    b64_string = base64.encode( my_data [, strMode] );
    
    // デコード
    my_data = base64.decode( b64_string [, strMode] );   
    
    
    strMode -> 入力データが文字列の場合 1 を
    
    /_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */


// [yatt] enclose
//base64 = new function()
var base64 = new function()
// 
{
    var utfLibName  = "utf";
    var b64char     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    var b64encTable = b64char.split("");
    var b64decTable = [];
    for (var i=0; i<b64char.length; i++) b64decTable[b64char.charAt(i)] = i;

    this.encode = function(_dat, _strMode)
    {
        return encoder( _strMode? unpackUTF8(_dat): unpackChar(_dat) );
    }
    
    var encoder = function(_ary)
    {
        var md  = _ary.length % 3;
        var b64 = "";
        var i, tmp = 0;
        
        if (md) for (i=3-md; i>0; i--) _ary[_ary.length] = 0;
        
        for (i=0; i<_ary.length; i+=3)
        {
            tmp = (_ary[i]<<16) | (_ary[i+1]<<8) | _ary[i+2];
            b64 +=  b64encTable[ (tmp >>>18) & 0x3f]
                +   b64encTable[ (tmp >>>12) & 0x3f]
                +   b64encTable[ (tmp >>> 6) & 0x3f]
                +   b64encTable[ tmp & 0x3f];
        }

        if (md) // 3の倍数にパディングした 0x0 分 = に置き換え
        {
            md = 3- md;
            b64 = b64.substr(0, b64.length- md);
            while (md--) b64 += "=";
        }
        
        return b64;
    }
    
    this.decode = function(_b64, _strMode)
    {
        var tmp = decoder( _b64 );
        return _strMode? packUTF8(tmp): packChar(tmp);
    }
    
    var decoder = function(_b64)
    {
        _b64    = _b64.replace(/[^A-Za-z0-9\+\/]/g, "");
        var md  = _b64.length % 4;
        var j, i, tmp;
        var dat = [];
        
        // replace 時 = も削っている。その = の代わりに 0x0 を補間
        if (md) for (i=0; i<4-md; i++) _b64 += "A";
        
        for (j=i=0; i<_b64.length; i+=4, j+=3)
        {
            tmp = (b64decTable[_b64.charAt( i )] <<18)
                | (b64decTable[_b64.charAt(i+1)] <<12)
                | (b64decTable[_b64.charAt(i+2)] << 6)
                |  b64decTable[_b64.charAt(i+3)];
            dat[ j ]    = tmp >>> 16;
            dat[j+1]    = (tmp >>> 8) & 0xff;
            dat[j+2]    = tmp & 0xff;
        }
        // 補完された 0x0 分削る
        if (md) dat.length -= [0,0,2,1][md];

        return dat;
    }
    
    var packUTF8    = function(_x){ return utf.packUTF8(_x) };
    var unpackUTF8  = function(_x){ return utf.unpackUTF8(_x) };
    var packChar    = function(_x){ return utf.packChar(_x) };
    var unpackChar  = function(_x){ return utf.unpackChar(_x) };
//    var packUTF8    = function(_x){ return window[utfLibName].packUTF8(_x) };
//    var unpackUTF8  = function(_x){ return window[utfLibName].unpackUTF8(_x) };
//    var packChar    = function(_x){ return window[utfLibName].packChar(_x) };
//    var unpackChar  = function(_x){ return window[utfLibName].unpackChar(_x) };
}
    

    /* /_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
    charset = shift_jis

    +++ UTF8/16 ライブラリ +++


    LastModified : 2006-10/16
    
    Powered by kerry
    http://202.248.69.143/~goma/
    
    動作ブラウザ :: IE4+ , NN4.06+ , Gecko , Opera6+



    * [RFC 2279] UTF-8, a transformation format of ISO 10646
    ftp://ftp.isi.edu/in-notes/rfc2279.txt
    
    * [RFC 1738] Uniform Resource Locators (URL)
    ftp://ftp.isi.edu/in-notes/rfc1738.txt

    /_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
    
    Usage:
    
    // 文字列を UTF16 (文字コード) へ
    utf16code_array = utf.unpackUTF16( my_string );

    // 文字列を UTF8 (文字コード) へ
    utf8code_array = utf.unpackUTF8( my_string );
    
    // UTF8 (文字コード) から文字列へ。 utf.unpackUTF8() したものを元に戻す
    my_string = utf.packUTF8( utf8code_array );

    // UTF8/16 (文字コード) を文字列へ
    my_string = utf.packChar( utfCode_array );
    
    // UTF16 (文字コード) から UTF8 (文字コード) へ
    utf8code_array = utf.toUTF8( utf16code_array );
    
    // UTF8 (文字コード) から UTF16 (文字コード) へ
    utf16code_array = utf.toUTF16( utf8code_array );



    // URL 文字列へエンコード
    url_string = utf.URLencode( my_string );

    // URL 文字列からデコード
    my_string = utf.URLdecode( url_string );

    /_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */


// [yatt] enclose
//utf = new function()
var utf = new function()
//
{
    this.unpackUTF16 = function(_str)
    {
        var i, utf16=[];
        for (i=0; i<_str.length; i++) utf16[i] = _str.charCodeAt(i);
        return utf16;
    }
    
    this.unpackChar = function(_str) 
    {
        var utf16 = this.unpackUTF16(_str);
        var i,n, tmp = [];
        for (n=i=0; i<utf16.length; i++) {
            if (utf16[i]<=0xff) tmp[n++] = utf16[i];
            else {
                tmp[n++] = utf16[i] >> 8;
                tmp[n++] = utf16[i] &  0xff;
            }   
        }
        return tmp;
    }
    
    this.packChar  =
    this.packUTF16 = function(_utf16)
    {
        var i, str = "";
        for (i in _utf16) str += String.fromCharCode(_utf16[i]);
        return str;
    }

    this.unpackUTF8 = function(_str)
    {
       return this.toUTF8( this.unpackUTF16(_str) );
    }

    this.packUTF8 = function(_utf8)
    {
        return this.packUTF16( this.toUTF16(_utf8) );
    }
    
    this.toUTF8 = function(_utf16)
    {
        var utf8 = [];
        var idx = 0;
        var i, j, c;
        for (i=0; i<_utf16.length; i++)
        {
            c = _utf16[i];
            if (c <= 0x7f) utf8[idx++] = c;
            else if (c <= 0x7ff)
            {
                utf8[idx++] = 0xc0 | (c >>> 6 );
                utf8[idx++] = 0x80 | (c & 0x3f);
            }
            else if (c <= 0xffff)
            {
                utf8[idx++] = 0xe0 | (c >>> 12 );
                utf8[idx++] = 0x80 | ((c >>> 6 ) & 0x3f);
                utf8[idx++] = 0x80 | (c & 0x3f);
            }
            else
            {
                j = 4;
                while (c >> (6*j)) j++;
                utf8[idx++] = ((0xff00 >>> j) & 0xff) | (c >>> (6*--j) );
                while (j--) 
                utf8[idx++] = 0x80 | ((c >>> (6*j)) & 0x3f);
            }
        }
        return utf8;
    }
    
    this.toUTF16 = function(_utf8)
    {
        var utf16 = [];
        var idx = 0;
        var i,s;
        for (i=0; i<_utf8.length; i++, idx++)
        {
            if (_utf8[i] <= 0x7f) utf16[idx] = _utf8[i];
            else 
            {
                if ( (_utf8[i]>>5) == 0x6)
                {
                    utf16[idx] = ( (_utf8[i] & 0x1f) << 6 )
                                 | ( _utf8[++i] & 0x3f );
                }
                else if ( (_utf8[i]>>4) == 0xe)
                {
                    utf16[idx] = ( (_utf8[i] & 0xf) << 12 )
                                 | ( (_utf8[++i] & 0x3f) << 6 )
                                 | ( _utf8[++i] & 0x3f );
                }
                else
                {
                    s = 1;
                    while (_utf8[i] & (0x20 >>> s) ) s++;
                    utf16[idx] = _utf8[i] & (0x1f >>> s);
                    while (s-->=0) utf16[idx] = (utf16[idx] << 6) ^ (_utf8[++i] & 0x3f);
                }
            }
        }
        return utf16;
    }
    
    this.URLencode = function(_str)
    {
        return _str.replace(/([^a-zA-Z0-9_\-\.])/g, function(_tmp, _c)
            { 
                if (_c == "\x20") return "+";
                var tmp = utf.toUTF8( [_c.charCodeAt(0)] );
                var c = "";
                for (var i in tmp)
                {
                    i = tmp[i].toString(16);
                    if (i.length == 1) i = "0"+ i;
                    c += "%"+ i;
                }
                return c;
            } );
    }

    this.URLdecode = function(_dat)
    {
        _dat = _dat.replace(/\+/g, "\x20");
        _dat = _dat.replace( /%([a-fA-F0-9][a-fA-F0-9])/g, 
                function(_tmp, _hex){ return String.fromCharCode( parseInt(_hex, 16) ) } );
        return this.packChar( this.toUTF16( this.unpackUTF16(_dat) ) );
    }
}

// *** end

    // add functions
    $.extend({
        base64: {
            encode: base64.encode,
            decode: base64.decode,
            codec: typeof atob == 'function' ? 'builtin' : 'alternate'
        }
    })
    
    //
    // override jQuery.ajax:
    // if ajax 'dataType' option value ended by ':b64', then
    // decode base64 string automatically
    //
    $.ajax = (function(ajax){
        return function(option){
            var flg = 0
            
            // dataType string ended by ':b64' or not?
            if (option.dataType && option.dataType.match(/:b64/)){
                option.dataType = option.dataType.replace(':b64', '')
                flg = 1
            }
            
            if (flg){
                option.success = (function(callback){
                    return function(data, status, xhr){
                        data = $.base64.decode(data)
                        callback(data, status, xhr)
                    }
                })(option.success || function(data, status, xhr){})
            }
            
            return ajax.apply(this, arguments)
        }
    })($.ajax)

})(jQuery)
;/*jslint evil: true, regexp: true */

/*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,
    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
    lastIndex, length, parse, prototype, push, replace, slice, stringify,
    test, toJSON, toString, valueOf
*/


// Create a JSON object only if one does not already exist. We create the
// methods in a closure to avoid creating global variables.

if (typeof JSON !== 'object') {
    JSON = {};
}

(function () {
    'use strict';

    function f(n) {
        // Format integers to have at least two digits.
        return n < 10 ? '0' + n : n;
    }

    if (typeof Date.prototype.toJSON !== 'function') {

        Date.prototype.toJSON = function () {

            return isFinite(this.valueOf())
                ? this.getUTCFullYear()     + '-' +
                    f(this.getUTCMonth() + 1) + '-' +
                    f(this.getUTCDate())      + 'T' +
                    f(this.getUTCHours())     + ':' +
                    f(this.getUTCMinutes())   + ':' +
                    f(this.getUTCSeconds())   + 'Z'
                : null;
        };

        String.prototype.toJSON      =
            Number.prototype.toJSON  =
            Boolean.prototype.toJSON = function () {
                return this.valueOf();
            };
    }

    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        gap,
        indent,
        meta = {    // table of character substitutions
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"' : '\\"',
            '\\': '\\\\'
        },
        rep;


    function quote(string) {

// If the string contains no control characters, no quote characters, and no
// backslash characters, then we can safely slap some quotes around it.
// Otherwise we must also replace the offending characters with safe escape
// sequences.

        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string'
                ? c
                : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
    }


    function str(key, holder) {

// Produce a string from holder[key].

        var i,          // The loop counter.
            k,          // The member key.
            v,          // The member value.
            length,
            mind = gap,
            partial,
            value = holder[key];

// If the value has a toJSON method, call it to obtain a replacement value.

        if (value && typeof value === 'object' &&
                typeof value.toJSON === 'function') {
            value = value.toJSON(key);
        }

// If we were called with a replacer function, then call the replacer to
// obtain a replacement value.

        if (typeof rep === 'function') {
            value = rep.call(holder, key, value);
        }

// What happens next depends on the value's type.

        switch (typeof value) {
        case 'string':
            return quote(value);

        case 'number':

// JSON numbers must be finite. Encode non-finite numbers as null.

            return isFinite(value) ? String(value) : 'null';

        case 'boolean':
        case 'null':

// If the value is a boolean or null, convert it to a string. Note:
// typeof null does not produce 'null'. The case is included here in
// the remote chance that this gets fixed someday.

            return String(value);

// If the type is 'object', we might be dealing with an object or an array or
// null.

        case 'object':

// Due to a specification blunder in ECMAScript, typeof null is 'object',
// so watch out for that case.

            if (!value) {
                return 'null';
            }

// Make an array to hold the partial results of stringifying this object value.

            gap += indent;
            partial = [];

// Is the value an array?

            if (Object.prototype.toString.apply(value) === '[object Array]') {

// The value is an array. Stringify every element. Use null as a placeholder
// for non-JSON values.

                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || 'null';
                }

// Join all of the elements together, separated with commas, and wrap them in
// brackets.

                v = partial.length === 0
                    ? '[]'
                    : gap
                    ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']'
                    : '[' + partial.join(',') + ']';
                gap = mind;
                return v;
            }

// If the replacer is an array, use it to select the members to be stringified.

            if (rep && typeof rep === 'object') {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    if (typeof rep[i] === 'string') {
                        k = rep[i];
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            } else {

// Otherwise, iterate through all of the keys in the object.

                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            }

// Join all of the member texts together, separated with commas,
// and wrap them in braces.

            v = partial.length === 0
                ? '{}'
                : gap
                ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}'
                : '{' + partial.join(',') + '}';
            gap = mind;
            return v;
        }
    }

// If the JSON object does not yet have a stringify method, give it one.

    if (typeof JSON.stringify !== 'function') {
        JSON.stringify = function (value, replacer, space) {

// The stringify method takes a value and an optional replacer, and an optional
// space parameter, and returns a JSON text. The replacer can be a function
// that can replace values, or an array of strings that will select the keys.
// A default replacer method can be provided. Use of the space parameter can
// produce text that is more easily readable.

            var i;
            gap = '';
            indent = '';

// If the space parameter is a number, make an indent string containing that
// many spaces.

            if (typeof space === 'number') {
                for (i = 0; i < space; i += 1) {
                    indent += ' ';
                }

// If the space parameter is a string, it will be used as the indent string.

            } else if (typeof space === 'string') {
                indent = space;
            }

// If there is a replacer, it must be a function or an array.
// Otherwise, throw an error.

            rep = replacer;
            if (replacer && typeof replacer !== 'function' &&
                    (typeof replacer !== 'object' ||
                    typeof replacer.length !== 'number')) {
                throw new Error('JSON.stringify');
            }

// Make a fake root object containing our value under the key of ''.
// Return the result of stringifying the value.

            return str('', {'': value});
        };
    }


// If the JSON object does not yet have a parse method, give it one.

    if (typeof JSON.parse !== 'function') {
        JSON.parse = function (text, reviver) {

// The parse method takes a text and an optional reviver function, and returns
// a JavaScript value if the text is a valid JSON text.

            var j;

            function walk(holder, key) {

// The walk method is used to recursively walk the resulting structure so
// that modifications can be made.

                var k, v, value = holder[key];
                if (value && typeof value === 'object') {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }


// Parsing happens in four stages. In the first stage, we replace certain
// Unicode characters with escape sequences. JavaScript handles many characters
// incorrectly, either silently deleting them, or treating them as line endings.

            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return '\\u' +
                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }

// In the second stage, we run the text against regular expressions that look
// for non-JSON patterns. We are especially concerned with '()' and 'new'
// because they can cause invocation, and '=' because it can cause mutation.
// But just to be safe, we want to reject all unexpected forms.

// We split the second stage into 4 regexp operations in order to work around
// crippling inefficiencies in IE's and Safari's regexp engines. First we
// replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
// replace all simple value tokens with ']' characters. Third, we delete all
// open brackets that follow a colon or comma or that begin the text. Finally,
// we look to see that the remaining characters are only whitespace or ']' or
// ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.

            if (/^[\],:{}\s]*$/
                    .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
                        .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
                        .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

// In the third stage we use the eval function to compile the text into a
// JavaScript structure. The '{' operator is subject to a syntactic ambiguity
// in JavaScript: it can begin a block or an object literal. We wrap the text
// in parens to eliminate the ambiguity.

                j = eval('(' + text + ')');

// In the optional fourth stage, we recursively walk the new structure, passing
// each name/value pair to a reviver function for possible transformation.

                return typeof reviver === 'function'
                    ? walk({'': j}, '')
                    : j;
            }

// If the text is not JSON parseable, then a SyntaxError is thrown.

            throw new SyntaxError('JSON.parse');
        };
    }
}());
;/*! http://mths.be/placeholder v2.0.7 by @mathias */
;(function(window, document, $) {

	var isInputSupported = 'placeholder' in document.createElement('input');
	var isTextareaSupported = 'placeholder' in document.createElement('textarea');
	var prototype = $.fn;
	var valHooks = $.valHooks;
	var propHooks = $.propHooks;
	var hooks;
	var placeholder;

	if (isInputSupported && isTextareaSupported) {

		placeholder = prototype.placeholder = function() {
			return this;
		};

		placeholder.input = placeholder.textarea = true;

	} else {

		placeholder = prototype.placeholder = function() {
			var $this = this;
			$this
				.filter((isInputSupported ? 'textarea' : ':input') + '[placeholder]')
				.not('.placeholder')
				.bind({
					'focus.placeholder': clearPlaceholder,
					'blur.placeholder': setPlaceholder
				})
				.data('placeholder-enabled', true)
				.trigger('blur.placeholder');
			return $this;
		};

		placeholder.input = isInputSupported;
		placeholder.textarea = isTextareaSupported;

		hooks = {
			'get': function(element) {
				var $element = $(element);

				var $passwordInput = $element.data('placeholder-password');
				if ($passwordInput) {
					return $passwordInput[0].value;
				}

				return $element.data('placeholder-enabled') && $element.hasClass('placeholder') ? '' : element.value;
			},
			'set': function(element, value) {
				var $element = $(element);

				var $passwordInput = $element.data('placeholder-password');
				if ($passwordInput) {
					return $passwordInput[0].value = value;
				}

				if (!$element.data('placeholder-enabled')) {
					return element.value = value;
				}
				if (value == '') {
					element.value = value;
					// Issue #56: Setting the placeholder causes problems if the element continues to have focus.
					if (element != safeActiveElement()) {
						// We can't use `triggerHandler` here because of dummy text/password inputs :(
						setPlaceholder.call(element);
					}
				} else if ($element.hasClass('placeholder')) {
					clearPlaceholder.call(element, true, value) || (element.value = value);
				} else {
					element.value = value;
				}
				// `set` can not return `undefined`; see http://jsapi.info/jquery/1.7.1/val#L2363
				return $element;
			}
		};

		if (!isInputSupported) {
			valHooks.input = hooks;
			propHooks.value = hooks;
		}
		if (!isTextareaSupported) {
			valHooks.textarea = hooks;
			propHooks.value = hooks;
		}

		$(function() {
			// Look for forms
			$(document).delegate('form', 'submit.placeholder', function() {
				// Clear the placeholder values so they don't get submitted
				var $inputs = $('.placeholder', this).each(clearPlaceholder);
				setTimeout(function() {
					$inputs.each(setPlaceholder);
				}, 10);
			});
		});

		// Clear placeholder values upon page reload
		$(window).bind('beforeunload.placeholder', function() {
			$('.placeholder').each(function() {
				this.value = '';
			});
		});

	}

	function args(elem) {
		// Return an object of element attributes
		var newAttrs = {};
		var rinlinejQuery = /^jQuery\d+$/;
		$.each(elem.attributes, function(i, attr) {
			if (attr.specified && !rinlinejQuery.test(attr.name)) {
				newAttrs[attr.name] = attr.value;
			}
		});
		return newAttrs;
	}

	function clearPlaceholder(event, value) {
		var input = this;
		var $input = $(input);
		if (input.value == $input.attr('placeholder') && $input.hasClass('placeholder')) {
			if ($input.data('placeholder-password')) {
				$input = $input.hide().next().show().attr('id', $input.removeAttr('id').data('placeholder-id'));
				// If `clearPlaceholder` was called from `$.valHooks.input.set`
				if (event === true) {
					return $input[0].value = value;
				}
				$input.focus();
			} else {
				input.value = '';
				$input.removeClass('placeholder');
				input == safeActiveElement() && input.select();
			}
		}
	}

	function setPlaceholder() {
		var $replacement;
		var input = this;
		var $input = $(input);
		var id = this.id;
		if (input.value == '') {
			if (input.type == 'password') {
				if (!$input.data('placeholder-textinput')) {
					try {
						$replacement = $input.clone().attr({ 'type': 'text' });
					} catch(e) {
						$replacement = $('<input>').attr($.extend(args(this), { 'type': 'text' }));
					}
					$replacement
						.removeAttr('name')
						.data({
							'placeholder-password': $input,
							'placeholder-id': id
						})
						.bind('focus.placeholder', clearPlaceholder);
					$input
						.data({
							'placeholder-textinput': $replacement,
							'placeholder-id': id
						})
						.before($replacement);
				}
				$input = $input.removeAttr('id').hide().prev().attr('id', id).show();
				// Note: `$input[0] != input` now!
			}
			$input.addClass('placeholder');
			$input[0].value = $input.attr('placeholder');
		} else {
			$input.removeClass('placeholder');
		}
	}

	function safeActiveElement() {
		// Avoid IE9 `document.activeElement` of death
		// https://github.com/mathiasbynens/jquery-placeholder/pull/99
		try {
			return document.activeElement;
		} catch (err) {}
	}

}(this, document, jQuery));
;/*!
 * jQuery Cookie Plugin v1.4.0
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2013 Klaus Hartl
 * Released under the MIT license
 */
(function (factory) {
	if (typeof define === 'function' && define.amd) {
		// AMD. Register as anonymous module.
		define(['jquery'], factory);
	} else {
		// Browser globals.
		factory(jQuery);
	}
}(function ($) {

	var pluses = /\+/g;

	function encode(s) {
		return config.raw ? s : encodeURIComponent(s);
	}

	function decode(s) {
		return config.raw ? s : decodeURIComponent(s);
	}

	function stringifyCookieValue(value) {
		return encode(config.json ? JSON.stringify(value) : String(value));
	}

	function parseCookieValue(s) {
		if (s.indexOf('"') === 0) {
			// This is a quoted cookie as according to RFC2068, unescape...
			s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
		}

		try {
			// Replace server-side written pluses with spaces.
			// If we can't decode the cookie, ignore it, it's unusable.
			s = decodeURIComponent(s.replace(pluses, ' '));
		} catch(e) {
			return;
		}

		try {
			// If we can't parse the cookie, ignore it, it's unusable.
			return config.json ? JSON.parse(s) : s;
		} catch(e) {}
	}

	function read(s, converter) {
		var value = config.raw ? s : parseCookieValue(s);
		return $.isFunction(converter) ? converter(value) : value;
	}

	var config = $.cookie = function (key, value, options) {

		// Write
		if (value !== undefined && !$.isFunction(value)) {
			options = $.extend({}, config.defaults, options);

			if (typeof options.expires === 'number') {
				var days = options.expires, t = options.expires = new Date();
				t.setDate(t.getDate() + days);
			}

			return (document.cookie = [
				encode(key), '=', stringifyCookieValue(value),
				options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
				options.path    ? '; path=' + options.path : '',
				options.domain  ? '; domain=' + options.domain : '',
				options.secure  ? '; secure' : ''
			].join(''));
		}

		// Read

		var result = key ? undefined : {};

		// To prevent the for loop in the first place assign an empty array
		// in case there are no cookies at all. Also prevents odd result when
		// calling $.cookie().
		var cookies = document.cookie ? document.cookie.split('; ') : [];

		for (var i = 0, l = cookies.length; i < l; i++) {
			var parts = cookies[i].split('=');
			var name = decode(parts.shift());
			var cookie = parts.join('=');

			if (key && key === name) {
				// If second argument (value) is a function it's a converter...
				result = read(cookie, value);
				break;
			}

			// Prevent storing a cookie that we couldn't decode.
			if (!key && (cookie = read(cookie)) !== undefined) {
				result[name] = cookie;
			}
		}

		return result;
	};

	config.defaults = {};

	$.removeCookie = function (key, options) {
		if ($.cookie(key) !== undefined) {
			// Must not alter options, thus extending a fresh object...
			$.cookie(key, '', $.extend({}, options, { expires: -1 }));
			return true;
		}
		return false;
	};

}));
;(function($){
	var settings = {}, roots = {}, caches = {},
	//default consts of core
	_consts = {
		className: {
			BUTTON: "button",
			LEVEL: "level",
			ICO_LOADING: "ico_loading",
			SWITCH: "switch"
		},
		event: {
			NODECREATED: "ztree_nodeCreated",
			CLICK: "ztree_click",
			EXPAND: "ztree_expand",
			COLLAPSE: "ztree_collapse",
			ASYNC_SUCCESS: "ztree_async_success",
			ASYNC_ERROR: "ztree_async_error"
		},
		id: {
			A: "_a",
			ICON: "_ico",
			SPAN: "_span",
			SWITCH: "_switch",
			UL: "_ul"
		},
		line: {
			ROOT: "root",
			ROOTS: "roots",
			CENTER: "center",
			BOTTOM: "bottom",
			NOLINE: "noline",
			LINE: "line"
		},
		folder: {
			OPEN: "open",
			CLOSE: "close",
			DOCU: "docu"
		},
		node: {
			CURSELECTED: "curSelectedNode"
		}
	},
	//default setting of core
	_setting = {
		treeId: "",
		treeObj: null,
		view: {
			addDiyDom: null,
			autoCancelSelected: true,
			dblClickExpand: true,
			expandSpeed: "fast",
			fontCss: {},
			nameIsHTML: false,
			selectedMulti: true,
			showIcon: true,
			showLine: true,
			showTitle: true
		},
		data: {
			key: {
				children: "children",
				name: "name",
				title: "",
				url: "url"
			},
			simpleData: {
				enable: false,
				idKey: "id",
				pIdKey: "pId",
				rootPId: null
			},
			keep: {
				parent: false,
				leaf: false
			}
		},
		async: {
			enable: false,
			contentType: "application/x-www-form-urlencoded",
			type: "post",
			dataType: "text",
			url: "",
			autoParam: [],
			otherParam: [],
			dataFilter: null
		},
		callback: {
			beforeAsync:null,
			beforeClick:null,
			beforeDblClick:null,
			beforeRightClick:null,
			beforeMouseDown:null,
			beforeMouseUp:null,
			beforeExpand:null,
			beforeCollapse:null,
			beforeRemove:null,

			onAsyncError:null,
			onAsyncSuccess:null,
			onNodeCreated:null,
			onClick:null,
			onDblClick:null,
			onRightClick:null,
			onMouseDown:null,
			onMouseUp:null,
			onExpand:null,
			onCollapse:null,
			onRemove:null
		}
	},
	//default root of core
	//zTree use root to save full data
	_initRoot = function (setting) {
		var r = data.getRoot(setting);
		if (!r) {
			r = {};
			data.setRoot(setting, r);
		}
		r[setting.data.key.children] = [];
		r.expandTriggerFlag = false;
		r.curSelectedList = [];
		r.noSelection = true;
		r.createdNodes = [];
		r.zId = 0;
		r._ver = (new Date()).getTime();
	},
	//default cache of core
	_initCache = function(setting) {
		var c = data.getCache(setting);
		if (!c) {
			c = {};
			data.setCache(setting, c);
		}
		c.nodes = [];
		c.doms = [];
	},
	//default bindEvent of core
	_bindEvent = function(setting) {
		var o = setting.treeObj,
		c = consts.event;
		o.bind(c.NODECREATED, function (event, treeId, node) {
			tools.apply(setting.callback.onNodeCreated, [event, treeId, node]);
		});

		o.bind(c.CLICK, function (event, srcEvent, treeId, node, clickFlag) {
			tools.apply(setting.callback.onClick, [srcEvent, treeId, node, clickFlag]);
		});

		o.bind(c.EXPAND, function (event, treeId, node) {
			tools.apply(setting.callback.onExpand, [event, treeId, node]);
		});

		o.bind(c.COLLAPSE, function (event, treeId, node) {
			tools.apply(setting.callback.onCollapse, [event, treeId, node]);
		});

		o.bind(c.ASYNC_SUCCESS, function (event, treeId, node, msg) {
			tools.apply(setting.callback.onAsyncSuccess, [event, treeId, node, msg]);
		});

		o.bind(c.ASYNC_ERROR, function (event, treeId, node, XMLHttpRequest, textStatus, errorThrown) {
			tools.apply(setting.callback.onAsyncError, [event, treeId, node, XMLHttpRequest, textStatus, errorThrown]);
		});
	},
	_unbindEvent = function(setting) {
		var o = setting.treeObj,
		c = consts.event;
		o.unbind(c.NODECREATED)
		.unbind(c.CLICK)
		.unbind(c.EXPAND)
		.unbind(c.COLLAPSE)
		.unbind(c.ASYNC_SUCCESS)
		.unbind(c.ASYNC_ERROR);
	},
	//default event proxy of core
	_eventProxy = function(event) {
		var target = event.target,
		setting = data.getSetting(event.data.treeId),
		tId = "", node = null,
		nodeEventType = "", treeEventType = "",
		nodeEventCallback = null, treeEventCallback = null,
		tmp = null;

		if (tools.eqs(event.type, "mousedown")) {
			treeEventType = "mousedown";
		} else if (tools.eqs(event.type, "mouseup")) {
			treeEventType = "mouseup";
		} else if (tools.eqs(event.type, "contextmenu")) {
			treeEventType = "contextmenu";
		} else if (tools.eqs(event.type, "click")) {
			if (tools.eqs(target.tagName, "span") && target.getAttribute("treeNode"+ consts.id.SWITCH) !== null) {
				tId = tools.getNodeMainDom(target).id;
				nodeEventType = "switchNode";
			} else {
				tmp = tools.getMDom(setting, target, [{tagName:"a", attrName:"treeNode"+consts.id.A}]);
				if (tmp) {
					tId = tools.getNodeMainDom(tmp).id;
					nodeEventType = "clickNode";
				}
			}
		} else if (tools.eqs(event.type, "dblclick")) {
			treeEventType = "dblclick";
			tmp = tools.getMDom(setting, target, [{tagName:"a", attrName:"treeNode"+consts.id.A}]);
			if (tmp) {
				tId = tools.getNodeMainDom(tmp).id;
				nodeEventType = "switchNode";
			}
		}
		if (treeEventType.length > 0 && tId.length == 0) {
			tmp = tools.getMDom(setting, target, [{tagName:"a", attrName:"treeNode"+consts.id.A}]);
			if (tmp) {tId = tools.getNodeMainDom(tmp).id;}
		}
		// event to node
		if (tId.length>0) {
			node = data.getNodeCache(setting, tId);
			switch (nodeEventType) {
				case "switchNode" :
					if (!node.isParent) {
						nodeEventType = "";
					} else if (tools.eqs(event.type, "click")
						|| (tools.eqs(event.type, "dblclick") && tools.apply(setting.view.dblClickExpand, [setting.treeId, node], setting.view.dblClickExpand))) {
						nodeEventCallback = handler.onSwitchNode;
					} else {
						nodeEventType = "";
					}
					break;
				case "clickNode" :
					nodeEventCallback = handler.onClickNode;
					break;
			}
		}
		// event to zTree
		switch (treeEventType) {
			case "mousedown" :
				treeEventCallback = handler.onZTreeMousedown;
				break;
			case "mouseup" :
				treeEventCallback = handler.onZTreeMouseup;
				break;
			case "dblclick" :
				treeEventCallback = handler.onZTreeDblclick;
				break;
			case "contextmenu" :
				treeEventCallback = handler.onZTreeContextmenu;
				break;
		}
		var proxyResult = {
			stop: false,
			node: node,
			nodeEventType: nodeEventType,
			nodeEventCallback: nodeEventCallback,
			treeEventType: treeEventType,
			treeEventCallback: treeEventCallback
		};
		return proxyResult
	},
	//default init node of core
	_initNode = function(setting, level, n, parentNode, isFirstNode, isLastNode, openFlag) {
		if (!n) return;
		var r = data.getRoot(setting),
		childKey = setting.data.key.children;
		n.level = level;
		n.tId = setting.treeId + "_" + (++r.zId);
		n.parentTId = parentNode ? parentNode.tId : null;
		if (n[childKey] && n[childKey].length > 0) {
			if (typeof n.open == "string") n.open = tools.eqs(n.open, "true");
			n.open = !!n.open;
			n.isParent = true;
			n.zAsync = true;
		} else {
			n.open = false;
			if (typeof n.isParent == "string") n.isParent = tools.eqs(n.isParent, "true");
			n.isParent = !!n.isParent;
			n.zAsync = !n.isParent;
		}
		n.isFirstNode = isFirstNode;
		n.isLastNode = isLastNode;
		n.getParentNode = function() {return data.getNodeCache(setting, n.parentTId);};
		n.getPreNode = function() {return data.getPreNode(setting, n);};
		n.getNextNode = function() {return data.getNextNode(setting, n);};
		n.isAjaxing = false;
		data.fixPIdKeyValue(setting, n);
	},
	_init = {
		bind: [_bindEvent],
		unbind: [_unbindEvent],
		caches: [_initCache],
		nodes: [_initNode],
		proxys: [_eventProxy],
		roots: [_initRoot],
		beforeA: [],
		afterA: [],
		innerBeforeA: [],
		innerAfterA: [],
		zTreeTools: []
	},
	//method of operate data
	data = {
		addNodeCache: function(setting, node) {
			data.getCache(setting).nodes[data.getNodeCacheId(node.tId)] = node;
		},
		getNodeCacheId: function(tId) {
			return tId.substring(tId.lastIndexOf("_")+1);
		},
		addAfterA: function(afterA) {
			_init.afterA.push(afterA);
		},
		addBeforeA: function(beforeA) {
			_init.beforeA.push(beforeA);
		},
		addInnerAfterA: function(innerAfterA) {
			_init.innerAfterA.push(innerAfterA);
		},
		addInnerBeforeA: function(innerBeforeA) {
			_init.innerBeforeA.push(innerBeforeA);
		},
		addInitBind: function(bindEvent) {
			_init.bind.push(bindEvent);
		},
		addInitUnBind: function(unbindEvent) {
			_init.unbind.push(unbindEvent);
		},
		addInitCache: function(initCache) {
			_init.caches.push(initCache);
		},
		addInitNode: function(initNode) {
			_init.nodes.push(initNode);
		},
		addInitProxy: function(initProxy, isFirst) {
			if (!!isFirst) {
				_init.proxys.splice(0,0,initProxy);
			} else {
				_init.proxys.push(initProxy);
			}
		},
		addInitRoot: function(initRoot) {
			_init.roots.push(initRoot);
		},
		addNodesData: function(setting, parentNode, nodes) {
			var childKey = setting.data.key.children;
			if (!parentNode[childKey]) parentNode[childKey] = [];
			if (parentNode[childKey].length > 0) {
				parentNode[childKey][parentNode[childKey].length - 1].isLastNode = false;
				view.setNodeLineIcos(setting, parentNode[childKey][parentNode[childKey].length - 1]);
			}
			parentNode.isParent = true;
			parentNode[childKey] = parentNode[childKey].concat(nodes);
		},
		addSelectedNode: function(setting, node) {
			var root = data.getRoot(setting);
			if (!data.isSelectedNode(setting, node)) {
				root.curSelectedList.push(node);
			}
		},
		addCreatedNode: function(setting, node) {
			if (!!setting.callback.onNodeCreated || !!setting.view.addDiyDom) {
				var root = data.getRoot(setting);
				root.createdNodes.push(node);
			}
		},
		addZTreeTools: function(zTreeTools) {
			_init.zTreeTools.push(zTreeTools);
		},
		exSetting: function(s) {
			$.extend(true, _setting, s);
		},
		fixPIdKeyValue: function(setting, node) {
			if (setting.data.simpleData.enable) {
				node[setting.data.simpleData.pIdKey] = node.parentTId ? node.getParentNode()[setting.data.simpleData.idKey] : setting.data.simpleData.rootPId;
			}
		},
		getAfterA: function(setting, node, array) {
			for (var i=0, j=_init.afterA.length; i<j; i++) {
				_init.afterA[i].apply(this, arguments);
			}
		},
		getBeforeA: function(setting, node, array) {
			for (var i=0, j=_init.beforeA.length; i<j; i++) {
				_init.beforeA[i].apply(this, arguments);
			}
		},
		getInnerAfterA: function(setting, node, array) {
			for (var i=0, j=_init.innerAfterA.length; i<j; i++) {
				_init.innerAfterA[i].apply(this, arguments);
			}
		},
		getInnerBeforeA: function(setting, node, array) {
			for (var i=0, j=_init.innerBeforeA.length; i<j; i++) {
				_init.innerBeforeA[i].apply(this, arguments);
			}
		},
		getCache: function(setting) {
			return caches[setting.treeId];
		},
		getNextNode: function(setting, node) {
			if (!node) return null;
			var childKey = setting.data.key.children,
			p = node.parentTId ? node.getParentNode() : data.getRoot(setting);
			for (var i=0, l=p[childKey].length-1; i<=l; i++) {
				if (p[childKey][i] === node) {
					return (i==l ? null : p[childKey][i+1]);
				}
			}
			return null;
		},
		getNodeByParam: function(setting, nodes, key, value) {
			if (!nodes || !key) return null;
			var childKey = setting.data.key.children;
			for (var i = 0, l = nodes.length; i < l; i++) {
				if (nodes[i][key] == value) {
					return nodes[i];
				}
				var tmp = data.getNodeByParam(setting, nodes[i][childKey], key, value);
				if (tmp) return tmp;
			}
			return null;
		},
		getNodeCache: function(setting, tId) {
			if (!tId) return null;
			var n = caches[setting.treeId].nodes[data.getNodeCacheId(tId)];
			return n ? n : null;
		},
		getNodeName: function(setting, node) {
			var nameKey = setting.data.key.name;
			return "" + node[nameKey];
		},
		getNodeTitle: function(setting, node) {
			var t = setting.data.key.title === "" ? setting.data.key.name : setting.data.key.title;
			return "" + node[t];
		},
		getNodes: function(setting) {
			return data.getRoot(setting)[setting.data.key.children];
		},
		getNodesByParam: function(setting, nodes, key, value) {
			if (!nodes || !key) return [];
			var childKey = setting.data.key.children,
			result = [];
			for (var i = 0, l = nodes.length; i < l; i++) {
				if (nodes[i][key] == value) {
					result.push(nodes[i]);
				}
				result = result.concat(data.getNodesByParam(setting, nodes[i][childKey], key, value));
			}
			return result;
		},
		getNodesByParamFuzzy: function(setting, nodes, key, value) {
			if (!nodes || !key) return [];
			var childKey = setting.data.key.children,
			result = [];
			value = value.toLowerCase();
			for (var i = 0, l = nodes.length; i < l; i++) {
				if (typeof nodes[i][key] == "string" && nodes[i][key].toLowerCase().indexOf(value)>-1) {
					result.push(nodes[i]);
				}
				result = result.concat(data.getNodesByParamFuzzy(setting, nodes[i][childKey], key, value));
			}
			return result;
		},
		getNodesByFilter: function(setting, nodes, filter, isSingle, invokeParam) {
			if (!nodes) return (isSingle ? null : []);
			var childKey = setting.data.key.children,
			result = isSingle ? null : [];
			for (var i = 0, l = nodes.length; i < l; i++) {
				if (tools.apply(filter, [nodes[i], invokeParam], false)) {
					if (isSingle) {return nodes[i];}
					result.push(nodes[i]);
				}
				var tmpResult = data.getNodesByFilter(setting, nodes[i][childKey], filter, isSingle, invokeParam);
				if (isSingle && !!tmpResult) {return tmpResult;}
				result = isSingle ? tmpResult : result.concat(tmpResult);
			}
			return result;
		},
		getPreNode: function(setting, node) {
			if (!node) return null;
			var childKey = setting.data.key.children,
			p = node.parentTId ? node.getParentNode() : data.getRoot(setting);
			for (var i=0, l=p[childKey].length; i<l; i++) {
				if (p[childKey][i] === node) {
					return (i==0 ? null : p[childKey][i-1]);
				}
			}
			return null;
		},
		getRoot: function(setting) {
			return setting ? roots[setting.treeId] : null;
		},
		getRoots: function() {
			return roots;
		},
		getSetting: function(treeId) {
			return settings[treeId];
		},
		getSettings: function() {
			return settings;
		},
		getZTreeTools: function(treeId) {
			var r = this.getRoot(this.getSetting(treeId));
			return r ? r.treeTools : null;
		},
		initCache: function(setting) {
			for (var i=0, j=_init.caches.length; i<j; i++) {
				_init.caches[i].apply(this, arguments);
			}
		},
		initNode: function(setting, level, node, parentNode, preNode, nextNode) {
			for (var i=0, j=_init.nodes.length; i<j; i++) {
				_init.nodes[i].apply(this, arguments);
			}
		},
		initRoot: function(setting) {
			for (var i=0, j=_init.roots.length; i<j; i++) {
				_init.roots[i].apply(this, arguments);
			}
		},
		isSelectedNode: function(setting, node) {
			var root = data.getRoot(setting);
			for (var i=0, j=root.curSelectedList.length; i<j; i++) {
				if(node === root.curSelectedList[i]) return true;
			}
			return false;
		},
		removeNodeCache: function(setting, node) {
			var childKey = setting.data.key.children;
			if (node[childKey]) {
				for (var i=0, l=node[childKey].length; i<l; i++) {
					arguments.callee(setting, node[childKey][i]);
				}
			}
			data.getCache(setting).nodes[data.getNodeCacheId(node.tId)] = null;
		},
		removeSelectedNode: function(setting, node) {
			var root = data.getRoot(setting);
			for (var i=0, j=root.curSelectedList.length; i<j; i++) {
				if(node === root.curSelectedList[i] || !data.getNodeCache(setting, root.curSelectedList[i].tId)) {
					root.curSelectedList.splice(i, 1);
					i--;j--;
				}
			}
		},
		setCache: function(setting, cache) {
			caches[setting.treeId] = cache;
		},
		setRoot: function(setting, root) {
			roots[setting.treeId] = root;
		},
		setZTreeTools: function(setting, zTreeTools) {
			for (var i=0, j=_init.zTreeTools.length; i<j; i++) {
				_init.zTreeTools[i].apply(this, arguments);
			}
		},
		transformToArrayFormat: function (setting, nodes) {
			if (!nodes) return [];
			var childKey = setting.data.key.children,
			r = [];
			if (tools.isArray(nodes)) {
				for (var i=0, l=nodes.length; i<l; i++) {
					r.push(nodes[i]);
					if (nodes[i][childKey])
						r = r.concat(data.transformToArrayFormat(setting, nodes[i][childKey]));
				}
			} else {
				r.push(nodes);
				if (nodes[childKey])
					r = r.concat(data.transformToArrayFormat(setting, nodes[childKey]));
			}
			return r;
		},
		transformTozTreeFormat: function(setting, sNodes) {
			var i,l,
			key = setting.data.simpleData.idKey,
			parentKey = setting.data.simpleData.pIdKey,
			childKey = setting.data.key.children;
			if (!key || key=="" || !sNodes) return [];

			if (tools.isArray(sNodes)) {
				var r = [];
				var tmpMap = [];
				for (i=0, l=sNodes.length; i<l; i++) {
					tmpMap[sNodes[i][key]] = sNodes[i];
				}
				for (i=0, l=sNodes.length; i<l; i++) {
					if (tmpMap[sNodes[i][parentKey]] && sNodes[i][key] != sNodes[i][parentKey]) {
						if (!tmpMap[sNodes[i][parentKey]][childKey])
							tmpMap[sNodes[i][parentKey]][childKey] = [];
						tmpMap[sNodes[i][parentKey]][childKey].push(sNodes[i]);
					} else {
						r.push(sNodes[i]);
					}
				}
				return r;
			}else {
				return [sNodes];
			}
		}
	},
	//method of event proxy
	event = {
		bindEvent: function(setting) {
			for (var i=0, j=_init.bind.length; i<j; i++) {
				_init.bind[i].apply(this, arguments);
			}
		},
		unbindEvent: function(setting) {
			for (var i=0, j=_init.unbind.length; i<j; i++) {
				_init.unbind[i].apply(this, arguments);
			}
		},
		bindTree: function(setting) {
			var eventParam = {
				treeId: setting.treeId
			},
			o = setting.treeObj;
			// for can't select text
			o.bind('selectstart', function(e){
					var n = e.originalEvent.srcElement.nodeName.toLowerCase();
					return (n === "input" || n === "textarea" );
			}).css({
				"-moz-user-select":"-moz-none"
			});
			o.bind('click', eventParam, event.proxy);
			o.bind('dblclick', eventParam, event.proxy);
			o.bind('mouseover', eventParam, event.proxy);
			o.bind('mouseout', eventParam, event.proxy);
			o.bind('mousedown', eventParam, event.proxy);
			o.bind('mouseup', eventParam, event.proxy);
			o.bind('contextmenu', eventParam, event.proxy);
		},
		unbindTree: function(setting) {
			var o = setting.treeObj;
			o.unbind('click', event.proxy)
			.unbind('dblclick', event.proxy)
			.unbind('mouseover', event.proxy)
			.unbind('mouseout', event.proxy)
			.unbind('mousedown', event.proxy)
			.unbind('mouseup', event.proxy)
			.unbind('contextmenu', event.proxy);
		},
		doProxy: function(e) {
			var results = [];
			for (var i=0, j=_init.proxys.length; i<j; i++) {
				var proxyResult = _init.proxys[i].apply(this, arguments);
				results.push(proxyResult);
				if (proxyResult.stop) {
					break;
				}
			}
			return results;
		},
		proxy: function(e) {
			var setting = data.getSetting(e.data.treeId);
			if (!tools.uCanDo(setting, e)) return true;
			var results = event.doProxy(e),
			r = true, x = false;
			for (var i=0, l=results.length; i<l; i++) {
				var proxyResult = results[i];
				if (proxyResult.nodeEventCallback) {
					x = true;
					r = proxyResult.nodeEventCallback.apply(proxyResult, [e, proxyResult.node]) && r;
				}
				if (proxyResult.treeEventCallback) {
					x = true;
					r = proxyResult.treeEventCallback.apply(proxyResult, [e, proxyResult.node]) && r;
				}
			}
			return r;
		}
	},
	//method of event handler
	handler = {
		onSwitchNode: function (event, node) {
			var setting = data.getSetting(event.data.treeId);
			if (node.open) {
				if (tools.apply(setting.callback.beforeCollapse, [setting.treeId, node], true) == false) return true;
				data.getRoot(setting).expandTriggerFlag = true;
				view.switchNode(setting, node);
			} else {
				if (tools.apply(setting.callback.beforeExpand, [setting.treeId, node], true) == false) return true;
				data.getRoot(setting).expandTriggerFlag = true;
				view.switchNode(setting, node);
			}
			return true;
		},
		onClickNode: function (event, node) {
			var setting = data.getSetting(event.data.treeId),
			clickFlag = ( (setting.view.autoCancelSelected && event.ctrlKey) && data.isSelectedNode(setting, node)) ? 0 : (setting.view.autoCancelSelected && event.ctrlKey && setting.view.selectedMulti) ? 2 : 1;
			if (tools.apply(setting.callback.beforeClick, [setting.treeId, node, clickFlag], true) == false) return true;
			if (clickFlag === 0) {
				view.cancelPreSelectedNode(setting, node);
			} else {
				view.selectNode(setting, node, clickFlag === 2);
			}
			setting.treeObj.trigger(consts.event.CLICK, [event, setting.treeId, node, clickFlag]);
			return true;
		},
		onZTreeMousedown: function(event, node) {
			var setting = data.getSetting(event.data.treeId);
			if (tools.apply(setting.callback.beforeMouseDown, [setting.treeId, node], true)) {
				tools.apply(setting.callback.onMouseDown, [event, setting.treeId, node]);
			}
			return true;
		},
		onZTreeMouseup: function(event, node) {
			var setting = data.getSetting(event.data.treeId);
			if (tools.apply(setting.callback.beforeMouseUp, [setting.treeId, node], true)) {
				tools.apply(setting.callback.onMouseUp, [event, setting.treeId, node]);
			}
			return true;
		},
		onZTreeDblclick: function(event, node) {
			var setting = data.getSetting(event.data.treeId);
			if (tools.apply(setting.callback.beforeDblClick, [setting.treeId, node], true)) {
				tools.apply(setting.callback.onDblClick, [event, setting.treeId, node]);
			}
			return true;
		},
		onZTreeContextmenu: function(event, node) {
			var setting = data.getSetting(event.data.treeId);
			if (tools.apply(setting.callback.beforeRightClick, [setting.treeId, node], true)) {
				tools.apply(setting.callback.onRightClick, [event, setting.treeId, node]);
			}
			return (typeof setting.callback.onRightClick) != "function";
		}
	},
	//method of tools for zTree
	tools = {
		apply: function(fun, param, defaultValue) {
			if ((typeof fun) == "function") {
				return fun.apply(zt, param?param:[]);
			}
			return defaultValue;
		},
		canAsync: function(setting, node) {
			var childKey = setting.data.key.children;
			return (setting.async.enable && node && node.isParent && !(node.zAsync || (node[childKey] && node[childKey].length > 0)));
		},
		clone: function (obj){
			if (obj === null) return null;
			var o = tools.isArray(obj) ? [] : {};
			for(var i in obj){
				o[i] = (obj[i] instanceof Date) ? new Date(obj[i].getTime()) : (typeof obj[i] === "object" ? arguments.callee(obj[i]) : obj[i]);
			}
			return o;
		},
		eqs: function(str1, str2) {
			return str1.toLowerCase() === str2.toLowerCase();
		},
		isArray: function(arr) {
			return Object.prototype.toString.apply(arr) === "[object Array]";
		},
		$: function(node, exp, setting) {
			if (!!exp && typeof exp != "string") {
				setting = exp;
				exp = "";
			}
			if (typeof node == "string") {
				return $(node, setting ? setting.treeObj.get(0).ownerDocument : null);
			} else {
				return $("#" + node.tId + exp, setting ? setting.treeObj : null);
			}
		},
		getMDom: function (setting, curDom, targetExpr) {
			if (!curDom) return null;
			while (curDom && curDom.id !== setting.treeId) {
				for (var i=0, l=targetExpr.length; curDom.tagName && i<l; i++) {
					if (tools.eqs(curDom.tagName, targetExpr[i].tagName) && curDom.getAttribute(targetExpr[i].attrName) !== null) {
						return curDom;
					}
				}
				curDom = curDom.parentNode;
			}
			return null;
		},
		getNodeMainDom:function(target) {
			return ($(target).parent("li").get(0) || $(target).parentsUntil("li").parent().get(0));
		},
		uCanDo: function(setting, e) {
			return true;
		}
	},
	//method of operate ztree dom
	view = {
		addNodes: function(setting, parentNode, newNodes, isSilent) {
			if (setting.data.keep.leaf && parentNode && !parentNode.isParent) {
				return;
			}
			if (!tools.isArray(newNodes)) {
				newNodes = [newNodes];
			}
			if (setting.data.simpleData.enable) {
				newNodes = data.transformTozTreeFormat(setting, newNodes);
			}
			if (parentNode) {
				var target_switchObj = $$(parentNode, consts.id.SWITCH, setting),
				target_icoObj = $$(parentNode, consts.id.ICON, setting),
				target_ulObj = $$(parentNode, consts.id.UL, setting);

				if (!parentNode.open) {
					view.replaceSwitchClass(parentNode, target_switchObj, consts.folder.CLOSE);
					view.replaceIcoClass(parentNode, target_icoObj, consts.folder.CLOSE);
					parentNode.open = false;
					target_ulObj.css({
						"display": "none"
					});
				}

				data.addNodesData(setting, parentNode, newNodes);
				view.createNodes(setting, parentNode.level + 1, newNodes, parentNode);
				if (!isSilent) {
					view.expandCollapseParentNode(setting, parentNode, true);
				}
			} else {
				data.addNodesData(setting, data.getRoot(setting), newNodes);
				view.createNodes(setting, 0, newNodes, null);
			}
		},
		appendNodes: function(setting, level, nodes, parentNode, initFlag, openFlag) {
			if (!nodes) return [];
			var html = [],
			childKey = setting.data.key.children;
			for (var i = 0, l = nodes.length; i < l; i++) {
				var node = nodes[i];
				if (initFlag) {
					var tmpPNode = (parentNode) ? parentNode: data.getRoot(setting),
					tmpPChild = tmpPNode[childKey],
					isFirstNode = ((tmpPChild.length == nodes.length) && (i == 0)),
					isLastNode = (i == (nodes.length - 1));
					data.initNode(setting, level, node, parentNode, isFirstNode, isLastNode, openFlag);
					data.addNodeCache(setting, node);
				}

				var childHtml = [];
				if (node[childKey] && node[childKey].length > 0) {
					//make child html first, because checkType
					childHtml = view.appendNodes(setting, level + 1, node[childKey], node, initFlag, openFlag && node.open);
				}
				if (openFlag) {

					view.makeDOMNodeMainBefore(html, setting, node);
					view.makeDOMNodeLine(html, setting, node);
					data.getBeforeA(setting, node, html);
					view.makeDOMNodeNameBefore(html, setting, node);
					data.getInnerBeforeA(setting, node, html);
					view.makeDOMNodeIcon(html, setting, node);
					data.getInnerAfterA(setting, node, html);
					view.makeDOMNodeNameAfter(html, setting, node);
					data.getAfterA(setting, node, html);
					if (node.isParent && node.open) {
						view.makeUlHtml(setting, node, html, childHtml.join(''));
					}
					view.makeDOMNodeMainAfter(html, setting, node);
					data.addCreatedNode(setting, node);
				}
			}
			return html;
		},
		appendParentULDom: function(setting, node) {
			var html = [],
			nObj = $$(node, setting);
			if (!nObj.get(0) && !!node.parentTId) {
				view.appendParentULDom(setting, node.getParentNode());
				nObj = $$(node, setting);
			}
			var ulObj = $$(node, consts.id.UL, setting);
			if (ulObj.get(0)) {
				ulObj.remove();
			}
			var childKey = setting.data.key.children,
			childHtml = view.appendNodes(setting, node.level+1, node[childKey], node, false, true);
			view.makeUlHtml(setting, node, html, childHtml.join(''));
			nObj.append(html.join(''));
		},
		asyncNode: function(setting, node, isSilent, callback) {
			var i, l;
			if (node && !node.isParent) {
				tools.apply(callback);
				return false;
			} else if (node && node.isAjaxing) {
				return false;
			} else if (tools.apply(setting.callback.beforeAsync, [setting.treeId, node], true) == false) {
				tools.apply(callback);
				return false;
			}
			if (node) {
				node.isAjaxing = true;
				var icoObj = $$(node, consts.id.ICON, setting);
				icoObj.attr({"style":"", "class":consts.className.BUTTON + " " + consts.className.ICO_LOADING});
			}

			var tmpParam = {};
			for (i = 0, l = setting.async.autoParam.length; node && i < l; i++) {
				var pKey = setting.async.autoParam[i].split("="), spKey = pKey;
				if (pKey.length>1) {
					spKey = pKey[1];
					pKey = pKey[0];
				}
				tmpParam[spKey] = node[pKey];
			}
			if (tools.isArray(setting.async.otherParam)) {
				for (i = 0, l = setting.async.otherParam.length; i < l; i += 2) {
					tmpParam[setting.async.otherParam[i]] = setting.async.otherParam[i + 1];
				}
			} else {
				for (var p in setting.async.otherParam) {
					tmpParam[p] = setting.async.otherParam[p];
				}
			}

			var _tmpV = data.getRoot(setting)._ver;
			$.ajax({
				contentType: setting.async.contentType,
				type: setting.async.type,
				url: tools.apply(setting.async.url, [setting.treeId, node], setting.async.url),
				data: tmpParam,
				dataType: setting.async.dataType,
				success: function(msg) {
					if (_tmpV != data.getRoot(setting)._ver) {
						return;
					}
					var newNodes = [];
					try {
						if (!msg || msg.length == 0) {
							newNodes = [];
						} else if (typeof msg == "string") {
							newNodes = eval("(" + msg + ")");
						} else {
							newNodes = msg;
						}
					} catch(err) {
						newNodes = msg;
					}

					if (node) {
						node.isAjaxing = null;
						node.zAsync = true;
					}
					view.setNodeLineIcos(setting, node);
					if (newNodes && newNodes !== "") {
						newNodes = tools.apply(setting.async.dataFilter, [setting.treeId, node, newNodes], newNodes);
						view.addNodes(setting, node, !!newNodes ? tools.clone(newNodes) : [], !!isSilent);
					} else {
						view.addNodes(setting, node, [], !!isSilent);
					}
					setting.treeObj.trigger(consts.event.ASYNC_SUCCESS, [setting.treeId, node, msg]);
					tools.apply(callback);
				},
				error: function(XMLHttpRequest, textStatus, errorThrown) {
					if (_tmpV != data.getRoot(setting)._ver) {
						return;
					}
					if (node) node.isAjaxing = null;
					view.setNodeLineIcos(setting, node);
					setting.treeObj.trigger(consts.event.ASYNC_ERROR, [setting.treeId, node, XMLHttpRequest, textStatus, errorThrown]);
				}
			});
			return true;
		},
		cancelPreSelectedNode: function (setting, node) {
			var list = data.getRoot(setting).curSelectedList;
			for (var i=0, j=list.length-1; j>=i; j--) {
				if (!node || node === list[j]) {
					$$(list[j], consts.id.A, setting).removeClass(consts.node.CURSELECTED);
					if (node) {
						data.removeSelectedNode(setting, node);
						break;
					}
				}
			}
			if (!node) data.getRoot(setting).curSelectedList = [];
		},
		createNodeCallback: function(setting) {
			if (!!setting.callback.onNodeCreated || !!setting.view.addDiyDom) {
				var root = data.getRoot(setting);
				while (root.createdNodes.length>0) {
					var node = root.createdNodes.shift();
					tools.apply(setting.view.addDiyDom, [setting.treeId, node]);
					if (!!setting.callback.onNodeCreated) {
						setting.treeObj.trigger(consts.event.NODECREATED, [setting.treeId, node]);
					}
				}
			}
		},
		createNodes: function(setting, level, nodes, parentNode) {
			if (!nodes || nodes.length == 0) return;
			var root = data.getRoot(setting),
			childKey = setting.data.key.children,
			openFlag = !parentNode || parentNode.open || !!$$(parentNode[childKey][0], setting).get(0);
			root.createdNodes = [];
			var zTreeHtml = view.appendNodes(setting, level, nodes, parentNode, true, openFlag);
			if (!parentNode) {
				setting.treeObj.append(zTreeHtml.join(''));
			} else {
				var ulObj = $$(parentNode, consts.id.UL, setting);
				if (ulObj.get(0)) {
					ulObj.append(zTreeHtml.join(''));
				}
			}
			view.createNodeCallback(setting);
		},
		destroy: function(setting) {
			if (!setting) return;
			data.initCache(setting);
			data.initRoot(setting);
			event.unbindTree(setting);
			event.unbindEvent(setting);
			setting.treeObj.empty();
		},
		expandCollapseNode: function(setting, node, expandFlag, animateFlag, callback) {
			var root = data.getRoot(setting),
			childKey = setting.data.key.children;
			if (!node) {
				tools.apply(callback, []);
				return;
			}
			if (root.expandTriggerFlag) {
				var _callback = callback;
				callback = function(){
					if (_callback) _callback();
					if (node.open) {
						setting.treeObj.trigger(consts.event.EXPAND, [setting.treeId, node]);
					} else {
						setting.treeObj.trigger(consts.event.COLLAPSE, [setting.treeId, node]);
					}
				};
				root.expandTriggerFlag = false;
			}
			if (!node.open && node.isParent && ((!$$(node, consts.id.UL, setting).get(0)) || (node[childKey] && node[childKey].length>0 && !$$(node[childKey][0], setting).get(0)))) {
				view.appendParentULDom(setting, node);
				view.createNodeCallback(setting);
			}
			if (node.open == expandFlag) {
				tools.apply(callback, []);
				return;
			}
			var ulObj = $$(node, consts.id.UL, setting),
			switchObj = $$(node, consts.id.SWITCH, setting),
			icoObj = $$(node, consts.id.ICON, setting);

			if (node.isParent) {
				node.open = !node.open;
				if (node.iconOpen && node.iconClose) {
					icoObj.attr("style", view.makeNodeIcoStyle(setting, node));
				}

				if (node.open) {
					view.replaceSwitchClass(node, switchObj, consts.folder.OPEN);
					view.replaceIcoClass(node, icoObj, consts.folder.OPEN);
					if (animateFlag == false || setting.view.expandSpeed == "") {
						ulObj.show();
						tools.apply(callback, []);
					} else {
						if (node[childKey] && node[childKey].length > 0) {
							ulObj.slideDown(setting.view.expandSpeed, callback);
						} else {
							ulObj.show();
							tools.apply(callback, []);
						}
					}
				} else {
					view.replaceSwitchClass(node, switchObj, consts.folder.CLOSE);
					view.replaceIcoClass(node, icoObj, consts.folder.CLOSE);
					if (animateFlag == false || setting.view.expandSpeed == "" || !(node[childKey] && node[childKey].length > 0)) {
						ulObj.hide();
						tools.apply(callback, []);
					} else {
						ulObj.slideUp(setting.view.expandSpeed, callback);
					}
				}
			} else {
				tools.apply(callback, []);
			}
		},
		expandCollapseParentNode: function(setting, node, expandFlag, animateFlag, callback) {
			if (!node) return;
			if (!node.parentTId) {
				view.expandCollapseNode(setting, node, expandFlag, animateFlag, callback);
				return;
			} else {
				view.expandCollapseNode(setting, node, expandFlag, animateFlag);
			}
			if (node.parentTId) {
				view.expandCollapseParentNode(setting, node.getParentNode(), expandFlag, animateFlag, callback);
			}
		},
		expandCollapseSonNode: function(setting, node, expandFlag, animateFlag, callback) {
			var root = data.getRoot(setting),
			childKey = setting.data.key.children,
			treeNodes = (node) ? node[childKey]: root[childKey],
			selfAnimateSign = (node) ? false : animateFlag,
			expandTriggerFlag = data.getRoot(setting).expandTriggerFlag;
			data.getRoot(setting).expandTriggerFlag = false;
			if (treeNodes) {
				for (var i = 0, l = treeNodes.length; i < l; i++) {
					if (treeNodes[i]) view.expandCollapseSonNode(setting, treeNodes[i], expandFlag, selfAnimateSign);
				}
			}
			data.getRoot(setting).expandTriggerFlag = expandTriggerFlag;
			view.expandCollapseNode(setting, node, expandFlag, animateFlag, callback );
		},
		makeDOMNodeIcon: function(html, setting, node) {
			var nameStr = data.getNodeName(setting, node),
			name = setting.view.nameIsHTML ? nameStr : nameStr.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
			html.push("<span id='", node.tId, consts.id.ICON,
				"' title='' treeNode", consts.id.ICON," class='", view.makeNodeIcoClass(setting, node),
				"' style='", view.makeNodeIcoStyle(setting, node), "'></span><span id='", node.tId, consts.id.SPAN,
				"'>",name,"</span>");
		},
		makeDOMNodeLine: function(html, setting, node) {
			html.push("<span id='", node.tId, consts.id.SWITCH,	"' title='' class='", view.makeNodeLineClass(setting, node), "' treeNode", consts.id.SWITCH,"></span>");
		},
		makeDOMNodeMainAfter: function(html, setting, node) {
			html.push("</li>");
		},
		makeDOMNodeMainBefore: function(html, setting, node) {
			html.push("<li id='", node.tId, "' class='", consts.className.LEVEL, node.level,"' tabindex='0' hidefocus='true' treenode>");
		},
		makeDOMNodeNameAfter: function(html, setting, node) {
			html.push("</a>");
		},
		makeDOMNodeNameBefore: function(html, setting, node) {
			var title = data.getNodeTitle(setting, node),
			url = view.makeNodeUrl(setting, node),
			fontcss = view.makeNodeFontCss(setting, node),
			fontStyle = [];
			for (var f in fontcss) {
				fontStyle.push(f, ":", fontcss[f], ";");
			}
			html.push("<a id='", node.tId, consts.id.A, "' class='", consts.className.LEVEL, node.level,"' treeNode", consts.id.A," onclick=\"", (node.click || ''),
				"\" ", ((url != null && url.length > 0) ? "href='" + url + "'" : ""), " target='",view.makeNodeTarget(node),"' style='", fontStyle.join(''),
				"'");
			if (tools.apply(setting.view.showTitle, [setting.treeId, node], setting.view.showTitle) && title) {html.push("title='", title.replace(/'/g,"&#39;").replace(/</g,'&lt;').replace(/>/g,'&gt;'),"'");}
			html.push(">");
		},
		makeNodeFontCss: function(setting, node) {
			var fontCss = tools.apply(setting.view.fontCss, [setting.treeId, node], setting.view.fontCss);
			return (fontCss && ((typeof fontCss) != "function")) ? fontCss : {};
		},
		makeNodeIcoClass: function(setting, node) {
			var icoCss = ["ico"];
			if (!node.isAjaxing) {
				icoCss[0] = (node.iconSkin ? node.iconSkin + "_" : "") + icoCss[0];
				if (node.isParent) {
					icoCss.push(node.open ? consts.folder.OPEN : consts.folder.CLOSE);
				} else {
					icoCss.push(consts.folder.DOCU);
				}
			}
			return consts.className.BUTTON + " " + icoCss.join('_');
		},
		makeNodeIcoStyle: function(setting, node) {
			var icoStyle = [];
			if (!node.isAjaxing) {
				var icon = (node.isParent && node.iconOpen && node.iconClose) ? (node.open ? node.iconOpen : node.iconClose) : node.icon;
				if (icon) icoStyle.push("background:url(", icon, ") 0 0 no-repeat;");
				if (setting.view.showIcon == false || !tools.apply(setting.view.showIcon, [setting.treeId, node], true)) {
					icoStyle.push("width:0px;height:0px;");
				}
			}
			return icoStyle.join('');
		},
		makeNodeLineClass: function(setting, node) {
			var lineClass = [];
			if (setting.view.showLine) {
				if (node.level == 0 && node.isFirstNode && node.isLastNode) {
					lineClass.push(consts.line.ROOT);
				} else if (node.level == 0 && node.isFirstNode) {
					lineClass.push(consts.line.ROOTS);
				} else if (node.isLastNode) {
					lineClass.push(consts.line.BOTTOM);
				} else {
					lineClass.push(consts.line.CENTER);
				}
			} else {
				lineClass.push(consts.line.NOLINE);
			}
			if (node.isParent) {
				lineClass.push(node.open ? consts.folder.OPEN : consts.folder.CLOSE);
			} else {
				lineClass.push(consts.folder.DOCU);
			}
			return view.makeNodeLineClassEx(node) + lineClass.join('_');
		},
		makeNodeLineClassEx: function(node) {
			return consts.className.BUTTON + " " + consts.className.LEVEL + node.level + " " + consts.className.SWITCH + " ";
		},
		makeNodeTarget: function(node) {
			return (node.target || "_blank");
		},
		makeNodeUrl: function(setting, node) {
			var urlKey = setting.data.key.url;
			return node[urlKey] ? node[urlKey] : null;
		},
		makeUlHtml: function(setting, node, html, content) {
			html.push("<ul id='", node.tId, consts.id.UL, "' class='", consts.className.LEVEL, node.level, " ", view.makeUlLineClass(setting, node), "' style='display:", (node.open ? "block": "none"),"'>");
			html.push(content);
			html.push("</ul>");
		},
		makeUlLineClass: function(setting, node) {
			return ((setting.view.showLine && !node.isLastNode) ? consts.line.LINE : "");
		},
		removeChildNodes: function(setting, node) {
			if (!node) return;
			var childKey = setting.data.key.children,
			nodes = node[childKey];
			if (!nodes) return;

			for (var i = 0, l = nodes.length; i < l; i++) {
				data.removeNodeCache(setting, nodes[i]);
			}
			data.removeSelectedNode(setting);
			delete node[childKey];

			if (!setting.data.keep.parent) {
				node.isParent = false;
				node.open = false;
				var tmp_switchObj = $$(node, consts.id.SWITCH, setting),
				tmp_icoObj = $$(node, consts.id.ICON, setting);
				view.replaceSwitchClass(node, tmp_switchObj, consts.folder.DOCU);
				view.replaceIcoClass(node, tmp_icoObj, consts.folder.DOCU);
				$$(node, consts.id.UL, setting).remove();
			} else {
				$$(node, consts.id.UL, setting).empty();
			}
		},
		setFirstNode: function(setting, parentNode) {
			var childKey = setting.data.key.children, childLength = parentNode[childKey].length;
			if ( childLength > 0) {
				parentNode[childKey][0].isFirstNode = true;
			}
		},
		setLastNode: function(setting, parentNode) {
			var childKey = setting.data.key.children, childLength = parentNode[childKey].length;
			if ( childLength > 0) {
				parentNode[childKey][childLength - 1].isLastNode = true;
			}
		},
		removeNode: function(setting, node) {
			var root = data.getRoot(setting),
			childKey = setting.data.key.children,
			parentNode = (node.parentTId) ? node.getParentNode() : root;

			node.isFirstNode = false;
			node.isLastNode = false;
			node.getPreNode = function() {return null;};
			node.getNextNode = function() {return null;};

			if (!data.getNodeCache(setting, node.tId)) {
				return;
			}

			$$(node, setting).remove();
			data.removeNodeCache(setting, node);
			data.removeSelectedNode(setting, node);

			for (var i = 0, l = parentNode[childKey].length; i < l; i++) {
				if (parentNode[childKey][i].tId == node.tId) {
					parentNode[childKey].splice(i, 1);
					break;
				}
			}
			view.setFirstNode(setting, parentNode);
			view.setLastNode(setting, parentNode);

			var tmp_ulObj,tmp_switchObj,tmp_icoObj,
			childLength = parentNode[childKey].length;

			//repair nodes old parent
			if (!setting.data.keep.parent && childLength == 0) {
				//old parentNode has no child nodes
				parentNode.isParent = false;
				parentNode.open = false;
				tmp_ulObj = $$(parentNode, consts.id.UL, setting);
				tmp_switchObj = $$(parentNode, consts.id.SWITCH, setting);
				tmp_icoObj = $$(parentNode, consts.id.ICON, setting);
				view.replaceSwitchClass(parentNode, tmp_switchObj, consts.folder.DOCU);
				view.replaceIcoClass(parentNode, tmp_icoObj, consts.folder.DOCU);
				tmp_ulObj.css("display", "none");

			} else if (setting.view.showLine && childLength > 0) {
				//old parentNode has child nodes
				var newLast = parentNode[childKey][childLength - 1];
				tmp_ulObj = $$(newLast, consts.id.UL, setting);
				tmp_switchObj = $$(newLast, consts.id.SWITCH, setting);
				tmp_icoObj = $$(newLast, consts.id.ICON, setting);
				if (parentNode == root) {
					if (parentNode[childKey].length == 1) {
						//node was root, and ztree has only one root after move node
						view.replaceSwitchClass(newLast, tmp_switchObj, consts.line.ROOT);
					} else {
						var tmp_first_switchObj = $$(parentNode[childKey][0], consts.id.SWITCH, setting);
						view.replaceSwitchClass(parentNode[childKey][0], tmp_first_switchObj, consts.line.ROOTS);
						view.replaceSwitchClass(newLast, tmp_switchObj, consts.line.BOTTOM);
					}
				} else {
					view.replaceSwitchClass(newLast, tmp_switchObj, consts.line.BOTTOM);
				}
				tmp_ulObj.removeClass(consts.line.LINE);
			}
		},
		replaceIcoClass: function(node, obj, newName) {
			if (!obj || node.isAjaxing) return;
			var tmpName = obj.attr("class");
			if (tmpName == undefined) return;
			var tmpList = tmpName.split("_");
			switch (newName) {
				case consts.folder.OPEN:
				case consts.folder.CLOSE:
				case consts.folder.DOCU:
					tmpList[tmpList.length-1] = newName;
					break;
			}
			obj.attr("class", tmpList.join("_"));
		},
		replaceSwitchClass: function(node, obj, newName) {
			if (!obj) return;
			var tmpName = obj.attr("class");
			if (tmpName == undefined) return;
			var tmpList = tmpName.split("_");
			switch (newName) {
				case consts.line.ROOT:
				case consts.line.ROOTS:
				case consts.line.CENTER:
				case consts.line.BOTTOM:
				case consts.line.NOLINE:
					tmpList[0] = view.makeNodeLineClassEx(node) + newName;
					break;
				case consts.folder.OPEN:
				case consts.folder.CLOSE:
				case consts.folder.DOCU:
					tmpList[1] = newName;
					break;
			}
			obj.attr("class", tmpList.join("_"));
			if (newName !== consts.folder.DOCU) {
				obj.removeAttr("disabled");
			} else {
				obj.attr("disabled", "disabled");
			}
		},
		selectNode: function(setting, node, addFlag) {
			if (!addFlag) {
				view.cancelPreSelectedNode(setting);
			}
			$$(node, consts.id.A, setting).addClass(consts.node.CURSELECTED);
			data.addSelectedNode(setting, node);
		},
		setNodeFontCss: function(setting, treeNode) {
			var aObj = $$(treeNode, consts.id.A, setting),
			fontCss = view.makeNodeFontCss(setting, treeNode);
			if (fontCss) {
				aObj.css(fontCss);
			}
		},
		setNodeLineIcos: function(setting, node) {
			if (!node) return;
			var switchObj = $$(node, consts.id.SWITCH, setting),
			ulObj = $$(node, consts.id.UL, setting),
			icoObj = $$(node, consts.id.ICON, setting),
			ulLine = view.makeUlLineClass(setting, node);
			if (ulLine.length==0) {
				ulObj.removeClass(consts.line.LINE);
			} else {
				ulObj.addClass(ulLine);
			}
			switchObj.attr("class", view.makeNodeLineClass(setting, node));
			if (node.isParent) {
				switchObj.removeAttr("disabled");
			} else {
				switchObj.attr("disabled", "disabled");
			}
			icoObj.removeAttr("style");
			icoObj.attr("style", view.makeNodeIcoStyle(setting, node));
			icoObj.attr("class", view.makeNodeIcoClass(setting, node));
		},
		setNodeName: function(setting, node) {
			var title = data.getNodeTitle(setting, node),
			nObj = $$(node, consts.id.SPAN, setting);
			nObj.empty();
			if (setting.view.nameIsHTML) {
				nObj.html(data.getNodeName(setting, node));
			} else {
				nObj.text(data.getNodeName(setting, node));
			}
			if (tools.apply(setting.view.showTitle, [setting.treeId, node], setting.view.showTitle)) {
				var aObj = $$(node, consts.id.A, setting);
				aObj.attr("title", !title ? "" : title);
			}
		},
		setNodeTarget: function(setting, node) {
			var aObj = $$(node, consts.id.A, setting);
			aObj.attr("target", view.makeNodeTarget(node));
		},
		setNodeUrl: function(setting, node) {
			var aObj = $$(node, consts.id.A, setting),
			url = view.makeNodeUrl(setting, node);
			if (url == null || url.length == 0) {
				aObj.removeAttr("href");
			} else {
				aObj.attr("href", url);
			}
		},
		switchNode: function(setting, node) {
			if (node.open || !tools.canAsync(setting, node)) {
				view.expandCollapseNode(setting, node, !node.open);
			} else if (setting.async.enable) {
				if (!view.asyncNode(setting, node)) {
					view.expandCollapseNode(setting, node, !node.open);
					return;
				}
			} else if (node) {
				view.expandCollapseNode(setting, node, !node.open);
			}
		}
	};
	// zTree defind
	$.fn.zTree = {
		consts : _consts,
		_z : {
			tools: tools,
			view: view,
			event: event,
			data: data
		},
		getZTreeObj: function(treeId) {
			var o = data.getZTreeTools(treeId);
			return o ? o : null;
		},
		destroy: function(treeId) {
			if (!!treeId && treeId.length > 0) {
				view.destroy(data.getSetting(treeId));
			} else {
				for(var s in settings) {
					view.destroy(settings[s]);
				}
			}
		},
		init: function(obj, zSetting, zNodes) {
			var setting = tools.clone(_setting);
			$.extend(true, setting, zSetting);
			setting.treeId = obj.attr("id");
			setting.treeObj = obj;
			setting.treeObj.empty();
			settings[setting.treeId] = setting;
			//For some older browser,(e.g., ie6)
			if(typeof document.body.style.maxHeight === "undefined") {
				setting.view.expandSpeed = "";
			}
			data.initRoot(setting);
			var root = data.getRoot(setting),
			childKey = setting.data.key.children;
			zNodes = zNodes ? tools.clone(tools.isArray(zNodes)? zNodes : [zNodes]) : [];
			if (setting.data.simpleData.enable) {
				root[childKey] = data.transformTozTreeFormat(setting, zNodes);
			} else {
				root[childKey] = zNodes;
			}

			data.initCache(setting);
			event.unbindTree(setting);
			event.bindTree(setting);
			event.unbindEvent(setting);
			event.bindEvent(setting);

			var zTreeTools = {
				setting : setting,
				addNodes : function(parentNode, newNodes, isSilent) {
					if (!newNodes) return null;
					if (!parentNode) parentNode = null;
					if (parentNode && !parentNode.isParent && setting.data.keep.leaf) return null;
					var xNewNodes = tools.clone(tools.isArray(newNodes)? newNodes: [newNodes]);
					function addCallback() {
						view.addNodes(setting, parentNode, xNewNodes, (isSilent==true));
					}

					if (tools.canAsync(setting, parentNode)) {
						view.asyncNode(setting, parentNode, isSilent, addCallback);
					} else {
						addCallback();
					}
					return xNewNodes;
				},
				cancelSelectedNode : function(node) {
					view.cancelPreSelectedNode(setting, node);
				},
				destroy : function() {
					view.destroy(setting);
				},
				expandAll : function(expandFlag) {
					expandFlag = !!expandFlag;
					view.expandCollapseSonNode(setting, null, expandFlag, true);
					return expandFlag;
				},
				expandNode : function(node, expandFlag, sonSign, focus, callbackFlag) {
					if (!node || !node.isParent) return null;
					if (expandFlag !== true && expandFlag !== false) {
						expandFlag = !node.open;
					}
					callbackFlag = !!callbackFlag;

					if (callbackFlag && expandFlag && (tools.apply(setting.callback.beforeExpand, [setting.treeId, node], true) == false)) {
						return null;
					} else if (callbackFlag && !expandFlag && (tools.apply(setting.callback.beforeCollapse, [setting.treeId, node], true) == false)) {
						return null;
					}
					if (expandFlag && node.parentTId) {
						view.expandCollapseParentNode(setting, node.getParentNode(), expandFlag, false);
					}
					if (expandFlag === node.open && !sonSign) {
						return null;
					}

					data.getRoot(setting).expandTriggerFlag = callbackFlag;
					if (!tools.canAsync(setting, node) && sonSign) {
						view.expandCollapseSonNode(setting, node, expandFlag, true, function() {
							if (focus !== false) {try{$$(node, setting).focus().blur();}catch(e){}}
						});
					} else {
						node.open = !expandFlag;
						view.switchNode(this.setting, node);
						if (focus !== false) {try{$$(node, setting).focus().blur();}catch(e){}}
					}
					return expandFlag;
				},
				getNodes : function() {
					return data.getNodes(setting);
				},
				getNodeByParam : function(key, value, parentNode) {
					if (!key) return null;
					return data.getNodeByParam(setting, parentNode?parentNode[setting.data.key.children]:data.getNodes(setting), key, value);
				},
				getNodeByTId : function(tId) {
					return data.getNodeCache(setting, tId);
				},
				getNodesByParam : function(key, value, parentNode) {
					if (!key) return null;
					return data.getNodesByParam(setting, parentNode?parentNode[setting.data.key.children]:data.getNodes(setting), key, value);
				},
				getNodesByParamFuzzy : function(key, value, parentNode) {
					if (!key) return null;
					return data.getNodesByParamFuzzy(setting, parentNode?parentNode[setting.data.key.children]:data.getNodes(setting), key, value);
				},
				getNodesByFilter: function(filter, isSingle, parentNode, invokeParam) {
					isSingle = !!isSingle;
					if (!filter || (typeof filter != "function")) return (isSingle ? null : []);
					return data.getNodesByFilter(setting, parentNode?parentNode[setting.data.key.children]:data.getNodes(setting), filter, isSingle, invokeParam);
				},
				getNodeIndex : function(node) {
					if (!node) return null;
					var childKey = setting.data.key.children,
					parentNode = (node.parentTId) ? node.getParentNode() : data.getRoot(setting);
					for (var i=0, l = parentNode[childKey].length; i < l; i++) {
						if (parentNode[childKey][i] == node) return i;
					}
					return -1;
				},
				getSelectedNodes : function() {
					var r = [], list = data.getRoot(setting).curSelectedList;
					for (var i=0, l=list.length; i<l; i++) {
						r.push(list[i]);
					}
					return r;
				},
				isSelectedNode : function(node) {
					return data.isSelectedNode(setting, node);
				},
				reAsyncChildNodes : function(parentNode, reloadType, isSilent) {
					if (!this.setting.async.enable) return;
					var isRoot = !parentNode;
					if (isRoot) {
						parentNode = data.getRoot(setting);
					}
					if (reloadType=="refresh") {
						var childKey = this.setting.data.key.children;
						for (var i = 0, l = parentNode[childKey] ? parentNode[childKey].length : 0; i < l; i++) {
							data.removeNodeCache(setting, parentNode[childKey][i]);
						}
						data.removeSelectedNode(setting);
						parentNode[childKey] = [];
						if (isRoot) {
							this.setting.treeObj.empty();
						} else {
							var ulObj = $$(parentNode, consts.id.UL, setting);
							ulObj.empty();
						}
					}
					view.asyncNode(this.setting, isRoot? null:parentNode, !!isSilent);
				},
				refresh : function() {
					this.setting.treeObj.empty();
					var root = data.getRoot(setting),
					nodes = root[setting.data.key.children]
					data.initRoot(setting);
					root[setting.data.key.children] = nodes
					data.initCache(setting);
					view.createNodes(setting, 0, root[setting.data.key.children]);
				},
				removeChildNodes : function(node) {
					if (!node) return null;
					var childKey = setting.data.key.children,
					nodes = node[childKey];
					view.removeChildNodes(setting, node);
					return nodes ? nodes : null;
				},
				removeNode : function(node, callbackFlag) {
					if (!node) return;
					callbackFlag = !!callbackFlag;
					if (callbackFlag && tools.apply(setting.callback.beforeRemove, [setting.treeId, node], true) == false) return;
					view.removeNode(setting, node);
					if (callbackFlag) {
						this.setting.treeObj.trigger(consts.event.REMOVE, [setting.treeId, node]);
					}
				},
				selectNode : function(node, addFlag) {
					if (!node) return;
					if (tools.uCanDo(setting)) {
						addFlag = setting.view.selectedMulti && addFlag;
						if (node.parentTId) {
							view.expandCollapseParentNode(setting, node.getParentNode(), true, false, function() {
								try{$$(node, setting).focus().blur();}catch(e){}
							});
						} else {
							try{$$(node, setting).focus().blur();}catch(e){}
						}
						view.selectNode(setting, node, addFlag);
					}
				},
				transformTozTreeNodes : function(simpleNodes) {
					return data.transformTozTreeFormat(setting, simpleNodes);
				},
				transformToArray : function(nodes) {
					return data.transformToArrayFormat(setting, nodes);
				},
				updateNode : function(node, checkTypeFlag) {
					if (!node) return;
					var nObj = $$(node, setting);
					if (nObj.get(0) && tools.uCanDo(setting)) {
						view.setNodeName(setting, node);
						view.setNodeTarget(setting, node);
						view.setNodeUrl(setting, node);
						view.setNodeLineIcos(setting, node);
						view.setNodeFontCss(setting, node);
					}
				}
			}
			root.treeTools = zTreeTools;
			data.setZTreeTools(setting, zTreeTools);

			if (root[childKey] && root[childKey].length > 0) {
				view.createNodes(setting, 0, root[childKey]);
			} else if (setting.async.enable && setting.async.url && setting.async.url !== '') {
				view.asyncNode(setting);
			}
			return zTreeTools;
		}
	};

	var zt = $.fn.zTree,
	$$ = tools.$,
	consts = zt.consts;
})(jQuery);
/*
 * JQuery zTree excheck v3.5.15-beta.1
 * http://zTree.me/
 *
 * Copyright (c) 2010 Hunter.z
 *
 * Licensed same as jquery - MIT License
 * http://www.opensource.org/licenses/mit-license.php
 *
 * email: hunter.z@263.net
 * Date: 2013-07-13
 */
(function($){
	//default consts of excheck
	var _consts = {
		event: {
			CHECK: "ztree_check"
		},
		id: {
			CHECK: "_check"
		},
		checkbox: {
			STYLE: "checkbox",
			DEFAULT: "chk",
			DISABLED: "disable",
			FALSE: "false",
			TRUE: "true",
			FULL: "full",
			PART: "part",
			FOCUS: "focus"
		},
		radio: {
			STYLE: "radio",
			TYPE_ALL: "all",
			TYPE_LEVEL: "level"
		}
	},
	//default setting of excheck
	_setting = {
		check: {
			enable: false,
			autoCheckTrigger: false,
			chkStyle: _consts.checkbox.STYLE,
			nocheckInherit: false,
			chkDisabledInherit: false,
			radioType: _consts.radio.TYPE_LEVEL,
			chkboxType: {
				"Y": "ps",
				"N": "ps"
			}
		},
		data: {
			key: {
				checked: "checked"
			}
		},
		callback: {
			beforeCheck:null,
			onCheck:null
		}
	},
	//default root of excheck
	_initRoot = function (setting) {
		var r = data.getRoot(setting);
		r.radioCheckedList = [];
	},
	//default cache of excheck
	_initCache = function(treeId) {},
	//default bind event of excheck
	_bindEvent = function(setting) {
		var o = setting.treeObj,
		c = consts.event;
		o.bind(c.CHECK, function (event, srcEvent, treeId, node) {
			tools.apply(setting.callback.onCheck, [!!srcEvent?srcEvent : event, treeId, node]);
		});
	},
	_unbindEvent = function(setting) {
		var o = setting.treeObj,
		c = consts.event;
		o.unbind(c.CHECK);
	},
	//default event proxy of excheck
	_eventProxy = function(e) {
		var target = e.target,
		setting = data.getSetting(e.data.treeId),
		tId = "", node = null,
		nodeEventType = "", treeEventType = "",
		nodeEventCallback = null, treeEventCallback = null;

		if (tools.eqs(e.type, "mouseover")) {
			if (setting.check.enable && tools.eqs(target.tagName, "span") && target.getAttribute("treeNode"+ consts.id.CHECK) !== null) {
				tId = tools.getNodeMainDom(target).id;
				nodeEventType = "mouseoverCheck";
			}
		} else if (tools.eqs(e.type, "mouseout")) {
			if (setting.check.enable && tools.eqs(target.tagName, "span") && target.getAttribute("treeNode"+ consts.id.CHECK) !== null) {
				tId = tools.getNodeMainDom(target).id;
				nodeEventType = "mouseoutCheck";
			}
		} else if (tools.eqs(e.type, "click")) {
			if (setting.check.enable && tools.eqs(target.tagName, "span") && target.getAttribute("treeNode"+ consts.id.CHECK) !== null) {
				tId = tools.getNodeMainDom(target).id;
				nodeEventType = "checkNode";
			}
		}
		if (tId.length>0) {
			node = data.getNodeCache(setting, tId);
			switch (nodeEventType) {
				case "checkNode" :
					nodeEventCallback = _handler.onCheckNode;
					break;
				case "mouseoverCheck" :
					nodeEventCallback = _handler.onMouseoverCheck;
					break;
				case "mouseoutCheck" :
					nodeEventCallback = _handler.onMouseoutCheck;
					break;
			}
		}
		var proxyResult = {
			stop: nodeEventType === "checkNode",
			node: node,
			nodeEventType: nodeEventType,
			nodeEventCallback: nodeEventCallback,
			treeEventType: treeEventType,
			treeEventCallback: treeEventCallback
		};
		return proxyResult
	},
	//default init node of excheck
	_initNode = function(setting, level, n, parentNode, isFirstNode, isLastNode, openFlag) {
		if (!n) return;
		var checkedKey = setting.data.key.checked;
		if (typeof n[checkedKey] == "string") n[checkedKey] = tools.eqs(n[checkedKey], "true");
		n[checkedKey] = !!n[checkedKey];
		n.checkedOld = n[checkedKey];
		if (typeof n.nocheck == "string") n.nocheck = tools.eqs(n.nocheck, "true");
		n.nocheck = !!n.nocheck || (setting.check.nocheckInherit && parentNode && !!parentNode.nocheck);
		if (typeof n.chkDisabled == "string") n.chkDisabled = tools.eqs(n.chkDisabled, "true");
		n.chkDisabled = !!n.chkDisabled || (setting.check.chkDisabledInherit && parentNode && !!parentNode.chkDisabled);
		if (typeof n.halfCheck == "string") n.halfCheck = tools.eqs(n.halfCheck, "true");
		n.halfCheck = !!n.halfCheck;
		n.check_Child_State = -1;
		n.check_Focus = false;
		n.getCheckStatus = function() {return data.getCheckStatus(setting, n);};

		if (setting.check.chkStyle == consts.radio.STYLE && setting.check.radioType == consts.radio.TYPE_ALL && n[checkedKey] ) {
			var r = data.getRoot(setting);
			r.radioCheckedList.push(n);
		}
	},
	//add dom for check
	_beforeA = function(setting, node, html) {
		var checkedKey = setting.data.key.checked;
		if (setting.check.enable) {
			data.makeChkFlag(setting, node);
			html.push("<span ID='", node.tId, consts.id.CHECK, "' class='", view.makeChkClass(setting, node), "' treeNode", consts.id.CHECK, (node.nocheck === true?" style='display:none;'":""),"></span>");
		}
	},
	//update zTreeObj, add method of check
	_zTreeTools = function(setting, zTreeTools) {
		zTreeTools.checkNode = function(node, checked, checkTypeFlag, callbackFlag) {
			var checkedKey = setting.data.key.checked;
			if (node.chkDisabled === true) return;
			if (checked !== true && checked !== false) {
				checked = !node[checkedKey];
			}
			callbackFlag = !!callbackFlag;

			if (node[checkedKey] === checked && !checkTypeFlag) {
				return;
			} else if (callbackFlag && tools.apply(this.setting.callback.beforeCheck, [setting.treeId, node], true) == false) {
				return;
			}
			if (tools.uCanDo(this.setting) && setting.check.enable && node.nocheck !== true) {
				node[checkedKey] = checked;
				var checkObj = $$(node, consts.id.CHECK, setting);
				if (checkTypeFlag || setting.check.chkStyle === consts.radio.STYLE) view.checkNodeRelation(setting, node);
				view.setChkClass(setting, checkObj, node);
				view.repairParentChkClassWithSelf(setting, node);
				if (callbackFlag) {
					setting.treeObj.trigger(consts.event.CHECK, [null, setting.treeId, node]);
				}
			}
		}

		zTreeTools.checkAllNodes = function(checked) {
			view.repairAllChk(setting, !!checked);
		}

		zTreeTools.getCheckedNodes = function(checked) {
			var childKey = setting.data.key.children;
			checked = (checked !== false);
			return data.getTreeCheckedNodes(setting, data.getRoot(setting)[childKey], checked);
		}

		zTreeTools.getChangeCheckedNodes = function() {
			var childKey = setting.data.key.children;
			return data.getTreeChangeCheckedNodes(setting, data.getRoot(setting)[childKey]);
		}

		zTreeTools.setChkDisabled = function(node, disabled, inheritParent, inheritChildren) {
			disabled = !!disabled;
			inheritParent = !!inheritParent;
			inheritChildren = !!inheritChildren;
			view.repairSonChkDisabled(setting, node, disabled, inheritChildren);
			view.repairParentChkDisabled(setting, node.getParentNode(), disabled, inheritParent);
		}

		var _updateNode = zTreeTools.updateNode;
		zTreeTools.updateNode = function(node, checkTypeFlag) {
			if (_updateNode) _updateNode.apply(zTreeTools, arguments);
			if (!node || !setting.check.enable) return;
			var nObj = $$(node, setting);
			if (nObj.get(0) && tools.uCanDo(setting)) {
				var checkObj = $$(node, consts.id.CHECK, setting);
				if (checkTypeFlag == true || setting.check.chkStyle === consts.radio.STYLE) view.checkNodeRelation(setting, node);
				view.setChkClass(setting, checkObj, node);
				view.repairParentChkClassWithSelf(setting, node);
			}
		}
	},
	//method of operate data
	_data = {
		getRadioCheckedList: function(setting) {
			var checkedList = data.getRoot(setting).radioCheckedList;
			for (var i=0, j=checkedList.length; i<j; i++) {
				if(!data.getNodeCache(setting, checkedList[i].tId)) {
					checkedList.splice(i, 1);
					i--; j--;
				}
			}
			return checkedList;
		},
		getCheckStatus: function(setting, node) {
			if (!setting.check.enable || node.nocheck || node.chkDisabled) return null;
			var checkedKey = setting.data.key.checked,
			r = {
				checked: node[checkedKey],
				half: node.halfCheck ? node.halfCheck : (setting.check.chkStyle == consts.radio.STYLE ? (node.check_Child_State === 2) : (node[checkedKey] ? (node.check_Child_State > -1 && node.check_Child_State < 2) : (node.check_Child_State > 0)))
			};
			return r;
		},
		getTreeCheckedNodes: function(setting, nodes, checked, results) {
			if (!nodes) return [];
			var childKey = setting.data.key.children,
			checkedKey = setting.data.key.checked,
			onlyOne = (checked && setting.check.chkStyle == consts.radio.STYLE && setting.check.radioType == consts.radio.TYPE_ALL);
			results = !results ? [] : results;
			for (var i = 0, l = nodes.length; i < l; i++) {
				if (nodes[i].nocheck !== true && nodes[i].chkDisabled !== true && nodes[i][checkedKey] == checked) {
					results.push(nodes[i]);
					if(onlyOne) {
						break;
					}
				}
				data.getTreeCheckedNodes(setting, nodes[i][childKey], checked, results);
				if(onlyOne && results.length > 0) {
					break;
				}
			}
			return results;
		},
		getTreeChangeCheckedNodes: function(setting, nodes, results) {
			if (!nodes) return [];
			var childKey = setting.data.key.children,
			checkedKey = setting.data.key.checked;
			results = !results ? [] : results;
			for (var i = 0, l = nodes.length; i < l; i++) {
				if (nodes[i].nocheck !== true && nodes[i].chkDisabled !== true && nodes[i][checkedKey] != nodes[i].checkedOld) {
					results.push(nodes[i]);
				}
				data.getTreeChangeCheckedNodes(setting, nodes[i][childKey], results);
			}
			return results;
		},
		makeChkFlag: function(setting, node) {
			if (!node) return;
			var childKey = setting.data.key.children,
			checkedKey = setting.data.key.checked,
			chkFlag = -1;
			if (node[childKey]) {
				for (var i = 0, l = node[childKey].length; i < l; i++) {
					var cNode = node[childKey][i];
					var tmp = -1;
					if (setting.check.chkStyle == consts.radio.STYLE) {
						if (cNode.nocheck === true || cNode.chkDisabled === true) {
							tmp = cNode.check_Child_State;
						} else if (cNode.halfCheck === true) {
							tmp = 2;
						} else if (cNode[checkedKey]) {
							tmp = 2;
						} else {
							tmp = cNode.check_Child_State > 0 ? 2:0;
						}
						if (tmp == 2) {
							chkFlag = 2; break;
						} else if (tmp == 0){
							chkFlag = 0;
						}
					} else if (setting.check.chkStyle == consts.checkbox.STYLE) {
						if (cNode.nocheck === true || cNode.chkDisabled === true) {
							tmp = cNode.check_Child_State;
						} else if (cNode.halfCheck === true) {
							tmp = 1;
						} else if (cNode[checkedKey] ) {
							tmp = (cNode.check_Child_State === -1 || cNode.check_Child_State === 2) ? 2 : 1;
						} else {
							tmp = (cNode.check_Child_State > 0) ? 1 : 0;
						}
						if (tmp === 1) {
							chkFlag = 1; break;
						} else if (tmp === 2 && chkFlag > -1 && i > 0 && tmp !== chkFlag) {
							chkFlag = 1; break;
						} else if (chkFlag === 2 && tmp > -1 && tmp < 2) {
							chkFlag = 1; break;
						} else if (tmp > -1) {
							chkFlag = tmp;
						}
					}
				}
			}
			node.check_Child_State = chkFlag;
		}
	},
	//method of event proxy
	_event = {

	},
	//method of event handler
	_handler = {
		onCheckNode: function (event, node) {
			if (node.chkDisabled === true) return false;
			var setting = data.getSetting(event.data.treeId),
			checkedKey = setting.data.key.checked;
			if (tools.apply(setting.callback.beforeCheck, [setting.treeId, node], true) == false) return true;
			node[checkedKey] = !node[checkedKey];
			view.checkNodeRelation(setting, node);
			var checkObj = $$(node, consts.id.CHECK, setting);
			view.setChkClass(setting, checkObj, node);
			view.repairParentChkClassWithSelf(setting, node);
			setting.treeObj.trigger(consts.event.CHECK, [event, setting.treeId, node]);
			return true;
		},
		onMouseoverCheck: function(event, node) {
			if (node.chkDisabled === true) return false;
			var setting = data.getSetting(event.data.treeId),
			checkObj = $$(node, consts.id.CHECK, setting);
			node.check_Focus = true;
			view.setChkClass(setting, checkObj, node);
			return true;
		},
		onMouseoutCheck: function(event, node) {
			if (node.chkDisabled === true) return false;
			var setting = data.getSetting(event.data.treeId),
			checkObj = $$(node, consts.id.CHECK, setting);
			node.check_Focus = false;
			view.setChkClass(setting, checkObj, node);
			return true;
		}
	},
	//method of tools for zTree
	_tools = {

	},
	//method of operate ztree dom
	_view = {
		checkNodeRelation: function(setting, node) {
			var pNode, i, l,
			childKey = setting.data.key.children,
			checkedKey = setting.data.key.checked,
			r = consts.radio;
			if (setting.check.chkStyle == r.STYLE) {
				var checkedList = data.getRadioCheckedList(setting);
				if (node[checkedKey]) {
					if (setting.check.radioType == r.TYPE_ALL) {
						for (i = checkedList.length-1; i >= 0; i--) {
							pNode = checkedList[i];
							pNode[checkedKey] = false;
							checkedList.splice(i, 1);

							view.setChkClass(setting, $$(pNode, consts.id.CHECK, setting), pNode);
							if (pNode.parentTId != node.parentTId) {
								view.repairParentChkClassWithSelf(setting, pNode);
							}
						}
						checkedList.push(node);
					} else {
						var parentNode = (node.parentTId) ? node.getParentNode() : data.getRoot(setting);
						for (i = 0, l = parentNode[childKey].length; i < l; i++) {
							pNode = parentNode[childKey][i];
							if (pNode[checkedKey] && pNode != node) {
								pNode[checkedKey] = false;
								view.setChkClass(setting, $$(pNode, consts.id.CHECK, setting), pNode);
							}
						}
					}
				} else if (setting.check.radioType == r.TYPE_ALL) {
					for (i = 0, l = checkedList.length; i < l; i++) {
						if (node == checkedList[i]) {
							checkedList.splice(i, 1);
							break;
						}
					}
				}

			} else {
				if (node[checkedKey] && (!node[childKey] || node[childKey].length==0 || setting.check.chkboxType.Y.indexOf("s") > -1)) {
					view.setSonNodeCheckBox(setting, node, true);
				}
				if (!node[checkedKey] && (!node[childKey] || node[childKey].length==0 || setting.check.chkboxType.N.indexOf("s") > -1)) {
					view.setSonNodeCheckBox(setting, node, false);
				}
				if (node[checkedKey] && setting.check.chkboxType.Y.indexOf("p") > -1) {
					view.setParentNodeCheckBox(setting, node, true);
				}
				if (!node[checkedKey] && setting.check.chkboxType.N.indexOf("p") > -1) {
					view.setParentNodeCheckBox(setting, node, false);
				}
			}
		},
		makeChkClass: function(setting, node) {
			var checkedKey = setting.data.key.checked,
			c = consts.checkbox, r = consts.radio,
			fullStyle = "";
			if (node.chkDisabled === true) {
				fullStyle = c.DISABLED;
			} else if (node.halfCheck) {
				fullStyle = c.PART;
			} else if (setting.check.chkStyle == r.STYLE) {
				fullStyle = (node.check_Child_State < 1)? c.FULL:c.PART;
			} else {
				fullStyle = node[checkedKey] ? ((node.check_Child_State === 2 || node.check_Child_State === -1) ? c.FULL:c.PART) : ((node.check_Child_State < 1)? c.FULL:c.PART);
			}
			var chkName = setting.check.chkStyle + "_" + (node[checkedKey] ? c.TRUE : c.FALSE) + "_" + fullStyle;
			chkName = (node.check_Focus && node.chkDisabled !== true) ? chkName + "_" + c.FOCUS : chkName;
			return consts.className.BUTTON + " " + c.DEFAULT + " " + chkName;
		},
		repairAllChk: function(setting, checked) {
			if (setting.check.enable && setting.check.chkStyle === consts.checkbox.STYLE) {
				var checkedKey = setting.data.key.checked,
				childKey = setting.data.key.children,
				root = data.getRoot(setting);
				for (var i = 0, l = root[childKey].length; i<l ; i++) {
					var node = root[childKey][i];
					if (node.nocheck !== true && node.chkDisabled !== true) {
						node[checkedKey] = checked;
					}
					view.setSonNodeCheckBox(setting, node, checked);
				}
			}
		},
		repairChkClass: function(setting, node) {
			if (!node) return;
			data.makeChkFlag(setting, node);
			if (node.nocheck !== true) {
				var checkObj = $$(node, consts.id.CHECK, setting);
				view.setChkClass(setting, checkObj, node);
			}
		},
		repairParentChkClass: function(setting, node) {
			if (!node || !node.parentTId) return;
			var pNode = node.getParentNode();
			view.repairChkClass(setting, pNode);
			view.repairParentChkClass(setting, pNode);
		},
		repairParentChkClassWithSelf: function(setting, node) {
			if (!node) return;
			var childKey = setting.data.key.children;
			if (node[childKey] && node[childKey].length > 0) {
				view.repairParentChkClass(setting, node[childKey][0]);
			} else {
				view.repairParentChkClass(setting, node);
			}
		},
		repairSonChkDisabled: function(setting, node, chkDisabled, inherit) {
			if (!node) return;
			var childKey = setting.data.key.children;
			if (node.chkDisabled != chkDisabled) {
				node.chkDisabled = chkDisabled;
			}
			view.repairChkClass(setting, node);
			if (node[childKey] && inherit) {
				for (var i = 0, l = node[childKey].length; i < l; i++) {
					var sNode = node[childKey][i];
					view.repairSonChkDisabled(setting, sNode, chkDisabled, inherit);
				}
			}
		},
		repairParentChkDisabled: function(setting, node, chkDisabled, inherit) {
			if (!node) return;
			if (node.chkDisabled != chkDisabled && inherit) {
				node.chkDisabled = chkDisabled;
			}
			view.repairChkClass(setting, node);
			view.repairParentChkDisabled(setting, node.getParentNode(), chkDisabled, inherit);
		},
		setChkClass: function(setting, obj, node) {
			if (!obj) return;
			if (node.nocheck === true) {
				obj.hide();
			} else {
				obj.show();
			}
			obj.removeClass();
			obj.addClass(view.makeChkClass(setting, node));
		},
		setParentNodeCheckBox: function(setting, node, value, srcNode) {
			var childKey = setting.data.key.children,
			checkedKey = setting.data.key.checked,
			checkObj = $$(node, consts.id.CHECK, setting);
			if (!srcNode) srcNode = node;
			data.makeChkFlag(setting, node);
			if (node.nocheck !== true && node.chkDisabled !== true) {
				node[checkedKey] = value;
				view.setChkClass(setting, checkObj, node);
				if (setting.check.autoCheckTrigger && node != srcNode) {
					setting.treeObj.trigger(consts.event.CHECK, [null, setting.treeId, node]);
				}
			}
			if (node.parentTId) {
				var pSign = true;
				if (!value) {
					var pNodes = node.getParentNode()[childKey];
					for (var i = 0, l = pNodes.length; i < l; i++) {
						if ((pNodes[i].nocheck !== true && pNodes[i].chkDisabled !== true && pNodes[i][checkedKey])
						|| ((pNodes[i].nocheck === true || pNodes[i].chkDisabled === true) && pNodes[i].check_Child_State > 0)) {
							pSign = false;
							break;
						}
					}
				}
				if (pSign) {
					view.setParentNodeCheckBox(setting, node.getParentNode(), value, srcNode);
				}
			}
		},
		setSonNodeCheckBox: function(setting, node, value, srcNode) {
			if (!node) return;
			var childKey = setting.data.key.children,
			checkedKey = setting.data.key.checked,
			checkObj = $$(node, consts.id.CHECK, setting);
			if (!srcNode) srcNode = node;

			var hasDisable = false;
			if (node[childKey]) {
				for (var i = 0, l = node[childKey].length; i < l && node.chkDisabled !== true; i++) {
					var sNode = node[childKey][i];
					view.setSonNodeCheckBox(setting, sNode, value, srcNode);
					if (sNode.chkDisabled === true) hasDisable = true;
				}
			}

			if (node != data.getRoot(setting) && node.chkDisabled !== true) {
				if (hasDisable && node.nocheck !== true) {
					data.makeChkFlag(setting, node);
				}
				if (node.nocheck !== true && node.chkDisabled !== true) {
					node[checkedKey] = value;
					if (!hasDisable) node.check_Child_State = (node[childKey] && node[childKey].length > 0) ? (value ? 2 : 0) : -1;
				} else {
					node.check_Child_State = -1;
				}
				view.setChkClass(setting, checkObj, node);
				if (setting.check.autoCheckTrigger && node != srcNode && node.nocheck !== true && node.chkDisabled !== true) {
					setting.treeObj.trigger(consts.event.CHECK, [null, setting.treeId, node]);
				}
			}

		}
	},

	_z = {
		tools: _tools,
		view: _view,
		event: _event,
		data: _data
	};
	$.extend(true, $.fn.zTree.consts, _consts);
	$.extend(true, $.fn.zTree._z, _z);

	var zt = $.fn.zTree,
	tools = zt._z.tools,
	consts = zt.consts,
	view = zt._z.view,
	data = zt._z.data,
	event = zt._z.event,
	$$ = tools.$;

	data.exSetting(_setting);
	data.addInitBind(_bindEvent);
	data.addInitUnBind(_unbindEvent);
	data.addInitCache(_initCache);
	data.addInitNode(_initNode);
	data.addInitProxy(_eventProxy, true);
	data.addInitRoot(_initRoot);
	data.addBeforeA(_beforeA);
	data.addZTreeTools(_zTreeTools);

	var _createNodes = view.createNodes;
	view.createNodes = function(setting, level, nodes, parentNode) {
		if (_createNodes) _createNodes.apply(view, arguments);
		if (!nodes) return;
		view.repairParentChkClassWithSelf(setting, parentNode);
	}
	var _removeNode = view.removeNode;
	view.removeNode = function(setting, node) {
		var parentNode = node.getParentNode();
		if (_removeNode) _removeNode.apply(view, arguments);
		if (!node || !parentNode) return;
		view.repairChkClass(setting, parentNode);
		view.repairParentChkClass(setting, parentNode);
	}

	var _appendNodes = view.appendNodes;
	view.appendNodes = function(setting, level, nodes, parentNode, initFlag, openFlag) {
		var html = "";
		if (_appendNodes) {
			html = _appendNodes.apply(view, arguments);
		}
		if (parentNode) {
			data.makeChkFlag(setting, parentNode);
		}
		return html;
	}
})(jQuery);
/*
 * JQuery zTree exedit v3.5.15-beta.1
 * http://zTree.me/
 *
 * Copyright (c) 2010 Hunter.z
 *
 * Licensed same as jquery - MIT License
 * http://www.opensource.org/licenses/mit-license.php
 *
 * email: hunter.z@263.net
 * Date: 2013-07-13
 */
(function($){
	//default consts of exedit
	var _consts = {
		event: {
			DRAG: "ztree_drag",
			DROP: "ztree_drop",
			REMOVE: "ztree_remove",
			RENAME: "ztree_rename"
		},
		id: {
			EDIT: "_edit",
			INPUT: "_input",
			REMOVE: "_remove"
		},
		move: {
			TYPE_INNER: "inner",
			TYPE_PREV: "prev",
			TYPE_NEXT: "next"
		},
		node: {
			CURSELECTED_EDIT: "curSelectedNode_Edit",
			TMPTARGET_TREE: "tmpTargetzTree",
			TMPTARGET_NODE: "tmpTargetNode"
		}
	},
	//default setting of exedit
	_setting = {
		edit: {
			enable: false,
			editNameSelectAll: false,
			showRemoveBtn: true,
			showRenameBtn: true,
			removeTitle: "remove",
			renameTitle: "rename",
			drag: {
				autoExpandTrigger: false,
				isCopy: true,
				isMove: true,
				prev: true,
				next: true,
				inner: true,
				minMoveSize: 5,
				borderMax: 10,
				borderMin: -5,
				maxShowNodeNum: 5,
				autoOpenTime: 500
			}
		},
		view: {
			addHoverDom: null,
			removeHoverDom: null
		},
		callback: {
			beforeDrag:null,
			beforeDragOpen:null,
			beforeDrop:null,
			beforeEditName:null,
			beforeRename:null,
			onDrag:null,
			onDrop:null,
			onRename:null
		}
	},
	//default root of exedit
	_initRoot = function (setting) {
		var r = data.getRoot(setting), rs = data.getRoots();
		r.curEditNode = null;
		r.curEditInput = null;
		r.curHoverNode = null;
		r.dragFlag = 0;
		r.dragNodeShowBefore = [];
		r.dragMaskList = new Array();
		rs.showHoverDom = true;
	},
	//default cache of exedit
	_initCache = function(treeId) {},
	//default bind event of exedit
	_bindEvent = function(setting) {
		var o = setting.treeObj;
		var c = consts.event;
		o.bind(c.RENAME, function (event, treeId, treeNode, isCancel) {
			tools.apply(setting.callback.onRename, [event, treeId, treeNode, isCancel]);
		});

		o.bind(c.REMOVE, function (event, treeId, treeNode) {
			tools.apply(setting.callback.onRemove, [event, treeId, treeNode]);
		});

		o.bind(c.DRAG, function (event, srcEvent, treeId, treeNodes) {
			tools.apply(setting.callback.onDrag, [srcEvent, treeId, treeNodes]);
		});

		o.bind(c.DROP, function (event, srcEvent, treeId, treeNodes, targetNode, moveType, isCopy) {
			tools.apply(setting.callback.onDrop, [srcEvent, treeId, treeNodes, targetNode, moveType, isCopy]);
		});
	},
	_unbindEvent = function(setting) {
		var o = setting.treeObj;
		var c = consts.event;
		o.unbind(c.RENAME);
		o.unbind(c.REMOVE);
		o.unbind(c.DRAG);
		o.unbind(c.DROP);
	},
	//default event proxy of exedit
	_eventProxy = function(e) {
		var target = e.target,
		setting = data.getSetting(e.data.treeId),
		relatedTarget = e.relatedTarget,
		tId = "", node = null,
		nodeEventType = "", treeEventType = "",
		nodeEventCallback = null, treeEventCallback = null,
		tmp = null;

		if (tools.eqs(e.type, "mouseover")) {
			tmp = tools.getMDom(setting, target, [{tagName:"a", attrName:"treeNode"+consts.id.A}]);
			if (tmp) {
				tId = tools.getNodeMainDom(tmp).id;
				nodeEventType = "hoverOverNode";
			}
		} else if (tools.eqs(e.type, "mouseout")) {
			tmp = tools.getMDom(setting, relatedTarget, [{tagName:"a", attrName:"treeNode"+consts.id.A}]);
			if (!tmp) {
				tId = "remove";
				nodeEventType = "hoverOutNode";
			}
		} else if (tools.eqs(e.type, "mousedown")) {
			tmp = tools.getMDom(setting, target, [{tagName:"a", attrName:"treeNode"+consts.id.A}]);
			if (tmp) {
				tId = tools.getNodeMainDom(tmp).id;
				nodeEventType = "mousedownNode";
			}
		}
		if (tId.length>0) {
			node = data.getNodeCache(setting, tId);
			switch (nodeEventType) {
				case "mousedownNode" :
					nodeEventCallback = _handler.onMousedownNode;
					break;
				case "hoverOverNode" :
					nodeEventCallback = _handler.onHoverOverNode;
					break;
				case "hoverOutNode" :
					nodeEventCallback = _handler.onHoverOutNode;
					break;
			}
		}
		var proxyResult = {
			stop: false,
			node: node,
			nodeEventType: nodeEventType,
			nodeEventCallback: nodeEventCallback,
			treeEventType: treeEventType,
			treeEventCallback: treeEventCallback
		};
		return proxyResult
	},
	//default init node of exedit
	_initNode = function(setting, level, n, parentNode, isFirstNode, isLastNode, openFlag) {
		if (!n) return;
		n.isHover = false;
		n.editNameFlag = false;
	},
	//update zTreeObj, add method of edit
	_zTreeTools = function(setting, zTreeTools) {
		zTreeTools.cancelEditName = function(newName) {
			var root = data.getRoot(setting);
			if (!root.curEditNode) return;
			view.cancelCurEditNode(setting, newName?newName:null, true);
		}
		zTreeTools.copyNode = function(targetNode, node, moveType, isSilent) {
			if (!node) return null;
			if (targetNode && !targetNode.isParent && setting.data.keep.leaf && moveType === consts.move.TYPE_INNER) return null;
			var newNode = tools.clone(node);
			if (!targetNode) {
				targetNode = null;
				moveType = consts.move.TYPE_INNER;
			}
			if (moveType == consts.move.TYPE_INNER) {
				function copyCallback() {
					view.addNodes(setting, targetNode, [newNode], isSilent);
				}

				if (tools.canAsync(setting, targetNode)) {
					view.asyncNode(setting, targetNode, isSilent, copyCallback);
				} else {
					copyCallback();
				}
			} else {
				view.addNodes(setting, targetNode.parentNode, [newNode], isSilent);
				view.moveNode(setting, targetNode, newNode, moveType, false, isSilent);
			}
			return newNode;
		}
		zTreeTools.editName = function(node) {
			if (!node || !node.tId || node !== data.getNodeCache(setting, node.tId)) return;
			if (node.parentTId) view.expandCollapseParentNode(setting, node.getParentNode(), true);
			view.editNode(setting, node)
		}
		zTreeTools.moveNode = function(targetNode, node, moveType, isSilent) {
			if (!node) return node;
			if (targetNode && !targetNode.isParent && setting.data.keep.leaf && moveType === consts.move.TYPE_INNER) {
				return null;
			} else if (targetNode && ((node.parentTId == targetNode.tId && moveType == consts.move.TYPE_INNER) || $$(node, setting).find("#" + targetNode.tId).length > 0)) {
				return null;
			} else if (!targetNode) {
				targetNode = null;
			}
			function moveCallback() {
				view.moveNode(setting, targetNode, node, moveType, false, isSilent);
			}
			if (tools.canAsync(setting, targetNode) && moveType === consts.move.TYPE_INNER) {
				view.asyncNode(setting, targetNode, isSilent, moveCallback);
			} else {
				moveCallback();
			}
			return node;
		}
		zTreeTools.setEditable = function(editable) {
			setting.edit.enable = editable;
			return this.refresh();
		}
	},
	//method of operate data
	_data = {
		setSonNodeLevel: function(setting, parentNode, node) {
			if (!node) return;
			var childKey = setting.data.key.children;
			node.level = (parentNode)? parentNode.level + 1 : 0;
			if (!node[childKey]) return;
			for (var i = 0, l = node[childKey].length; i < l; i++) {
				if (node[childKey][i]) data.setSonNodeLevel(setting, node, node[childKey][i]);
			}
		}
	},
	//method of event proxy
	_event = {

	},
	//method of event handler
	_handler = {
		onHoverOverNode: function(event, node) {
			var setting = data.getSetting(event.data.treeId),
			root = data.getRoot(setting);
			if (root.curHoverNode != node) {
				_handler.onHoverOutNode(event);
			}
			root.curHoverNode = node;
			view.addHoverDom(setting, node);
		},
		onHoverOutNode: function(event, node) {
			var setting = data.getSetting(event.data.treeId),
			root = data.getRoot(setting);
			if (root.curHoverNode && !data.isSelectedNode(setting, root.curHoverNode)) {
				view.removeTreeDom(setting, root.curHoverNode);
				root.curHoverNode = null;
			}
		},
		onMousedownNode: function(eventMouseDown, _node) {
			var i,l,
			setting = data.getSetting(eventMouseDown.data.treeId),
			root = data.getRoot(setting), roots = data.getRoots();
			//right click can't drag & drop
			if (eventMouseDown.button == 2 || !setting.edit.enable || (!setting.edit.drag.isCopy && !setting.edit.drag.isMove)) return true;

			//input of edit node name can't drag & drop
			var target = eventMouseDown.target,
			_nodes = data.getRoot(setting).curSelectedList,
			nodes = [];
			if (!data.isSelectedNode(setting, _node)) {
				nodes = [_node];
			} else {
				for (i=0, l=_nodes.length; i<l; i++) {
					if (_nodes[i].editNameFlag && tools.eqs(target.tagName, "input") && target.getAttribute("treeNode"+consts.id.INPUT) !== null) {
						return true;
					}
					nodes.push(_nodes[i]);
					if (nodes[0].parentTId !== _nodes[i].parentTId) {
						nodes = [_node];
						break;
					}
				}
			}

			view.editNodeBlur = true;
			view.cancelCurEditNode(setting);

			var doc = $(setting.treeObj.get(0).ownerDocument),
			body = $(setting.treeObj.get(0).ownerDocument.body), curNode, tmpArrow, tmpTarget,
			isOtherTree = false,
			targetSetting = setting,
			sourceSetting = setting,
			preNode, nextNode,
			preTmpTargetNodeId = null,
			preTmpMoveType = null,
			tmpTargetNodeId = null,
			moveType = consts.move.TYPE_INNER,
			mouseDownX = eventMouseDown.clientX,
			mouseDownY = eventMouseDown.clientY,
			startTime = (new Date()).getTime();

			if (tools.uCanDo(setting)) {
				doc.bind("mousemove", _docMouseMove);
			}
			function _docMouseMove(event) {
				//avoid start drag after click node
				if (root.dragFlag == 0 && Math.abs(mouseDownX - event.clientX) < setting.edit.drag.minMoveSize
					&& Math.abs(mouseDownY - event.clientY) < setting.edit.drag.minMoveSize) {
					return true;
				}
				var i, l, tmpNode, tmpDom, tmpNodes,
				childKey = setting.data.key.children;
				body.css("cursor", "pointer");

				if (root.dragFlag == 0) {
					if (tools.apply(setting.callback.beforeDrag, [setting.treeId, nodes], true) == false) {
						_docMouseUp(event);
						return true;
					}

					for (i=0, l=nodes.length; i<l; i++) {
						if (i==0) {
							root.dragNodeShowBefore = [];
						}
						tmpNode = nodes[i];
						if (tmpNode.isParent && tmpNode.open) {
							view.expandCollapseNode(setting, tmpNode, !tmpNode.open);
							root.dragNodeShowBefore[tmpNode.tId] = true;
						} else {
							root.dragNodeShowBefore[tmpNode.tId] = false;
						}
					}

					root.dragFlag = 1;
					roots.showHoverDom = false;
					tools.showIfameMask(setting, true);

					//sort
					var isOrder = true, lastIndex = -1;
					if (nodes.length>1) {
						var pNodes = nodes[0].parentTId ? nodes[0].getParentNode()[childKey] : data.getNodes(setting);
						tmpNodes = [];
						for (i=0, l=pNodes.length; i<l; i++) {
							if (root.dragNodeShowBefore[pNodes[i].tId] !== undefined) {
								if (isOrder && lastIndex > -1 && (lastIndex+1) !== i) {
									isOrder = false;
								}
								tmpNodes.push(pNodes[i]);
								lastIndex = i;
							}
							if (nodes.length === tmpNodes.length) {
								nodes = tmpNodes;
								break;
							}
						}
					}
					if (isOrder) {
						preNode = nodes[0].getPreNode();
						nextNode = nodes[nodes.length-1].getNextNode();
					}

					//set node in selected
					curNode = $$("<ul class='zTreeDragUL'></ul>", setting);
					for (i=0, l=nodes.length; i<l; i++) {
						tmpNode = nodes[i];
						tmpNode.editNameFlag = false;
						view.selectNode(setting, tmpNode, i>0);
						view.removeTreeDom(setting, tmpNode);

						tmpDom = $$("<li id='"+ tmpNode.tId +"_tmp'></li>", setting);
						tmpDom.append($$(tmpNode, consts.id.A, setting).clone());
						tmpDom.css("padding", "0");
						tmpDom.children("#" + tmpNode.tId + consts.id.A).removeClass(consts.node.CURSELECTED);
						curNode.append(tmpDom);
						if (i == setting.edit.drag.maxShowNodeNum-1) {
							tmpDom = $$("<li id='"+ tmpNode.tId +"_moretmp'><a>  ...  </a></li>", setting);
							curNode.append(tmpDom);
							break;
						}
					}
					curNode.attr("id", nodes[0].tId + consts.id.UL + "_tmp");
					curNode.addClass(setting.treeObj.attr("class"));
					curNode.appendTo(body);

					tmpArrow = $$("<span class='tmpzTreeMove_arrow'></span>", setting);
					tmpArrow.attr("id", "zTreeMove_arrow_tmp");
					tmpArrow.appendTo(body);

					setting.treeObj.trigger(consts.event.DRAG, [event, setting.treeId, nodes]);
				}

				if (root.dragFlag == 1) {
					if (tmpTarget && tmpArrow.attr("id") == event.target.id && tmpTargetNodeId && (event.clientX + doc.scrollLeft()+2) > ($("#" + tmpTargetNodeId + consts.id.A, tmpTarget).offset().left)) {
						var xT = $("#" + tmpTargetNodeId + consts.id.A, tmpTarget);
						event.target = (xT.length > 0) ? xT.get(0) : event.target;
					} else if (tmpTarget) {
						tmpTarget.removeClass(consts.node.TMPTARGET_TREE);
						if (tmpTargetNodeId) $("#" + tmpTargetNodeId + consts.id.A, tmpTarget).removeClass(consts.node.TMPTARGET_NODE + "_" + consts.move.TYPE_PREV)
							.removeClass(consts.node.TMPTARGET_NODE + "_" + _consts.move.TYPE_NEXT).removeClass(consts.node.TMPTARGET_NODE + "_" + _consts.move.TYPE_INNER);
					}
					tmpTarget = null;
					tmpTargetNodeId = null;

					//judge drag & drop in multi ztree
					isOtherTree = false;
					targetSetting = setting;
					var settings = data.getSettings();
					for (var s in settings) {
						if (settings[s].treeId && settings[s].edit.enable && settings[s].treeId != setting.treeId
							&& (event.target.id == settings[s].treeId || $(event.target).parents("#" + settings[s].treeId).length>0)) {
							isOtherTree = true;
							targetSetting = settings[s];
						}
					}

					var docScrollTop = doc.scrollTop(),
					docScrollLeft = doc.scrollLeft(),
					treeOffset = targetSetting.treeObj.offset(),
					scrollHeight = targetSetting.treeObj.get(0).scrollHeight,
					scrollWidth = targetSetting.treeObj.get(0).scrollWidth,
					dTop = (event.clientY + docScrollTop - treeOffset.top),
					dBottom = (targetSetting.treeObj.height() + treeOffset.top - event.clientY - docScrollTop),
					dLeft = (event.clientX + docScrollLeft - treeOffset.left),
					dRight = (targetSetting.treeObj.width() + treeOffset.left - event.clientX - docScrollLeft),
					isTop = (dTop < setting.edit.drag.borderMax && dTop > setting.edit.drag.borderMin),
					isBottom = (dBottom < setting.edit.drag.borderMax && dBottom > setting.edit.drag.borderMin),
					isLeft = (dLeft < setting.edit.drag.borderMax && dLeft > setting.edit.drag.borderMin),
					isRight = (dRight < setting.edit.drag.borderMax && dRight > setting.edit.drag.borderMin),
					isTreeInner = dTop > setting.edit.drag.borderMin && dBottom > setting.edit.drag.borderMin && dLeft > setting.edit.drag.borderMin && dRight > setting.edit.drag.borderMin,
					isTreeTop = (isTop && targetSetting.treeObj.scrollTop() <= 0),
					isTreeBottom = (isBottom && (targetSetting.treeObj.scrollTop() + targetSetting.treeObj.height()+10) >= scrollHeight),
					isTreeLeft = (isLeft && targetSetting.treeObj.scrollLeft() <= 0),
					isTreeRight = (isRight && (targetSetting.treeObj.scrollLeft() + targetSetting.treeObj.width()+10) >= scrollWidth);

					if (event.target.id && targetSetting.treeObj.find("#" + event.target.id).length > 0) {
						//get node <li> dom
						var targetObj = event.target;
						while (targetObj && targetObj.tagName && !tools.eqs(targetObj.tagName, "li") && targetObj.id != targetSetting.treeId) {
							targetObj = targetObj.parentNode;
						}

						var canMove = true;
						//don't move to self or children of self
						for (i=0, l=nodes.length; i<l; i++) {
							tmpNode = nodes[i];
							if (targetObj.id === tmpNode.tId) {
								canMove = false;
								break;
							} else if ($$(tmpNode, setting).find("#" + targetObj.id).length > 0) {
								canMove = false;
								break;
							}
						}
						if (canMove) {
							if (event.target.id &&
								(event.target.id == (targetObj.id + consts.id.A) || $(event.target).parents("#" + targetObj.id + consts.id.A).length > 0)) {
								tmpTarget = $(targetObj);
								tmpTargetNodeId = targetObj.id;
							}
						}
					}

					//the mouse must be in zTree
					tmpNode = nodes[0];
					if (isTreeInner && (event.target.id == targetSetting.treeId || $(event.target).parents("#" + targetSetting.treeId).length>0)) {
						//judge mouse move in root of ztree
						if (!tmpTarget && (event.target.id == targetSetting.treeId || isTreeTop || isTreeBottom || isTreeLeft || isTreeRight) && (isOtherTree || (!isOtherTree && tmpNode.parentTId))) {
							tmpTarget = targetSetting.treeObj;
						}
						//auto scroll top
						if (isTop) {
							targetSetting.treeObj.scrollTop(targetSetting.treeObj.scrollTop()-10);
						} else if (isBottom)  {
							targetSetting.treeObj.scrollTop(targetSetting.treeObj.scrollTop()+10);
						}
						if (isLeft) {
							targetSetting.treeObj.scrollLeft(targetSetting.treeObj.scrollLeft()-10);
						} else if (isRight) {
							targetSetting.treeObj.scrollLeft(targetSetting.treeObj.scrollLeft()+10);
						}
						//auto scroll left
						if (tmpTarget && tmpTarget != targetSetting.treeObj && tmpTarget.offset().left < targetSetting.treeObj.offset().left) {
							targetSetting.treeObj.scrollLeft(targetSetting.treeObj.scrollLeft()+ tmpTarget.offset().left - targetSetting.treeObj.offset().left);
						}
					}

					curNode.css({
						"top": (event.clientY + docScrollTop + 3) + "px",
						"left": (event.clientX + docScrollLeft + 3) + "px"
					});

					var dX = 0;
					var dY = 0;
					if (tmpTarget && tmpTarget.attr("id")!=targetSetting.treeId) {
						var tmpTargetNode = tmpTargetNodeId == null ? null: data.getNodeCache(targetSetting, tmpTargetNodeId),
						isCopy = (event.ctrlKey && setting.edit.drag.isMove && setting.edit.drag.isCopy) || (!setting.edit.drag.isMove && setting.edit.drag.isCopy),
						isPrev = !!(preNode && tmpTargetNodeId === preNode.tId),
						isNext = !!(nextNode && tmpTargetNodeId === nextNode.tId),
						isInner = (tmpNode.parentTId && tmpNode.parentTId == tmpTargetNodeId),
						canPrev = (isCopy || !isNext) && tools.apply(targetSetting.edit.drag.prev, [targetSetting.treeId, nodes, tmpTargetNode], !!targetSetting.edit.drag.prev),
						canNext = (isCopy || !isPrev) && tools.apply(targetSetting.edit.drag.next, [targetSetting.treeId, nodes, tmpTargetNode], !!targetSetting.edit.drag.next),
						canInner = (isCopy || !isInner) && !(targetSetting.data.keep.leaf && !tmpTargetNode.isParent) && tools.apply(targetSetting.edit.drag.inner, [targetSetting.treeId, nodes, tmpTargetNode], !!targetSetting.edit.drag.inner);
						if (!canPrev && !canNext && !canInner) {
							tmpTarget = null;
							tmpTargetNodeId = "";
							moveType = consts.move.TYPE_INNER;
							tmpArrow.css({
								"display":"none"
							});
							if (window.zTreeMoveTimer) {
								clearTimeout(window.zTreeMoveTimer);
								window.zTreeMoveTargetNodeTId = null
							}
						} else {
							var tmpTargetA = $("#" + tmpTargetNodeId + consts.id.A, tmpTarget),
							tmpNextA = tmpTargetNode.isLastNode ? null : $("#" + tmpTargetNode.getNextNode().tId + consts.id.A, tmpTarget.next()),
							tmpTop = tmpTargetA.offset().top,
							tmpLeft = tmpTargetA.offset().left,
							prevPercent = canPrev ? (canInner ? 0.25 : (canNext ? 0.5 : 1) ) : -1,
							nextPercent = canNext ? (canInner ? 0.75 : (canPrev ? 0.5 : 0) ) : -1,
							dY_percent = (event.clientY + docScrollTop - tmpTop)/tmpTargetA.height();
							if ((prevPercent==1 ||dY_percent<=prevPercent && dY_percent>=-.2) && canPrev) {
								dX = 1 - tmpArrow.width();
								dY = tmpTop - tmpArrow.height()/2;
								moveType = consts.move.TYPE_PREV;
							} else if ((nextPercent==0 || dY_percent>=nextPercent && dY_percent<=1.2) && canNext) {
								dX = 1 - tmpArrow.width();
								dY = (tmpNextA == null || (tmpTargetNode.isParent && tmpTargetNode.open)) ? (tmpTop + tmpTargetA.height() - tmpArrow.height()/2) : (tmpNextA.offset().top - tmpArrow.height()/2);
								moveType = consts.move.TYPE_NEXT;
							}else {
								dX = 5 - tmpArrow.width();
								dY = tmpTop;
								moveType = consts.move.TYPE_INNER;
							}
							tmpArrow.css({
								"display":"block",
								"top": dY + "px",
								"left": (tmpLeft + dX) + "px"
							});
							tmpTargetA.addClass(consts.node.TMPTARGET_NODE + "_" + moveType);

							if (preTmpTargetNodeId != tmpTargetNodeId || preTmpMoveType != moveType) {
								startTime = (new Date()).getTime();
							}
							if (tmpTargetNode && tmpTargetNode.isParent && moveType == consts.move.TYPE_INNER) {
								var startTimer = true;
								if (window.zTreeMoveTimer && window.zTreeMoveTargetNodeTId !== tmpTargetNode.tId) {
									clearTimeout(window.zTreeMoveTimer);
									window.zTreeMoveTargetNodeTId = null;
								}else if (window.zTreeMoveTimer && window.zTreeMoveTargetNodeTId === tmpTargetNode.tId) {
									startTimer = false;
								}
								if (startTimer) {
									window.zTreeMoveTimer = setTimeout(function() {
										if (moveType != consts.move.TYPE_INNER) return;
										if (tmpTargetNode && tmpTargetNode.isParent && !tmpTargetNode.open && (new Date()).getTime() - startTime > targetSetting.edit.drag.autoOpenTime
											&& tools.apply(targetSetting.callback.beforeDragOpen, [targetSetting.treeId, tmpTargetNode], true)) {
											view.switchNode(targetSetting, tmpTargetNode);
											if (targetSetting.edit.drag.autoExpandTrigger) {
												targetSetting.treeObj.trigger(consts.event.EXPAND, [targetSetting.treeId, tmpTargetNode]);
											}
										}
									}, targetSetting.edit.drag.autoOpenTime+50);
									window.zTreeMoveTargetNodeTId = tmpTargetNode.tId;
								}
							}
						}
					} else {
						moveType = consts.move.TYPE_INNER;
						if (tmpTarget && tools.apply(targetSetting.edit.drag.inner, [targetSetting.treeId, nodes, null], !!targetSetting.edit.drag.inner)) {
							tmpTarget.addClass(consts.node.TMPTARGET_TREE);
						} else {
							tmpTarget = null;
						}
						tmpArrow.css({
							"display":"none"
						});
						if (window.zTreeMoveTimer) {
							clearTimeout(window.zTreeMoveTimer);
							window.zTreeMoveTargetNodeTId = null;
						}
					}
					preTmpTargetNodeId = tmpTargetNodeId;
					preTmpMoveType = moveType;
				}
				return false;
			}

			doc.bind("mouseup", _docMouseUp);
			function _docMouseUp(event) {
				if (window.zTreeMoveTimer) {
					clearTimeout(window.zTreeMoveTimer);
					window.zTreeMoveTargetNodeTId = null;
				}
				preTmpTargetNodeId = null;
				preTmpMoveType = null;
				doc.unbind("mousemove", _docMouseMove);
				doc.unbind("mouseup", _docMouseUp);
				doc.unbind("selectstart", _docSelect);
				body.css("cursor", "auto");
				if (tmpTarget) {
					tmpTarget.removeClass(consts.node.TMPTARGET_TREE);
					if (tmpTargetNodeId) $("#" + tmpTargetNodeId + consts.id.A, tmpTarget).removeClass(consts.node.TMPTARGET_NODE + "_" + consts.move.TYPE_PREV)
							.removeClass(consts.node.TMPTARGET_NODE + "_" + _consts.move.TYPE_NEXT).removeClass(consts.node.TMPTARGET_NODE + "_" + _consts.move.TYPE_INNER);
				}
				tools.showIfameMask(setting, false);

				roots.showHoverDom = true;
				if (root.dragFlag == 0) return;
				root.dragFlag = 0;

				var i, l, tmpNode;
				for (i=0, l=nodes.length; i<l; i++) {
					tmpNode = nodes[i];
					if (tmpNode.isParent && root.dragNodeShowBefore[tmpNode.tId] && !tmpNode.open) {
						view.expandCollapseNode(setting, tmpNode, !tmpNode.open);
						delete root.dragNodeShowBefore[tmpNode.tId];
					}
				}

				if (curNode) curNode.remove();
				if (tmpArrow) tmpArrow.remove();

				var isCopy = (event.ctrlKey && setting.edit.drag.isMove && setting.edit.drag.isCopy) || (!setting.edit.drag.isMove && setting.edit.drag.isCopy);
				if (!isCopy && tmpTarget && tmpTargetNodeId && nodes[0].parentTId && tmpTargetNodeId==nodes[0].parentTId && moveType == consts.move.TYPE_INNER) {
					tmpTarget = null;
				}
				if (tmpTarget) {
					var dragTargetNode = tmpTargetNodeId == null ? null: data.getNodeCache(targetSetting, tmpTargetNodeId);
					if (tools.apply(setting.callback.beforeDrop, [targetSetting.treeId, nodes, dragTargetNode, moveType, isCopy], true) == false) {
						view.selectNodes(sourceSetting, nodes);
						return;
					}
					var newNodes = isCopy ? tools.clone(nodes) : nodes;

					function dropCallback() {
						if (isOtherTree) {
							if (!isCopy) {
								for(var i=0, l=nodes.length; i<l; i++) {
									view.removeNode(setting, nodes[i]);
								}
							}
							if (moveType == consts.move.TYPE_INNER) {
								view.addNodes(targetSetting, dragTargetNode, newNodes);
							} else {
								view.addNodes(targetSetting, dragTargetNode.getParentNode(), newNodes);
								if (moveType == consts.move.TYPE_PREV) {
									for (i=0, l=newNodes.length; i<l; i++) {
										view.moveNode(targetSetting, dragTargetNode, newNodes[i], moveType, false);
									}
								} else {
									for (i=-1, l=newNodes.length-1; i<l; l--) {
										view.moveNode(targetSetting, dragTargetNode, newNodes[l], moveType, false);
									}
								}
							}
						} else {
							if (isCopy && moveType == consts.move.TYPE_INNER) {
								view.addNodes(targetSetting, dragTargetNode, newNodes);
							} else {
								if (isCopy) {
									view.addNodes(targetSetting, dragTargetNode.getParentNode(), newNodes);
								}
								if (moveType != consts.move.TYPE_NEXT) {
									for (i=0, l=newNodes.length; i<l; i++) {
										view.moveNode(targetSetting, dragTargetNode, newNodes[i], moveType, false);
									}
								} else {
									for (i=-1, l=newNodes.length-1; i<l; l--) {
										view.moveNode(targetSetting, dragTargetNode, newNodes[l], moveType, false);
									}
								}
							}
						}
						view.selectNodes(targetSetting, newNodes);
						$$(newNodes[0], setting).focus().blur();

						setting.treeObj.trigger(consts.event.DROP, [event, targetSetting.treeId, newNodes, dragTargetNode, moveType, isCopy]);
					}

					if (moveType == consts.move.TYPE_INNER && tools.canAsync(targetSetting, dragTargetNode)) {
						view.asyncNode(targetSetting, dragTargetNode, false, dropCallback);
					} else {
						dropCallback();
					}

				} else {
					view.selectNodes(sourceSetting, nodes);
					setting.treeObj.trigger(consts.event.DROP, [event, setting.treeId, nodes, null, null, null]);
				}
			}

			doc.bind("selectstart", _docSelect);
			function _docSelect() {
				return false;
			}

			//Avoid FireFox's Bug
			//If zTree Div CSS set 'overflow', so drag node outside of zTree, and event.target is error.
			if(eventMouseDown.preventDefault) {
				eventMouseDown.preventDefault();
			}
			return true;
		}
	},
	//method of tools for zTree
	_tools = {
		getAbs: function (obj) {
			var oRect = obj.getBoundingClientRect(),
			scrollTop = document.body.scrollTop+document.documentElement.scrollTop,
			scrollLeft = document.body.scrollLeft+document.documentElement.scrollLeft;
			return [oRect.left+scrollLeft,oRect.top+scrollTop];
		},
		inputFocus: function(inputObj) {
			if (inputObj.get(0)) {
				inputObj.focus();
				tools.setCursorPosition(inputObj.get(0), inputObj.val().length);
			}
		},
		inputSelect: function(inputObj) {
			if (inputObj.get(0)) {
				inputObj.focus();
				inputObj.select();
			}
		},
		setCursorPosition: function(obj, pos){
			if(obj.setSelectionRange) {
				obj.focus();
				obj.setSelectionRange(pos,pos);
			} else if (obj.createTextRange) {
				var range = obj.createTextRange();
				range.collapse(true);
				range.moveEnd('character', pos);
				range.moveStart('character', pos);
				range.select();
			}
		},
		showIfameMask: function(setting, showSign) {
			var root = data.getRoot(setting);
			//clear full mask
			while (root.dragMaskList.length > 0) {
				root.dragMaskList[0].remove();
				root.dragMaskList.shift();
			}
			if (showSign) {
				//show mask
				var iframeList = $$("iframe", setting);
				for (var i = 0, l = iframeList.length; i < l; i++) {
					var obj = iframeList.get(i),
					r = tools.getAbs(obj),
					dragMask = $$("<div id='zTreeMask_" + i + "' class='zTreeMask' style='top:" + r[1] + "px; left:" + r[0] + "px; width:" + obj.offsetWidth + "px; height:" + obj.offsetHeight + "px;'></div>", setting);
					dragMask.appendTo($$("body", setting));
					root.dragMaskList.push(dragMask);
				}
			}
		}
	},
	//method of operate ztree dom
	_view = {
		addEditBtn: function(setting, node) {
			if (node.editNameFlag || $$(node, consts.id.EDIT, setting).length > 0) {
				return;
			}
			if (!tools.apply(setting.edit.showRenameBtn, [setting.treeId, node], setting.edit.showRenameBtn)) {
				return;
			}
			var aObj = $$(node, consts.id.A, setting),
			editStr = "<span class='" + consts.className.BUTTON + " edit' id='" + node.tId + consts.id.EDIT + "' title='"+tools.apply(setting.edit.renameTitle, [setting.treeId, node], setting.edit.renameTitle)+"' treeNode"+consts.id.EDIT+" style='display:none;'></span>";
			aObj.append(editStr);

			$$(node, consts.id.EDIT, setting).bind('click',
				function() {
					if (!tools.uCanDo(setting) || tools.apply(setting.callback.beforeEditName, [setting.treeId, node], true) == false) return false;
					view.editNode(setting, node);
					return false;
				}
				).show();
		},
		addRemoveBtn: function(setting, node) {
			if (node.editNameFlag || $$(node, consts.id.REMOVE, setting).length > 0) {
				return;
			}
			if (!tools.apply(setting.edit.showRemoveBtn, [setting.treeId, node], setting.edit.showRemoveBtn)) {
				return;
			}
			var aObj = $$(node, consts.id.A, setting),
			removeStr = "<span class='" + consts.className.BUTTON + " remove' id='" + node.tId + consts.id.REMOVE + "' title='"+tools.apply(setting.edit.removeTitle, [setting.treeId, node], setting.edit.removeTitle)+"' treeNode"+consts.id.REMOVE+" style='display:none;'></span>";
			aObj.append(removeStr);

			$$(node, consts.id.REMOVE, setting).bind('click',
				function() {
					if (!tools.uCanDo(setting) || tools.apply(setting.callback.beforeRemove, [setting.treeId, node], true) == false) return false;
					view.removeNode(setting, node);
					setting.treeObj.trigger(consts.event.REMOVE, [setting.treeId, node]);
					return false;
				}
				).bind('mousedown',
				function(eventMouseDown) {
					return true;
				}
				).show();
		},
		addHoverDom: function(setting, node) {
			if (data.getRoots().showHoverDom) {
				node.isHover = true;
				if (setting.edit.enable) {
					view.addEditBtn(setting, node);
					view.addRemoveBtn(setting, node);
				}
				tools.apply(setting.view.addHoverDom, [setting.treeId, node]);
			}
		},
		cancelCurEditNode: function (setting, forceName, isCancel) {
			var root = data.getRoot(setting),
			nameKey = setting.data.key.name,
			node = root.curEditNode;

			if (node) {
				var inputObj = root.curEditInput,
				newName = forceName ? forceName:(isCancel ? node[nameKey]: inputObj.val());
				if (tools.apply(setting.callback.beforeRename, [setting.treeId, node, newName, isCancel], true) === false) {
					return false;
				} else {
					node[nameKey] = newName;
					setting.treeObj.trigger(consts.event.RENAME, [setting.treeId, node, isCancel]);
				}
				var aObj = $$(node, consts.id.A, setting);
				aObj.removeClass(consts.node.CURSELECTED_EDIT);
				inputObj.unbind();
				view.setNodeName(setting, node);
				node.editNameFlag = false;
				root.curEditNode = null;
				root.curEditInput = null;
				view.selectNode(setting, node, false);
			}
			root.noSelection = true;
			return true;
		},
		editNode: function(setting, node) {
			var root = data.getRoot(setting);
			view.editNodeBlur = false;
			if (data.isSelectedNode(setting, node) && root.curEditNode == node && node.editNameFlag) {
				setTimeout(function() {tools.inputFocus(root.curEditInput);}, 0);
				return;
			}
			var nameKey = setting.data.key.name;
			node.editNameFlag = true;
			view.removeTreeDom(setting, node);
			view.cancelCurEditNode(setting);
			view.selectNode(setting, node, false);
			$$(node, consts.id.SPAN, setting).html("<input type=text class='rename' id='" + node.tId + consts.id.INPUT + "' treeNode" + consts.id.INPUT + " >");
			var inputObj = $$(node, consts.id.INPUT, setting);
			inputObj.attr("value", node[nameKey]);
			if (setting.edit.editNameSelectAll) {
				tools.inputSelect(inputObj);
			} else {
				tools.inputFocus(inputObj);
			}

			inputObj.bind('blur', function(event) {
				if (!view.editNodeBlur) {
					view.cancelCurEditNode(setting);
				}
			}).bind('keydown', function(event) {
				if (event.keyCode=="13") {
					view.editNodeBlur = true;
					view.cancelCurEditNode(setting);
				} else if (event.keyCode=="27") {
					view.cancelCurEditNode(setting, null, true);
				}
			}).bind('click', function(event) {
				return false;
			}).bind('dblclick', function(event) {
				return false;
			});

			$$(node, consts.id.A, setting).addClass(consts.node.CURSELECTED_EDIT);
			root.curEditInput = inputObj;
			root.noSelection = false;
			root.curEditNode = node;
		},
		moveNode: function(setting, targetNode, node, moveType, animateFlag, isSilent) {
			var root = data.getRoot(setting),
			childKey = setting.data.key.children;
			if (targetNode == node) return;
			if (setting.data.keep.leaf && targetNode && !targetNode.isParent && moveType == consts.move.TYPE_INNER) return;
			var oldParentNode = (node.parentTId ? node.getParentNode(): root),
			targetNodeIsRoot = (targetNode === null || targetNode == root);
			if (targetNodeIsRoot && targetNode === null) targetNode = root;
			if (targetNodeIsRoot) moveType = consts.move.TYPE_INNER;
			var targetParentNode = (targetNode.parentTId ? targetNode.getParentNode() : root);

			if (moveType != consts.move.TYPE_PREV && moveType != consts.move.TYPE_NEXT) {
				moveType = consts.move.TYPE_INNER;
			}

			if (moveType == consts.move.TYPE_INNER) {
				if (targetNodeIsRoot) {
					//parentTId of root node is null
					node.parentTId = null;
				} else {
					if (!targetNode.isParent) {
						targetNode.isParent = true;
						targetNode.open = !!targetNode.open;
						view.setNodeLineIcos(setting, targetNode);
					}
					node.parentTId = targetNode.tId;
				}
			}

			//move node Dom
			var targetObj, target_ulObj;
			if (targetNodeIsRoot) {
				targetObj = setting.treeObj;
				target_ulObj = targetObj;
			} else {
				if (!isSilent && moveType == consts.move.TYPE_INNER) {
					view.expandCollapseNode(setting, targetNode, true, false);
				} else if (!isSilent) {
					view.expandCollapseNode(setting, targetNode.getParentNode(), true, false);
				}
				targetObj = $$(targetNode, setting);
				target_ulObj = $$(targetNode, consts.id.UL, setting);
				if (!!targetObj.get(0) && !target_ulObj.get(0)) {
					var ulstr = [];
					view.makeUlHtml(setting, targetNode, ulstr, '');
					targetObj.append(ulstr.join(''));
				}
				target_ulObj = $$(targetNode, consts.id.UL, setting);
			}
			var nodeDom = $$(node, setting);
			if (!nodeDom.get(0)) {
				nodeDom = view.appendNodes(setting, node.level, [node], null, false, true).join('');
			} else if (!targetObj.get(0)) {
				nodeDom.remove();
			}
			if (target_ulObj.get(0) && moveType == consts.move.TYPE_INNER) {
				target_ulObj.append(nodeDom);
			} else if (targetObj.get(0) && moveType == consts.move.TYPE_PREV) {
				targetObj.before(nodeDom);
			} else if (targetObj.get(0) && moveType == consts.move.TYPE_NEXT) {
				targetObj.after(nodeDom);
			}

			//repair the data after move
			var i,l,
			tmpSrcIndex = -1,
			tmpTargetIndex = 0,
			oldNeighbor = null,
			newNeighbor = null,
			oldLevel = node.level;
			if (node.isFirstNode) {
				tmpSrcIndex = 0;
				if (oldParentNode[childKey].length > 1 ) {
					oldNeighbor = oldParentNode[childKey][1];
					oldNeighbor.isFirstNode = true;
				}
			} else if (node.isLastNode) {
				tmpSrcIndex = oldParentNode[childKey].length -1;
				oldNeighbor = oldParentNode[childKey][tmpSrcIndex - 1];
				oldNeighbor.isLastNode = true;
			} else {
				for (i = 0, l = oldParentNode[childKey].length; i < l; i++) {
					if (oldParentNode[childKey][i].tId == node.tId) {
						tmpSrcIndex = i;
						break;
					}
				}
			}
			if (tmpSrcIndex >= 0) {
				oldParentNode[childKey].splice(tmpSrcIndex, 1);
			}
			if (moveType != consts.move.TYPE_INNER) {
				for (i = 0, l = targetParentNode[childKey].length; i < l; i++) {
					if (targetParentNode[childKey][i].tId == targetNode.tId) tmpTargetIndex = i;
				}
			}
			if (moveType == consts.move.TYPE_INNER) {
				if (!targetNode[childKey]) targetNode[childKey] = new Array();
				if (targetNode[childKey].length > 0) {
					newNeighbor = targetNode[childKey][targetNode[childKey].length - 1];
					newNeighbor.isLastNode = false;
				}
				targetNode[childKey].splice(targetNode[childKey].length, 0, node);
				node.isLastNode = true;
				node.isFirstNode = (targetNode[childKey].length == 1);
			} else if (targetNode.isFirstNode && moveType == consts.move.TYPE_PREV) {
				targetParentNode[childKey].splice(tmpTargetIndex, 0, node);
				newNeighbor = targetNode;
				newNeighbor.isFirstNode = false;
				node.parentTId = targetNode.parentTId;
				node.isFirstNode = true;
				node.isLastNode = false;

			} else if (targetNode.isLastNode && moveType == consts.move.TYPE_NEXT) {
				targetParentNode[childKey].splice(tmpTargetIndex + 1, 0, node);
				newNeighbor = targetNode;
				newNeighbor.isLastNode = false;
				node.parentTId = targetNode.parentTId;
				node.isFirstNode = false;
				node.isLastNode = true;

			} else {
				if (moveType == consts.move.TYPE_PREV) {
					targetParentNode[childKey].splice(tmpTargetIndex, 0, node);
				} else {
					targetParentNode[childKey].splice(tmpTargetIndex + 1, 0, node);
				}
				node.parentTId = targetNode.parentTId;
				node.isFirstNode = false;
				node.isLastNode = false;
			}
			data.fixPIdKeyValue(setting, node);
			data.setSonNodeLevel(setting, node.getParentNode(), node);

			//repair node what been moved
			view.setNodeLineIcos(setting, node);
			view.repairNodeLevelClass(setting, node, oldLevel)

			//repair node's old parentNode dom
			if (!setting.data.keep.parent && oldParentNode[childKey].length < 1) {
				//old parentNode has no child nodes
				oldParentNode.isParent = false;
				oldParentNode.open = false;
				var tmp_ulObj = $$(oldParentNode, consts.id.UL, setting),
				tmp_switchObj = $$(oldParentNode, consts.id.SWITCH, setting),
				tmp_icoObj = $$(oldParentNode, consts.id.ICON, setting);
				view.replaceSwitchClass(oldParentNode, tmp_switchObj, consts.folder.DOCU);
				view.replaceIcoClass(oldParentNode, tmp_icoObj, consts.folder.DOCU);
				tmp_ulObj.css("display", "none");

			} else if (oldNeighbor) {
				//old neigbor node
				view.setNodeLineIcos(setting, oldNeighbor);
			}

			//new neigbor node
			if (newNeighbor) {
				view.setNodeLineIcos(setting, newNeighbor);
			}

			//repair checkbox / radio
			if (!!setting.check && setting.check.enable && view.repairChkClass) {
				view.repairChkClass(setting, oldParentNode);
				view.repairParentChkClassWithSelf(setting, oldParentNode);
				if (oldParentNode != node.parent)
					view.repairParentChkClassWithSelf(setting, node);
			}

			//expand parents after move
			if (!isSilent) {
				view.expandCollapseParentNode(setting, node.getParentNode(), true, animateFlag);
			}
		},
		removeEditBtn: function(setting, node) {
			$$(node, consts.id.EDIT, setting).unbind().remove();
		},
		removeRemoveBtn: function(setting, node) {
			$$(node, consts.id.REMOVE, setting).unbind().remove();
		},
		removeTreeDom: function(setting, node) {
			node.isHover = false;
			view.removeEditBtn(setting, node);
			view.removeRemoveBtn(setting, node);
			tools.apply(setting.view.removeHoverDom, [setting.treeId, node]);
		},
		repairNodeLevelClass: function(setting, node, oldLevel) {
			if (oldLevel === node.level) return;
			var liObj = $$(node, setting),
			aObj = $$(node, consts.id.A, setting),
			ulObj = $$(node, consts.id.UL, setting),
			oldClass = consts.className.LEVEL + oldLevel,
			newClass = consts.className.LEVEL + node.level;
			liObj.removeClass(oldClass);
			liObj.addClass(newClass);
			aObj.removeClass(oldClass);
			aObj.addClass(newClass);
			ulObj.removeClass(oldClass);
			ulObj.addClass(newClass);
		},
		selectNodes : function(setting, nodes) {
			for (var i=0, l=nodes.length; i<l; i++) {
				view.selectNode(setting, nodes[i], i>0);
			}
		}
	},

	_z = {
		tools: _tools,
		view: _view,
		event: _event,
		data: _data
	};
	$.extend(true, $.fn.zTree.consts, _consts);
	$.extend(true, $.fn.zTree._z, _z);

	var zt = $.fn.zTree,
	tools = zt._z.tools,
	consts = zt.consts,
	view = zt._z.view,
	data = zt._z.data,
	event = zt._z.event,
	$$ = tools.$;

	data.exSetting(_setting);
	data.addInitBind(_bindEvent);
	data.addInitUnBind(_unbindEvent);
	data.addInitCache(_initCache);
	data.addInitNode(_initNode);
	data.addInitProxy(_eventProxy);
	data.addInitRoot(_initRoot);
	data.addZTreeTools(_zTreeTools);

	var _cancelPreSelectedNode = view.cancelPreSelectedNode;
	view.cancelPreSelectedNode = function (setting, node) {
		var list = data.getRoot(setting).curSelectedList;
		for (var i=0, j=list.length; i<j; i++) {
			if (!node || node === list[i]) {
				view.removeTreeDom(setting, list[i]);
				if (node) break;
			}
		}
		if (_cancelPreSelectedNode) _cancelPreSelectedNode.apply(view, arguments);
	}

	var _createNodes = view.createNodes;
	view.createNodes = function(setting, level, nodes, parentNode) {
		if (_createNodes) {
			_createNodes.apply(view, arguments);
		}
		if (!nodes) return;
		if (view.repairParentChkClassWithSelf) {
			view.repairParentChkClassWithSelf(setting, parentNode);
		}
	}

	var _makeNodeUrl = view.makeNodeUrl;
	view.makeNodeUrl = function(setting, node) {
		return setting.edit.enable ? null : (_makeNodeUrl.apply(view, arguments));
	}

	var _removeNode = view.removeNode;
	view.removeNode = function(setting, node) {
		var root = data.getRoot(setting);
		if (root.curEditNode === node) root.curEditNode = null;
		if (_removeNode) {
			_removeNode.apply(view, arguments);
		}
	}

	var _selectNode = view.selectNode;
	view.selectNode = function(setting, node, addFlag) {
		var root = data.getRoot(setting);
		if (data.isSelectedNode(setting, node) && root.curEditNode == node && node.editNameFlag) {
			return false;
		}
		if (_selectNode) _selectNode.apply(view, arguments);
		view.addHoverDom(setting, node);
		return true;
	}

	var _uCanDo = tools.uCanDo;
	tools.uCanDo = function(setting, e) {
		var root = data.getRoot(setting);
		if (e && (tools.eqs(e.type, "mouseover") || tools.eqs(e.type, "mouseout") || tools.eqs(e.type, "mousedown") || tools.eqs(e.type, "mouseup"))) {
			return true;
		}
		if (root.curEditNode) {
			view.editNodeBlur = false;
			root.curEditInput.focus();
		}
		return (!root.curEditNode) && (_uCanDo ? _uCanDo.apply(view, arguments) : true);
	}
})(jQuery);
