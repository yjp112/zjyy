<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:util="http://www.springframework.org/schema/util" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
                http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
                http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
                http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
                http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
                http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">
	<!-- applicationContext.xml ; CREATE AT 2015-06-19T02:04:07 BY yuhui@supcon.com-->
	<!-- Spring 配置文件，可插拔Bean在此配置以获得开启或者关闭 -->
   <import resource="classpath:/mvc.xml"/>
	<!-- =============== SPRING CONFIG BEGIN ================ -->
	<context:annotation-config />
	<aop:aspectj-autoproxy proxy-target-class="true" />
	<!-- 请在此加入需要拦截的包路径 -->
	<context:component-scan base-package="com.supconit.honeycomb.**.services,com.supconit.honeycomb.**.daos,com.supconit.honeycomb.**.controllers,hc.**.services,hc.**.daos,hc.**.controllers,com.supconit,com.supconit.montrol"
		name-generator="com.supconit.common.utils.context.LongBeanNameGenerator" />
	<!-- 该SpringContextHolder用于快速获取ApplicationContext,一定要使用Honeycomb提供的，请不要自行替换，否则会导致很多宏失效 -->
	<bean id="springContextHolder" class="com.supconit.honeycomb.base.context.SpringContextHolder" />
	<!-- ================ SPRING CONFIG END ================= -->


	<!-- =============== CACHE CONFIG BEGIN ================ -->
	<!-- 缓存配置，目前Honeycomb提供三种实现：Memcache, Ehcache, Map；建议采用Memcache -->
		<!-- Ehcache 配置 -->
	<!-- ==== 没有安装Memcache时可选用 ==== -->
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" p:config-location="classpath:ehcache.xml" />
	<bean id="cache" class="com.supconit.honeycomb.cache.ehcache.Ehcache" p:cacheManager-ref="cacheManager" />

	

	<bean id="cachePeriodHelper" class="com.supconit.honeycomb.cache.CachePeriodHelper">
		<property name="cachePeriodProperties" ref="cachePeriodProperties" />
	</bean>
	<util:properties id="cachePeriodProperties" location="classpath:/cache-period.properties" />
    <util:properties id="slowSqlConfigProperties" location="classpath:/slowSqlConfig.properties" />

    <!-- ================ CACHE CONFIG END ================= -->


	<!-- =============== ORM CONFIG BEGIN ================ -->
	<!-- 数据源配置 -->
	<!--bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" p:driverClassName="${jdbc.ds.driver}" p:url="${jdbc.ds.jdbcUrl}" p:username="${jdbc.ds.username}" p:password="${jdbc.ds.password}"
		p:initialSize="${jdbc.ds.initialSize}" p:maxActive="${jdbc.ds.maxActive}" p:testOnBorrow="${jdbc.ds.testOnBorrow:false}" destroy-method="close">
	</bean-->
    <bean id="defaultDS" class="com.alibaba.druid.pool.DruidDataSource" p:driverClassName="${jdbc.driver}"
          p:url="${jdbc.jdbcUrl}" p:username="${jdbc.username}" p:password="${jdbc.password}"
          p:initialSize="${jdbc.initialSize}" p:maxActive="${jdbc.maxActive}"
          p:testOnBorrow="${jdbc.testOnBorrow:false}" destroy-method="close">
    </bean>
    <!-- bean id="nhglDS" class="com.alibaba.druid.pool.DruidDataSource" p:driverClassName="${nhgl.jdbc.driver}" p:url="${nhgl.jdbc.jdbcUrl}" p:username="${nhgl.jdbc.username}" p:password="${nhgl.jdbc.password}"
		p:initialSize="${nhgl.jdbc.initialSize}" p:maxActive="${nhgl.jdbc.maxActive}" p:testOnBorrow="${nhgl.jdbc.testOnBorrow:false}" destroy-method="close">
	</bean-->
	<bean id="gisDS" class="com.alibaba.druid.pool.DruidDataSource" p:driverClassName="${gis.jdbc.driver}" p:url="${gis.jdbc.jdbcUrl}" p:username="${gis.jdbc.username}" p:password="${gis.jdbc.password}"
		p:initialSize="${gis.jdbc.initialSize}" p:maxActive="${gis.jdbc.maxActive}" p:testOnBorrow="${gis.jdbc.testOnBorrow:false}" destroy-method="close">
	</bean>

	<bean id="dataSource" class="com.supconit.common.utils.datasource.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="ywgl" value-ref="defaultDS" />
				<!-- entry key="nhgl" value-ref="nhglDS" /-->
				<entry key="gis" value-ref="gisDS" />
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="defaultDS" />
    </bean>
    <!-- =============== ORM CONFIG BEGIN ================ -->

	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" p:dataSource-ref="dataSource" />
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	<bean id="databaseIdProvider" class="hc.orm.DefaultDatabaseIdProvider"></bean>
	<bean id="sqlSessionFactory" class="hc.orm.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="databaseIdProvider" ref="databaseIdProvider" />
		<property name="mapperLocations" value="classpath*:com/supconit/**/mappers/*Mapper.xml" />
		<property name="typeAliasesPackage" value="com.supconit.ywgl,com.supconit.duty,com.supconit.base,com.supconit.montrol.entity,com.supconit.base.honeycomb.extend"/>
	    <property name="plugins">
	        <array>
		        <bean class="com.supconit.honeycomb.dataaccess.interceptors.MenuAutorityInterceptor" />
		        <bean class="com.supconit.common.utils.mybatis.StatisticsInfoInterceptor">
                    <property name="properties" ref="slowSqlConfigProperties"/>
                </bean>
	        </array>
	    </property>
	</bean>
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	
	<bean id="jdbcProcessor" class="com.supconit.common.daos.impl.DefaultSimpleJdbc">
		<property name="dataSource" ref="dataSource" />
		<property name="databaseIdProvider" ref="databaseIdProvider" />
	</bean>
	
	<bean id="jdbcProcessor_ywgl" class="com.supconit.hl.common.daos.impl.DefaultSimpleJdbc">
        <property name="dataSource" ref="dataSource" />
        <property name="databaseIdProvider" ref="databaseIdProvider" />
    </bean>
    
    <!-- ================ BUSINESS TRIGGERS CONFIG END ================= -->
    <bean id="businessTriggerExecutor_ywgl" class="com.supconit.hl.common.triggers.BusinessTriggerExecutor">
        <property name="businessTriggers">
             <map>
	             <entry key="geoAreaServiceImpl" value="mapLevelServiceImpl"/>
	             <entry key="systemRuleServiceImpl" value="layerServiceImpl"/>
             </map>
        </property>
    </bean>
	<!--bean id="jdbcProcessor" class="com.supconit.common.daos.impl.SimpleJdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean-->
	<!-- bean id="jdbcProcessor" class="hc.jdbc.DefaultJdbcProcessor">
		<property name="dataSource" ref="dataSource" />
		<property name="databaseIdProvider" ref="databaseIdProvider" />
	</bean-->
	<!-- bean id="multipartResolver"    class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="102400000" />
    </bean -->
	<!--
	<bean id="sequenceGenerator" class="hc.orm.sequence.SingleSequenceGenerator">
		<property name="dataSource" ref="dataSource" />
	</bean>
	-->
	<!-- ================ ORM CONFIG END ================= -->

	<!-- =============== EXTENDED MODEL CONFIG BEGIN ================ -->
	<bean id="extendedModelProvider" class="hc.modelextend.ExtendedModelProviderFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="databaseIdProvider" ref="databaseIdProvider" />
	</bean>
	<!-- ================ EXTENDED MODEL CONFIG END ================= -->
    <!-- =============== BPM CONFIG BEGIN ================ -->
    <bean id="bpmHandlerAspectSupport" class="hc.bpm.context.interceptors.AnnotationBpmHandlerAspectSupport"></bean>
    <bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
        <property name="dataSource" ref="dataSource"/>
        <property name="transactionManager" ref="transactionManager"/>
        <property name="databaseSchemaUpdate" value="true"/>
        <property name="jobExecutorActivate" value="false"/>
        <property name="activityFontName" value="simsun"/>
        <property name="dbIdentityUsed" value="false"/>
        <property name="assignService">
            <bean class="hc.bpm.services.impl.DefaultAssignService"/>
        </property>
        <!-- property name="deploymentResources" value="classpath*:/activiti/*.bpmn20.xml"/-->
    </bean>

    <bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
        <property name="processEngineConfiguration" ref="processEngineConfiguration"/>
    </bean>

    <bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService"/>
    <bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService"/>
    <bean id="taskService" factory-bean="processEngine" factory-method="getTaskService"/>
    <bean id="formService" factory-bean="processEngine" factory-method="getFormService"/>
    <bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService"/>
    <bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService"/>
    <!-- ================ BPM CONFIG END ================= -->


		<!-- =============== 数据字典 CONFIG BEGIN ================ -->
	<!-- 如果要使用数据字典可以加入下面这个BEAN
	<bean id="dataDictionaryService" class="hc.business.dic.services.DefaultDataDictionaryService">
		<property name="cache" ref="cache" />
	</bean> -->
	<!-- ================ 数据字典 CONFIG END ================= -->


	<!-- =============== BUSINESS TRIGGERS CONFIG BEGIN ================ -->
	<!-- 业务触发器，目前支持Company,Person,Department的触发，支持插入前后，修改前后，删除前后触发事件，如无需要请关闭 -->
	<!-- 触发器请实现hc.orm.triggers.BusinessTrigger接口 -->
	<!-- =====
	<bean id="businessTriggerExecutor" class="hc.orm.triggers.BusinessTriggerExecutor">
		<property name="businessTriggers">
			<map>
				<entry>
					<key>
						<value>com.supconit.honeycomb.business.organization.entities.Person</value>
					</key>
					<bean class="hc.factory.business.triggers.PersonBusinessTrigger"></bean>
				</entry>
			</map>
		</property>
	</bean>
	===== -->
	<!-- ================ BUSINESS TRIGGERS CONFIG END ================= -->



	<!-- =============== SAFETY CONFIG BEGIN ================ -->
	<!-- 安全控制体系 -->
	<bean id="safetyManager" class="hc.safety.web.manager.WebSafetyManager" init-method="init">
		<property name="accountManager" ref="business_authorization_user_service" />
		<property name="roleResourceManager" ref="business_authorization_role_service" />
		<property name="sessionProvider">
			<!-- Session的实现方式，有HttpSession, Cookie, Memcache等实现方式，如果是集群的话不要使用HttpSession方式 -->
			<bean class="hc.safety.web.session.WebSessionProvider"></bean>
		</property>
		<property name="productName" value="${product.code:honeycomb}"></property>
		<!-- 密码加密策略，支持SHA1,MD5等 -->
		<property name="algorithm" value="SHA1" />
		<!-- 登录的地址，未登录时会跳到这个地址 -->
		<property name="loginUrl" value="/platform/login" />
		<!-- URL控制配置 -->
		<!-- anon 无需登录; authc 必须已登录; ROLE[XXX] 必须具有某角色 -->
		<property name="behaviorDefinitionString">
			<value>
				/appWindow = anon
                /login = anon
                /relogin = anon
				/unauthorized = anon
				/unauthenticated = anon
                /error/error404 = anon
                /error/error500 = anon				
				/platform/login = anon
				/platform/login/code = anon
				/login/login = anon
				/login/km = anon
				/login/mobile=anon
				/login/android = anon
				/login/androidIndex=anon
				/login/propertiesInit = anon
				/mobile/upload/uploadImg=anon
				/mobile/app/**=anon
			</value>
		</property>
		<property name="behaviorDefinitionAfter">
			<value>
				/platform/index = authc
				/** = authc
			</value>
		</property>
	</bean>
	<!-- ================ SAFETY CONFIG END ================= -->
	
	
	<!-- ================ SYNCHRONIZEDATA BEGIN ================= -->
    <bean id="readDoorEventService" class="com.supconit.synchronizeData.services.ReadDoorEventService"/>
    <bean id="readDoorEventServiceMessage"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <ref bean="readDoorEventService"></ref>
        </property>
        <property name="targetMethod">
            <value>doJob</value>
        </property>
    </bean>
    <bean id="readDoorEventServiceTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail">
            <ref bean="readDoorEventServiceMessage"/>
        </property>
        <!-- 每隔20秒执行 -->
        <property name="cronExpression">
            <value>0/20 * * * * ?</value>
        </property>
    </bean>
    
    <bean id="updatePersonCardService" class="com.supconit.synchronizeData.services.UpdatePersonCardService"/>
    <bean id="updatePersonCardServiceMessage"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <ref bean="updatePersonCardService"></ref>
        </property>
        <property name="targetMethod">
            <value>doJob</value>
        </property>
    </bean>
    <bean id="updatePersonCardServiceTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail">
            <ref bean="updatePersonCardServiceMessage"/>
        </property>
        <!-- 每隔一个小时执行 -->
        <property name="cronExpression">
            <value>0 0 */1 * * ?</value>
        </property>
    </bean>
    <!-- ================ SYNCHRONIZEDATA END ================= -->
    
    <!-- job bean配置开始 -->
	<bean id="schedulerFactory"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
            <list>
                <!--<ref bean="readDoorEventServiceTrigger"/>
                <ref bean="updatePersonCardServiceTrigger"/> -->
            </list>
        </property>
	</bean>
	<!-- job bean配置结束 -->
	
	<!-- =============== PROFILES BEGIN ================ -->
	<beans profile="test">
		<context:property-placeholder location="classpath:/config-test.properties" ignore-unresolvable="true" />
		<util:properties id="_globalVars" location="classpath:/global-vars-test.properties" />
	</beans>
	<beans profile="dev">
		<context:property-placeholder location="classpath:/config-dev.properties" ignore-unresolvable="true" />
		<util:properties id="_globalVars" location="classpath:/global-vars-dev.properties" />
	</beans>
	<beans profile="production">
		<context:property-placeholder location="classpath:/config.properties" ignore-unresolvable="true" />
		<util:properties id="_globalVars" location="classpath:/global-vars.properties" />
	</beans>
	<!-- ================ PROFILES END ================= -->


</beans>
